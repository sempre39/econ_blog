{
  
    
        "post0": {
            "title": "2021년 1학기 R입문 기말고사 예상문제 (ver 0.71)",
            "content": "1. &#54924;&#44480;&#48516;&#49437; (35&#51216;) . 아래와 같은 수식을 고려하자. . $$y_i= 1.5+ 5 sin(t_i)+ 3 cos(4 t_i)+ epsilon_i, quad i=1,2, dots, 1000$$ . 여기에서 $t_i= frac{2 pi i}{1000}$ 이다. 그리고 $ epsilon_i sim i.i.d~ N(0,1)$, 즉 서로 독립인 표준정규분포에서 추출된 샘플이다. . (1) rnorm()&#51012; &#51060;&#50857;&#54616;&#50668; $ { epsilon_i }_{i=1}^{1000}$ &#51012; &#47564;&#46308;&#44256; &#51060;&#47484; &#48289;&#53552;&#47196; &#47564;&#46308;&#50612;&#46972;. &#51593; &#50500;&#47000;&#50752; &#44057;&#51008; &#48289;&#53552;&#47484; &#49373;&#49457;&#54616;&#46972;. . $ boldsymbol{ epsilon}=( epsilon_1, dots, epsilon_{1000})$ | . epsilon = rnorm(1000, 0, 1) head(epsilon) . &lt;ol class=list-inline&gt;-0.93224126828539 | 0.479284841143003 | 0.8507491793136 | 1.98505510762583 | 1.03464809387551 | -1.15094819398787 | &lt;/ol&gt; (2) $ big { sin(t_i) big }_{i=1}^{1000}$&#50752; $ big { cos(4t_i) big }_{i=1}^{1000}$&#47484; &#44033;&#44033; &#49373;&#49457;&#54616;&#44256; &#51060;&#47484; ${ bf x}_1$&#50752; ${ bf x}_2$&#50640; &#51200;&#51109;&#54616;&#46972;. &#51593; &#50500;&#47000;&#50752; &#44057;&#51008; 2&#44060;&#51032; &#48289;&#53552;&#47484; &#49373;&#49457;&#54616;&#46972;. . ${ bf x}_1= big( sin( frac{2 pi}{1000}), sin( frac{4 pi}{1000}), dots, sin(2 pi) big)$ | ${ bf x}_2= big( cos( frac{8 pi}{1000}), cos( frac{16 pi}{1000}), dots, cos(8 pi) big)$ | . t = c() for (i in 1:1000) t[i] = (2*pi*i)/1000 head(t) . &lt;ol class=list-inline&gt;0.00628318530717959 | 0.0125663706143592 | 0.0188495559215388 | 0.0251327412287183 | 0.0314159265358979 | 0.0376991118430775 | &lt;/ol&gt; x1 = c() for(i in 1:1000) x1[i] = sin(t[i]) head(x1) x2 = c() for(i in 1:1000) x2[i] = cos(4*t[i]) head(x2) . &lt;ol class=list-inline&gt;0.00628314396555895 | 0.0125660398833526 | 0.0188484397154082 | 0.0251300954433375 | 0.0314107590781283 | 0.0376901826699345 | &lt;/ol&gt; &lt;ol class=list-inline&gt;0.9996841892833 | 0.998736956606017 | 0.997158900260614 | 0.9949510169813 | 0.992114701314478 | 0.988651744737914 | &lt;/ol&gt; (3) (1),(2)&#47196; &#48512;&#53552; $y_i$&#47484; &#44228;&#49328;&#54616;&#44256;, $(t_i,y_i)$&#47484; scatter plot&#51004;&#47196; &#49884;&#44033;&#54868; &#54616;&#46972;. &#49353;&#51008; &#39;gray60&#39;&#51012; &#49324;&#50857;&#54616;&#46972;. &#49884;&#44033;&#54868; &#50696;&#49884;&#45716; &#50500;&#47000;&#50752; &#44057;&#45796;. . . y = c() for(i in 1:1000) y[i] = 1.5+5*x1[i]+3*x2[i]+epsilon[i] head(y) . &lt;ol class=list-inline&gt;3.5982270193923 | 5.03832591037782 | 5.43646807867248 | 6.59555863578641 | 5.66804599320958 | 3.50345795357555 | &lt;/ol&gt; plot(t,y) . (4) &#46160; &#48289;&#53552; ${ bf x}_1$, ${ bf x}_2$&#50752; cbind()&#47484; &#51060;&#50857;&#54616;&#50668; &#50500;&#47000;&#50752; &#44057;&#51008; $1000 times 3$ &#47588;&#53944;&#47533;&#49828; ${ bf X}$&#47484; &#47564;&#46308;&#50612;&#46972;. . $${ bf X}= begin{bmatrix} 1 &amp; sin( frac{2 pi}{1000}) &amp; cos( frac{8 pi}{1000}) 1 &amp; sin( frac{4 pi}{1000}) &amp; cos( frac{16 pi}{1000}) dots &amp; dots &amp; dots 1 &amp; sin(2 pi) &amp; cos(8 pi) end{bmatrix} $$ . x0 = rep(1, times = 1000) head(x0) X = cbind(x0, x1, x2) head(X) . &lt;ol class=list-inline&gt;1 | 1 | 1 | 1 | 1 | 1 | &lt;/ol&gt; A matrix: 6 × 3 of type dbl x0x1x2 . 1 | 0.006283144 | 0.9996842 | . 1 | 0.012566040 | 0.9987370 | . 1 | 0.018848440 | 0.9971589 | . 1 | 0.025130095 | 0.9949510 | . 1 | 0.031410759 | 0.9921147 | . 1 | 0.037690183 | 0.9886517 | . (5) $3 times 1$ &#47588;&#53944;&#47533;&#49828; $ boldsymbol{ beta}= begin{bmatrix} 1.5 5 3 end{bmatrix}$&#47484; &#47564;&#46308;&#44256; &#47588;&#53944;&#47533;&#49828; &#44273;&#51012; &#51060;&#50857;&#54616;&#50668; ${ bf X} { boldsymbol beta}$&#47484; &#44228;&#49328;&#54616;&#46972;. &#44228;&#49328;&#44208;&#44284;&#47484; &#48289;&#53552;&#54868;&#54616;&#44256; (3)&#51032; $y$&#52629;&#50640; &#48521;&#51008;&#49440;&#51004;&#47196; &#49884;&#44033;&#54868; &#54616;&#46972;. &#49884;&#44033;&#54868; &#50696;&#49884;&#45716; &#50500;&#47000;&#50752; &#44057;&#45796;. (&#54596;&#50836;&#54616;&#45796;&#47732; &#51201;&#51208;&#54616;&#44172; &#49440;&#51032; &#44405;&#44592;&#47484; &#51312;&#51221;&#54624; &#44163;) . . b = rbind(1.5, 5, 3) b . A matrix: 3 × 1 of type dbl 1.5 | . 5.0 | . 3.0 | . rl = X %*% b . plot(t,y) points(t, rl, type = &#39;l&#39;, lwd = 5, col = &quot;red&quot;) . (6) &#50500;&#47000;&#51032; &#49688;&#49885;&#51012; &#51060;&#50857;&#54616;&#50668; $ boldsymbol{ hat beta}$&#47484; &#44228;&#49328;&#54616;&#44256; &#44228;&#49328;&#44208;&#44284;&#47484; $ boldsymbol{ beta}$&#50752; &#48708;&#44368;&#54616;&#46972;. . $$ boldsymbol{ hat beta} = ({ bf X}^ top { bf X})^{-1}{ bf X}^ top { bf y}$$ . 여기에서 ${ bf X}$와 ${ bf y}$는 각각 아래와 같다. . ${ bf X}= begin{bmatrix} 1 &amp; sin( frac{2 pi}{1000}) &amp; cos( frac{4 pi}{1000}) 1 &amp; sin( frac{8 pi}{1000}) &amp; cos( frac{16 pi}{1000}) dots &amp; dots &amp; dots 1 &amp; sin(2 pi) &amp; cos(8 pi) end{bmatrix}$, $ quad { bf y}= begin{bmatrix} y_1 y_2 dots y_{1000} end{bmatrix}$ | . 또한 ${ bf X}^ top$는 ${ bf X}$의 전치행렬(transpose) 그리고 $({ bf X}^ top { bf X})^{-1}$은 ${ bf X}^ top { bf X}$의 역행렬을 의미한다. . X y1 = cbind(y) head(y1) bhat = solve(t(X) %*% X) %*% t(X) %*% y1 bhat print(cbind(c(b),c(bhat))) . A matrix: 1000 × 3 of type dbl x0x1x2 . 1 | 0.006283144 | 0.9996842 | . 1 | 0.012566040 | 0.9987370 | . 1 | 0.018848440 | 0.9971589 | . 1 | 0.025130095 | 0.9949510 | . 1 | 0.031410759 | 0.9921147 | . 1 | 0.037690183 | 0.9886517 | . 1 | 0.043968118 | 0.9845643 | . 1 | 0.050244318 | 0.9798551 | . 1 | 0.056518534 | 0.9745269 | . 1 | 0.062790520 | 0.9685832 | . 1 | 0.069060026 | 0.9620277 | . 1 | 0.075326806 | 0.9548645 | . 1 | 0.081590612 | 0.9470983 | . 1 | 0.087851197 | 0.9387339 | . 1 | 0.094108313 | 0.9297765 | . 1 | 0.100361715 | 0.9202318 | . 1 | 0.106611154 | 0.9101060 | . 1 | 0.112856385 | 0.8994053 | . 1 | 0.119097160 | 0.8881364 | . 1 | 0.125333234 | 0.8763067 | . 1 | 0.131564359 | 0.8639234 | . 1 | 0.137790291 | 0.8509945 | . 1 | 0.144010783 | 0.8375280 | . 1 | 0.150225589 | 0.8235326 | . 1 | 0.156434465 | 0.8090170 | . 1 | 0.162637165 | 0.7939904 | . 1 | 0.168833445 | 0.7784623 | . 1 | 0.175023059 | 0.7624425 | . 1 | 0.181205764 | 0.7459411 | . 1 | 0.187381315 | 0.7289686 | . ⋮ | ⋮ | ⋮ | . 1 | -1.812058e-01 | 0.7459411 | . 1 | -1.750231e-01 | 0.7624425 | . 1 | -1.688334e-01 | 0.7784623 | . 1 | -1.626372e-01 | 0.7939904 | . 1 | -1.564345e-01 | 0.8090170 | . 1 | -1.502256e-01 | 0.8235326 | . 1 | -1.440108e-01 | 0.8375280 | . 1 | -1.377903e-01 | 0.8509945 | . 1 | -1.315644e-01 | 0.8639234 | . 1 | -1.253332e-01 | 0.8763067 | . 1 | -1.190972e-01 | 0.8881364 | . 1 | -1.128564e-01 | 0.8994053 | . 1 | -1.066112e-01 | 0.9101060 | . 1 | -1.003617e-01 | 0.9202318 | . 1 | -9.410831e-02 | 0.9297765 | . 1 | -8.785120e-02 | 0.9387339 | . 1 | -8.159061e-02 | 0.9470983 | . 1 | -7.532681e-02 | 0.9548645 | . 1 | -6.906003e-02 | 0.9620277 | . 1 | -6.279052e-02 | 0.9685832 | . 1 | -5.651853e-02 | 0.9745269 | . 1 | -5.024432e-02 | 0.9798551 | . 1 | -4.396812e-02 | 0.9845643 | . 1 | -3.769018e-02 | 0.9886517 | . 1 | -3.141076e-02 | 0.9921147 | . 1 | -2.513010e-02 | 0.9949510 | . 1 | -1.884844e-02 | 0.9971589 | . 1 | -1.256604e-02 | 0.9987370 | . 1 | -6.283144e-03 | 0.9996842 | . 1 | -2.449294e-16 | 1.0000000 | . A matrix: 6 × 1 of type dbl y . 3.598227 | . 5.038326 | . 5.436468 | . 6.595559 | . 5.668046 | . 3.503458 | . A matrix: 3 × 1 of type dbl y . x01.472656 | . x15.099967 | . x23.077521 | . [,1] [,2] [1,] 1.5 1.472656 [2,] 5.0 5.099967 [3,] 3.0 3.077521 . (7) ${ bf X} boldsymbol{ hat beta}$&#47484; &#44228;&#49328;&#54616;&#46972;. &#44228;&#49328;&#44208;&#44284;&#47484; &#48289;&#53552;&#54868; &#54616;&#44256; (5)&#51032; &#49884;&#44033;&#54868; &#44208;&#44284;&#50640; &#54392;&#47480;&#51216;&#49440;&#51004;&#47196; &#49884;&#44033;&#54868; &#54616;&#46972;. &#49884;&#44033;&#54868; &#50696;&#49884;&#45716; &#50500;&#47000;&#50752; &#44057;&#45796;. (&#54596;&#50836;&#54616;&#45796;&#47732; &#51201;&#51208;&#54616;&#44172; &#49440;&#51032; &#44405;&#44592;&#47484; &#51312;&#51221;&#54624; &#44163;) . . bl = X %*% bhat bl . A matrix: 1000 × 1 of type dbl y . 4.581249 | . 4.610377 | . 4.637560 | . 4.662801 | . 4.686104 | . 4.707471 | . 4.726910 | . 4.744425 | . 4.760026 | . 4.773721 | . 4.785520 | . 4.795436 | . 4.803480 | . 4.809667 | . 4.814012 | . 4.816530 | . 4.817240 | . 4.816159 | . 4.813306 | . 4.808704 | . 4.802372 | . 4.794335 | . 4.784616 | . 4.773241 | . 4.760233 | . 4.745622 | . 4.729435 | . 4.711701 | . 4.692449 | . 4.671711 | . ⋮ | . 2.844162 | . 2.926477 | . 3.007345 | . 3.086734 | . 3.164612 | . 3.240950 | . 3.315716 | . 3.388884 | . 3.460425 | . 3.530313 | . 3.598523 | . 3.665031 | . 3.729813 | . 3.792848 | . 3.854114 | . 3.913591 | . 3.971262 | . 4.027108 | . 4.081113 | . 4.133262 | . 4.183540 | . 4.231936 | . 4.278438 | . 4.323034 | . 4.365716 | . 4.406476 | . 4.445307 | . 4.482204 | . 4.517161 | . 4.550177 | . plot(t,y) points(t, rl, type = &#39;l&#39;, lwd = 5, col = &quot;red&quot;) points(t, bl, type = &#39;l&#39;, lwd = 5, lty = 2, col = &quot;blue&quot;) . 2. &#47788;&#53580;&#52852;&#47484;&#47196; &#51201;&#48516; (10&#51216;) . (1) $ int_{-1.96}^{1.96} frac{1}{ sqrt{2 pi}}e^{- frac{1}{2}x^2}dx$&#51032; &#44050;&#51012; runif()&#47484; &#51060;&#50857;&#54620; &#47788;&#53580;&#52852;&#47484;&#47196; &#51201;&#48516;&#51004;&#47196; &#44228;&#49328;&#54616;&#46972;. . x=seq(-1.96, 1.96, 0.01) y=(1/sqrt(2*pi))*exp((-1/2)*x^2) min(y) max(y) . 0.0584409443334515 0.398942280401433 plot(x,y,type = &#39;l&#39;) . xx = runif(10000, -2, 2) yy = runif(10000, 0.05, 0.40) . plot(xx,yy) . plot(xx, yy) lines(x,y,col = &#39;red&#39;, lwd = 3) . test = function(xx,yy){ yy &lt; (1/sqrt(2*pi))*exp((-1/2)*xx^2) } . print(c(xx[1],yy[1])) print((1/sqrt(2*pi))*exp((-1/2)*xx[1]^2)) test(xx[1],yy[1]) . [1] -0.61375956 0.06942337 [1] 0.3304536 . TRUE plot(xx,yy,col=&#39;gray&#39;) lines(x,y,col=&#39;red&#39;,lwd=3) points(xx[1],yy[1], col=&#39;blue&#39;) points(xx[1],(1/sqrt(2*pi))*exp((-1/2)*xx[1]^2), col = &#39;red&#39;) . tst = c() for (i in 1:10000) tst[i] = test(xx[i], yy[i]) . head(tst) . &lt;ol class=list-inline&gt;TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | &lt;/ol&gt; plot(xx,yy,col=&#39;gray&#39;) lines(x,y,col=&#39;red&#39;, lwd=3) points(xx[tst],yy[tst],col=&#39;red&#39;) . sum(tst) . 5386 sum(tst)/10000 * 4*0.4 . 0.86176 (2) rnorm()&#51012; &#51060;&#50857;&#54616;&#50668; &#54364;&#51456;&#51221;&#44508;&#48516;&#54252;&#50640;&#49436; 1000&#44060;&#51032; &#54869;&#47456;&#48320;&#49688;&#47484; &#49373;&#49457;&#54616;&#44256; &#49373;&#49457;&#46108; &#54869;&#47456;&#48320;&#49688;&#46308; &#51473; &#44396;&#44036; $(-1.96 , 1.96)$&#49324;&#51060;&#50640; &#51080;&#45716; &#54869;&#47456;&#48320;&#49688;&#47484; count&#54616;&#46972;. . X = rnorm(1000) head(X) . &lt;ol class=list-inline&gt;-0.197975645192963 | -1.02953091291913 | -2.11000554910717 | -0.422459963913279 | -1.83932019814999 | 1.18412093419711 | &lt;/ol&gt; Z = c() for (i in 1:1000) Z[i] = -1.96 &lt; X[i] &amp; X[i] &lt; 1.96 Z . &lt;ol class=list-inline&gt;TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | ⋯ | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | TRUE | &lt;/ol&gt; sum(Z) . 941 3. &#51669;&#44160;&#45796;&#47532; (10&#51216;) . 10명의 참가자가 (유리,강화유리)의 쌍으로 이루어진 징검다리를 건너는 게임을 시작한다. (유리,강화유리)의 쌍은 총 20개 있다. 따라서 유리는 총 40장이 있다. 참가자는 강화유리로 된 징검다리를 밟으면 살아남지만 유리로 된 징검다리를 밟으면 죽는다. 10명의 참가자의 특징은 아래와 같다. . 1번~8번 참가자, 10번 참가자: 50퍼센트의 확률로 강화유리를 고를 수 있다. | 9번 참가자: 95퍼센트의 확률로 강화유리를 고를 수 있다. | . 다리를 건너는 순서는 아래와 같이 번호의 오름차순으로 건너는 방법과 번호의 내림차순으로 건너는 2가지 방법이 있다고 하자. . Type A: 10번 참가자부터 다리를 건너고 그 뒤로 9번, 8번, ... 1번 순으로 다리를 건넌다. | Type B: 1번 참가자부터 다리를 건너고 그 뒤로 2번, 3번, ... 10번 순으로 다리를 건넌다. | . 8번 참가자는 Type A 와 Type B 중 어떠한 경우에 살아남을 확률이 높은가? . library(tidyverse) . Warning message: “package ‘tidyverse’ was built under R version 4.0.3” ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.6 ✔ dplyr 1.0.7 ✔ tidyr 1.1.4 ✔ stringr 1.4.0 ✔ readr 2.1.1 ✔ forcats 0.5.1 Warning message: “package ‘ggplot2’ was built under R version 4.0.5” Warning message: “package ‘tibble’ was built under R version 4.0.5” Warning message: “package ‘tidyr’ was built under R version 4.0.5” Warning message: “package ‘readr’ was built under R version 4.0.5” Warning message: “package ‘purrr’ was built under R version 4.0.3” Warning message: “package ‘dplyr’ was built under R version 4.0.5” Warning message: “package ‘stringr’ was built under R version 4.0.5” Warning message: “package ‘forcats’ was built under R version 4.0.3” ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . rm(list=ls()) . SIMULATE1 = function(){ ### 변수들의 모음 ARR = c(&#39;N1&#39;,&#39;N2&#39;,&#39;N3&#39;,&#39;N4&#39;,&#39;N5&#39;,&#39;N6&#39;,&#39;N7&#39;,&#39;N8&#39;,&#39;N9&#39;,&#39;N10&#39;) SURV = 10 PLAYER = ARR[SURV] STAGE = 0 TOSSRSLT = NA ### Subfunction들의 모음 toss = function(p) rbinom(n=1,size=1,prob=p) %&gt;% as.logical reset = function(){ TOSSRSLT &lt;&lt;- NA SURV &lt;&lt;- 10 STAGE &lt;&lt;- 0 PLAYER &lt;&lt;- ARR[SURV] } record = function(){ list(PRE_TOSSRSLT=TOSSRSLT, SURV=SURV, STAGE=STAGE, PLAYER=PLAYER) } go = function(){ PROB &lt;&lt;- 0.5+ (PLAYER==&#39;N9&#39;)*0.45 TOSSRSLT &lt;&lt;- toss(PROB) if (TOSSRSLT==FALSE) SURV &lt;&lt;- SURV - 1 STAGE &lt;&lt;- STAGE + 1 PLAYER &lt;&lt;- ARR[SURV] } gogo = function() for(i in 1:10) go() gogo_history = function(){ rslt_ = as_tibble(record()) ## go를 시작하기전의 결과가 티블로 만들어짐 for(i in 1:10){ go() rslt_ = rbind(rslt_, as_tibble(record())) } print(rslt_) } simulate_once = function(){ reset() gogo() return(record()$SURV ) } ### BODY simrslt = c() for (i in 1:1000) simrslt[i] = simulate_once() &gt; 7 sum(simrslt) } . rslt1 = SIMULATE1() rslt1/1000*100 . 74.7 SIMULATE2 = function(){ ### 변수들의 모음 ARR = c(&#39;N10&#39;,&#39;N9&#39;,&#39;N8&#39;,&#39;N7&#39;,&#39;N6&#39;,&#39;N5&#39;,&#39;N4&#39;,&#39;N3&#39;,&#39;N2&#39;,&#39;N1&#39;) SURV = 10 PLAYER = ARR[SURV] STAGE = 0 TOSSRSLT = NA ### Subfunction들의 모음 toss = function(p) rbinom(n=1,size=1,prob=p) %&gt;% as.logical reset = function(){ TOSSRSLT &lt;&lt;- NA SURV &lt;&lt;- 10 STAGE &lt;&lt;- 0 PLAYER &lt;&lt;- ARR[SURV] } record = function(){ list(PRE_TOSSRSLT=TOSSRSLT, SURV=SURV, STAGE=STAGE, PLAYER=PLAYER) } go = function(){ PROB &lt;&lt;- 0.5+ (PLAYER==&#39;N9&#39;)*0.45 TOSSRSLT &lt;&lt;- toss(PROB) if (TOSSRSLT==FALSE) SURV &lt;&lt;- SURV - 1 STAGE &lt;&lt;- STAGE + 1 PLAYER &lt;&lt;- ARR[SURV] } gogo = function() for(i in 1:10) go() gogo_history = function(){ rslt_ = as_tibble(record()) ## go를 시작하기전의 결과가 티블로 만들어짐 for(i in 1:10){ go() rslt_ = rbind(rslt_, as_tibble(record())) } print(rslt_) } simulate_once = function(){ reset() gogo() return(record()$SURV ) } ### BODY simrslt = c() for (i in 1:1000) simrslt[i] = simulate_once() &gt; 2 sum(simrslt) } . rslt2 = SIMULATE2() rslt2/1000*100 . 94.3 4. COVID19 (15&#51216;) . 아래는 한국의 코로나확진자 발생수를 tibble로 불러오는 코드와 그 결과이다. . library(tidyverse) . df=read_csv(&#39;https://raw.githubusercontent.com/guebin/2021IR/master/_notebooks/covid19.csv&#39;) head(df) . Rows: 12294 Columns: 5 ── Column specification ──────────────────────────────────────────────────────── Delimiter: &#34;,&#34; chr (1): prov dbl (4): year, month, day, cases ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. . A tibble: 6 × 5 yearmonthdayprovcases . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;chr&gt;&lt;dbl&gt; . 2020 | 1 | 20 | 서울 | 0 | . 2020 | 1 | 20 | 부산 | 0 | . 2020 | 1 | 20 | 대구 | 0 | . 2020 | 1 | 20 | 인천 | 1 | . 2020 | 1 | 20 | 광주 | 0 | . 2020 | 1 | 20 | 대전 | 0 | . (1) 2020&#45380;&#51032; &#54869;&#51652;&#51088;(cases)&#52509;&#54633;&#44284; 2021&#45380;&#51032; &#54869;&#51652;&#51088;(cases)&#52509;&#54633;&#51012; &#44396;&#54616;&#46972;. . year1 = df %&gt;% filter(year == 2020 | year == 2021) total_cases = year1 %&gt;% summarize(sum_cases = sum(cases)) total_cases . A tibble: 1 × 1 sum_cases . &lt;dbl&gt; . 457612 | . (2) 2020&#45380; 2&#50900;1&#51068; ~ 2020&#45380; 2&#50900;15&#51068;&#44620;&#51648;&#51032; &#44592;&#44036;&#46041;&#50504; &#54869;&#51652;&#51088;&#51032; &#54633;&#51012; &#51648;&#50669;&#48324;&#47196; &#45208;&#45572;&#50612; &#44396;&#54616;&#46972; (&#50500;&#47000;&#50696;&#49884; &#52280;&#44256;). &#44032;&#51109; &#47566;&#51008; &#54869;&#51652;&#51088;&#44032; &#48156;&#44204;&#46108; &#51648;&#50669;&#51008; &#50612;&#46356;&#51064;&#44032;? . 즉 아래를 각각 계산하고 2020년 2월1일 ~ 2020년 2월15일 기간동안 발생한 확진자의 합이 가장 큰 지역을 찾으면 된다. . 2020년2월1일 ~ 2020년2월15일 기간 서울에서 발생한 확진자의 합 = 2020년2월1일 서울에서 발생한 확진자수 + ... + 2020년2월15일 서울에서 발생한 확진자수 | ... | 2020년2월1일 ~ 2020년2월15일 기간 제주에서 발생한 확진자의 합 = 2020년2월1일 제주에서 발생한 확진자수 + ... + 2020년2월15일 제주에서 발생한 확진자수 | . year2 = df %&gt;% filter(year == 2020 &amp; month == 2 &amp; day &gt; 0 &amp; day &lt; 16 ) prov_cases1 = year2 %&gt;% group_by(prov) %&gt;% summarize(sum_cases = sum(cases)) %&gt;% arrange(desc(sum_cases)) %&gt;% head(1) prov_cases1 . A tibble: 1 × 2 provsum_cases . &lt;chr&gt;&lt;dbl&gt; . 경기 | 9 | . (3) 2020&#45380; 2&#50900;16&#51068; ~ 2020&#45380; 2&#50900;29&#51068;&#44620;&#51648;&#51032; &#44592;&#44036;&#46041;&#50504; &#54869;&#51652;&#51088;&#51032; &#52509;&#54633;&#51012; &#51648;&#50669;&#48324;&#47196; &#45208;&#45572;&#50612; &#44396;&#54616;&#46972; (&#50500;&#47000;&#50696;&#49884; &#52280;&#44256;). &#44032;&#51109; &#47566;&#51008; &#54869;&#51652;&#51088;&#44032; &#48156;&#44204;&#46108; &#51648;&#50669;&#51008; &#50612;&#46356;&#51064;&#44032;? . 즉 아래를 각각 계산하고 2020년 2월16일 ~ 2020년 2월29일 기간동안 발생한 확진자의 합이 가장 큰 지역을 찾으면 된다. . 2020년2월16일 ~ 2020년2월29일 기간 서울에서 발생한 확진자의 합 = 2020년2월16일 서울에서 발생한 확진자수 + ... + 2020년2월29일 서울에서 발생한 확진자수 | ... | 2020년2월16일 ~ 2020년2월29일 기간 제주에서 발생한 확진자의 합 = 2020년2월16일 제주에서 발생한 확진자수 + ... + 2020년2월29일 제주에서 발생한 확진자수 | . year3 = df %&gt;% filter(year == 2020 &amp; month == 2 &amp; day &gt; 15 &amp; day &lt; 30 ) prov_cases2 = year3 %&gt;% group_by(prov) %&gt;% summarize(sum_cases = sum(cases)) %&gt;% arrange(desc(sum_cases)) %&gt;% head(1) prov_cases2 . A tibble: 1 × 2 provsum_cases . &lt;chr&gt;&lt;dbl&gt; . 대구 | 2055 | .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_12_21_2021%EB%85%84_1%ED%95%99%EA%B8%B0_R%EC%9E%85%EB%AC%B8%EA%B8%B0%EB%A7%90%EA%B3%A0%EC%82%AC.html",
            "relUrl": "/2022/04/29/_12_21_2021%EB%85%84_1%ED%95%99%EA%B8%B0_R%EC%9E%85%EB%AC%B8%EA%B8%B0%EB%A7%90%EA%B3%A0%EC%82%AC.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "(14주차) 12월9일",
            "content": "&#51669;&#44160;&#45796;&#47532; &#47928;&#51228; III. . 강화유리와 유리를 구분할 수 있는 유리 장인이 있다. . 이 유리장인은 80퍼센트의 확률로 강화유리를 고른다. . 총 10명의 참가자가 있고 이 참가자들은 (유리,강화유리)의 조합으로 이루어진 징검다리를 5번연속으로 건너야 한다. . 아래의 경우에 참가자들은 평균적으로 몇명이 살아남겠는가? . (1) 일반인1 - 일반인2 - .... - 일반인9 - 유리장인 || (강화유리, 유리) . (2) 유리장인 - 일반인1 - 일반인2 - ... - 일반인9 || (강화유리, 유리) . 1000번 시뮬레이션을 하여 결과를 추정하라. . (단, 일반인은 50%의 확률로 강화유리를 고를수 있다고 하자) . . [예시] (1)의 시뮬레이션 결과가 아래와 같다고 하자. . 첫번째 징검다리: 유리장인이 강화유리 선택 | 두번째 징검다리: 유리장인이 강화유리 선택 | 세번째 징검다리: 유리장인이 일반유리 선택 $ to$ 유리장인 탈락 &amp; 일반인9는 당연히 강화유리를 선택 | 네번째 징검다리: 일반인9가 일반유리 선택 $ to$ 일반인9 탈락 &amp; 일반인8은 당연히 강화유리 선택 | 다섯번째 징검다리: 일반인8이 강화유리 선택 | . 이 경우는 일반인8,일반인7, $ dots$, 일반인1이 살아남으므로 8명이 살아남는다. . [예시] (2)의 시뮬레이션 결과가 아래와 같다고 하자. . 첫번째 징검다리: 일반인9 일반유리 선택 $ to$ 일반인9 탈락 &amp; 일반인8은 강화유리 선택 | 두번째 징검다리: 일반인8 일반유리 선택 $ to$ 일반인8 탈락 &amp; 일반인7은 강화유리 선택 | 세번째 징검다리: 일반인7 일반유리 선택 $ to$ 일반인7 탈락 &amp; 일반인6은 강화유리 선택 | 네번째 징검다리: 일반인6 일반유리 선택 $ to$ 일반인6 탈락 &amp; 일반인5는 강화유리 선택 | 다섯번째 징검다리: 일반인5 일반유리 선택 $ to$ 일반인5 탈락 &amp; 일반인4는 강화유리 선택 | . 이 경우는 일반인4,일반인3,일반인2,일반인1,유리장인 이 살아남는다. (따라서 5명) . - 즉 살아남을수 있는 최대인원수는 10명이며 최소인원수는 5명이다. . - 유리장인이 100%의 확률로 강화유리를 구분한다면 (1)의 경우 항상 10명이 살아남는다. (즉 평균도 10명) . &#54400;&#51060;2 . (1) 일반인1 - 일반인2 - .... - 일반인9 - 유리장인 || (강화유리, 유리) . 총 살아남은 사람의 수 = 5 + 5번의 기회 중에서 일반인의 성공횟수 . library(tidyverse) . Warning message: “package ‘tidyverse’ was built under R version 4.0.3” ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.6 ✔ dplyr 1.0.7 ✔ tidyr 1.1.4 ✔ stringr 1.4.0 ✔ readr 2.1.1 ✔ forcats 0.5.1 Warning message: “package ‘ggplot2’ was built under R version 4.0.5” Warning message: “package ‘tibble’ was built under R version 4.0.5” Warning message: “package ‘tidyr’ was built under R version 4.0.5” Warning message: “package ‘readr’ was built under R version 4.0.5” Warning message: “package ‘purrr’ was built under R version 4.0.3” Warning message: “package ‘dplyr’ was built under R version 4.0.5” Warning message: “package ‘stringr’ was built under R version 4.0.5” Warning message: “package ‘forcats’ was built under R version 4.0.3” ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . y = rbinom(1, size=5, 0.5) y . [1] 4 . - 살아남은 사람수는 ? . print(5+y) . [1] 6 . - 정리하면 . rslt &lt;- c() for (i in 1:10000) { y = rbinom(1, size = 5, 0.5) rslt[i]=5+y } . rslt1 = mean(rslt) rslt1 . [1] 7.4965 . (2) 유리장인 - 일반인1 - 일반인2 - ... - 일반인9 || (강화유리, 유리) . 총 살아남은 사람의 수 = 5 + 장인의 성공횟수 + (5-장인의성공횟수-1)의 기회중에서 일반인의 성공횟수 . 단 (5-장인의성공횟수-1)=&lt;0 이면 마지막항은 0으로 계산한다. | . rslt &lt;- c() for (i in 1:10000){ x=sum(cumprod(rbinom(5,size=1,0.8))) xx_=5-x-1 if (xx_&gt;0) y = rbinom(1, size=xx_, 0.5) else y=0 rslt[i]=5+x+y } . rslt2 = mean(rslt) rslt2 . [1] 8.5053 . print(c(rslt1, rslt2)) . [1] 7.4965 8.5053 . &#54400;&#51060;3 . (1) 일반인1 - 일반인2 - .... - 일반인9 - 유리장인 || (강화유리, 유리) . rm(list=ls()) . SIMULATE1 = function(){ ### 변수들의 모음 ARR = c(&#39;A&#39;,&#39;N1&#39;,&#39;N2&#39;,&#39;N3&#39;,&#39;N4&#39;,&#39;N5&#39;,&#39;N6&#39;,&#39;N7&#39;,&#39;N8&#39;,&#39;N9&#39;) SURV = 10 PLAYER = ARR[SURV] STAGE = 0 TOSSRSLT = NA ### Subfunction들의 모음 toss = function(p) rbinom(n=1,size=1,prob=p) %&gt;% as.logical reset = function(){ TOSSRSLT &lt;&lt;- NA SURV &lt;&lt;- 10 STAGE &lt;&lt;- 0 PLAYER &lt;&lt;- ARR[SURV] } record = function(){ list(PRE_TOSSRSLT=TOSSRSLT, SURV=SURV, STAGE=STAGE, PLAYER=PLAYER) } go = function(){ PROB &lt;&lt;- 0.5+ (PLAYER==&#39;A&#39;)*0.3 TOSSRSLT &lt;&lt;- toss(PROB) if (TOSSRSLT==FALSE) SURV &lt;&lt;- SURV - 1 STAGE &lt;&lt;- STAGE + 1 PLAYER &lt;&lt;- ARR[SURV] } gogo = function() for(i in 1:5) go() gogo_history = function(){ rslt_ = as_tibble(record()) ## go를 시작하기전의 결과가 티블로 만들어짐 for(i in 1:5){ go() rslt_ = rbind(rslt_, as_tibble(record())) } print(rslt_) } simulate_once = function(){ reset() gogo() return(record()$SURV ) } ### BODY simrslt = c() for (i in 1:100000) simrslt[i] = simulate_once() mean(simrslt) } . rslt1 = SIMULATE1() rslt1 . [1] 7.50565 . (2) 유리장인 - 일반인1 - 일반인2 - ... - 일반인9 || (강화유리, 유리) . SIMULATE2 = function(){ ### 변수들의 모음 ARR = c(&#39;N1&#39;,&#39;N2&#39;,&#39;N3&#39;,&#39;N4&#39;,&#39;N5&#39;,&#39;N6&#39;,&#39;N7&#39;,&#39;N8&#39;,&#39;N9&#39;,&#39;A&#39;) SURV = 10 PLAYER = ARR[SURV] STAGE = 0 TOSSRSLT = NA ### Subfunction들의 모음 toss = function(p) rbinom(n=1,size=1,prob=p) %&gt;% as.logical reset = function(){ TOSSRSLT &lt;&lt;- NA SURV &lt;&lt;- 10 STAGE &lt;&lt;- 0 PLAYER &lt;&lt;- ARR[SURV] } record = function(){ list(PRE_TOSSRSLT=TOSSRSLT, SURV=SURV, STAGE=STAGE, PLAYER=PLAYER) } go = function(){ PROB &lt;&lt;- 0.5+ (PLAYER==&#39;A&#39;)*0.3 TOSSRSLT &lt;&lt;- toss(PROB) if (TOSSRSLT==FALSE) SURV &lt;&lt;- SURV - 1 STAGE &lt;&lt;- STAGE + 1 PLAYER &lt;&lt;- ARR[SURV] } gogo = function() for(i in 1:5) go() gogo_history = function(){ rslt_ = as_tibble(record()) ## go를 시작하기전의 결과가 티블로 만들어짐 for(i in 1:5){ go() rslt_ = rbind(rslt_, as_tibble(record())) } print(rslt_) } simulate_once = function(){ reset() gogo() return(record()$SURV ) } ### BODY simrslt = c() for (i in 1:100000) simrslt[i] = simulate_once() mean(simrslt) } . rslt2 = SIMULATE2() rslt2 . [1] 8.50364 . print(c(rslt1, rslt2)) . [1] 7.50565 8.50364 .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_12_09_(14%EC%A3%BC%EC%B0%A8)_12%EC%9B%949%EC%9D%BC.html",
            "relUrl": "/2022/04/29/_12_09_(14%EC%A3%BC%EC%B0%A8)_12%EC%9B%949%EC%9D%BC.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "(12주차) 11월30일 + 11월25일보충강의",
            "content": "&#45936;&#51060;&#53552;&#54532;&#47112;&#51076;&#44284; &#54000;&#48660; . library(tidyverse) . - 길이가 50인 벡터생성 . A = rnorm(10*5) A ## 길이가 50인 벡터에 정규분포에 추출한 값 . [1] 1.17767702 2.73106894 -1.35304458 -0.03276446 0.53369832 0.49395437 [7] -0.57098744 0.08639052 0.13038589 -0.83919513 0.63070688 0.79315491 [13] -0.88411918 -0.89302478 -1.73600236 -1.03698473 -0.01582456 0.96717754 [19] -0.22076719 1.01093743 0.95756614 -1.06746861 -0.80694017 0.40289417 [25] 0.03584857 0.07879276 -1.20817133 -0.67848560 -0.99625585 0.99035758 [31] -0.30129979 0.63455394 0.59275899 -0.02683564 0.36659406 -0.39990796 [37] 0.03857880 -0.94117668 -0.52508619 0.68735157 -0.11328093 -0.62775891 [43] 0.90407099 0.45493649 -0.32498564 0.11173280 -0.18886705 -0.30540003 [49] 1.84845946 -0.17473138 . - 매트릭스로 변경 . dim(A) = c(10,5) A . [,1] [,2] [,3] [,4] [,5] [1,] 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 [2,] 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 [3,] -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 [4,] -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 [5,] 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 [6,] 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 [7,] -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 [8,] 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 [9,] 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 [10,] -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . - 티블로 변경 (자동으로 V1,...,V5 열의 이름이 지정됨) . A = as_tibble(A) A . Warning message: “The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0. Using compatibility `.name_repair`. This warning is displayed once every 8 hours. Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.” . V1 V2 V3 V4 V5 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . - 컬럼의 이름 확인 . colnames(A) . [1] &#34;V1&#34; &#34;V2&#34; &#34;V3&#34; &#34;V4&#34; &#34;V5&#34; . - 칼럼의 이름을 바꾸고 싶다면? . colnames(A) = c(&#39;X1&#39;,&#39;X2&#39;,&#39;X3&#39;,&#39;X4&#39;,&#39;X5&#39;) A . X1 X2 X3 X4 X5 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . select() . - 처음 3개의 칼럼과 마지막 1개의 칼럼을 선택하고 싶다면? . A %&gt;% select(1:3,5) . X1 X2 X3 X5 1 1.17767702 0.63070688 0.95756614 -0.1132809 2 2.73106894 0.79315491 -1.06746861 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.9040710 4 -0.03276446 -0.89302478 0.40289417 0.4549365 5 0.53369832 -1.73600236 0.03584857 -0.3249856 6 0.49395437 -1.03698473 0.07879276 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 1.8484595 10 -0.83919513 1.01093743 0.99035758 -0.1747314 . - 열의 이름을 통하여서도 선택할 수 있음 . A %&gt;% select(X1:X3,X5) . X1 X2 X3 X5 1 1.17767702 0.63070688 0.95756614 -0.1132809 2 2.73106894 0.79315491 -1.06746861 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.9040710 4 -0.03276446 -0.89302478 0.40289417 0.4549365 5 0.53369832 -1.73600236 0.03584857 -0.3249856 6 0.49395437 -1.03698473 0.07879276 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 1.8484595 10 -0.83919513 1.01093743 0.99035758 -0.1747314 . - 열의 이름과 위치인덱스를 혼합하여 사용할 수 있음 . A %&gt;% select(X1:X3, 5) . X1 X2 X3 X5 1 1.17767702 0.63070688 0.95756614 -0.1132809 2 2.73106894 0.79315491 -1.06746861 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.9040710 4 -0.03276446 -0.89302478 0.40289417 0.4549365 5 0.53369832 -1.73600236 0.03584857 -0.3249856 6 0.49395437 -1.03698473 0.07879276 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 1.8484595 10 -0.83919513 1.01093743 0.99035758 -0.1747314 . - 열의 이름과 위치인덱스를 혼합하여 사용할 수 있음 (2) . A %&gt;% select(1:3, X5) . X1 X2 X3 X5 1 1.17767702 0.63070688 0.95756614 -0.1132809 2 2.73106894 0.79315491 -1.06746861 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.9040710 4 -0.03276446 -0.89302478 0.40289417 0.4549365 5 0.53369832 -1.73600236 0.03584857 -0.3249856 6 0.49395437 -1.03698473 0.07879276 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 1.8484595 10 -0.83919513 1.01093743 0.99035758 -0.1747314 . - 선택한 결과를 다른 변수에 저장가능 . A %&gt;% select(1:3, X5) -&gt; B B . X1 X2 X3 X5 1 1.17767702 0.63070688 0.95756614 -0.1132809 2 2.73106894 0.79315491 -1.06746861 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.9040710 4 -0.03276446 -0.89302478 0.40289417 0.4549365 5 0.53369832 -1.73600236 0.03584857 -0.3249856 6 0.49395437 -1.03698473 0.07879276 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 1.8484595 10 -0.83919513 1.01093743 0.99035758 -0.1747314 . select(-c()) . - A라는 자료를 다시 살펴보자. . A . X1 X2 X3 X4 X5 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . - 특정열을 제외하고 선택 . A %&gt;% select(-(X1:X3)) . X4 X5 1 -0.30129979 -0.1132809 2 0.63455394 -0.6277589 3 0.59275899 0.9040710 4 -0.02683564 0.4549365 5 0.36659406 -0.3249856 6 -0.39990796 0.1117328 7 0.03857880 -0.1888670 8 -0.94117668 -0.3054000 9 -0.52508619 1.8484595 10 0.68735157 -0.1747314 . A %&gt;% select(-(1:3)) . X4 X5 1 -0.30129979 -0.1132809 2 0.63455394 -0.6277589 3 0.59275899 0.9040710 4 -0.02683564 0.4549365 5 0.36659406 -0.3249856 6 -0.39990796 0.1117328 7 0.03857880 -0.1888670 8 -0.94117668 -0.3054000 9 -0.52508619 1.8484595 10 0.68735157 -0.1747314 . select(...,start_with()) . - 데이터 확인 . A . X1 X2 X3 X4 X5 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . - 열의 이름 확인 및 변경 . colnames(A) . [1] &#34;X1&#34; &#34;X2&#34; &#34;X3&#34; &#34;X4&#34; &#34;X5&#34; . colnames(A)= c(&#39;XY1&#39;,&#39;XY2&#39;,&#39;XZ1&#39;,&#39;XZ2&#39;,&#39;X5&#39;) . A . XY1 XY2 XZ1 XZ2 X5 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . - XY로 시작하는 열을 선택 . A %&gt;% select(starts_with(&#39;XY&#39;)) . XY1 XY2 1 1.17767702 0.63070688 2 2.73106894 0.79315491 3 -1.35304458 -0.88411918 4 -0.03276446 -0.89302478 5 0.53369832 -1.73600236 6 0.49395437 -1.03698473 7 -0.57098744 -0.01582456 8 0.08639052 0.96717754 9 0.13038589 -0.22076719 10 -0.83919513 1.01093743 . select(...,ends_with()) . - 데이터확인 . A . XY1 XY2 XZ1 XZ2 X5 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . - 2로 끝나는 열을 선택 . A %&gt;% select(ends_with(&#39;2&#39;)) . XY2 XZ2 1 0.63070688 -0.30129979 2 0.79315491 0.63455394 3 -0.88411918 0.59275899 4 -0.89302478 -0.02683564 5 -1.73600236 0.36659406 6 -1.03698473 -0.39990796 7 -0.01582456 0.03857880 8 0.96717754 -0.94117668 9 -0.22076719 -0.52508619 10 1.01093743 0.68735157 . select(...,contains()) . - 데이터확인 . A . XY1 XY2 XZ1 XZ2 X5 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . - Z를 포함하는 열을 선택 . A %&gt;% select(contains(&quot;Z&quot;)) . XZ1 XZ2 1 0.95756614 -0.30129979 2 -1.06746861 0.63455394 3 -0.80694017 0.59275899 4 0.40289417 -0.02683564 5 0.03584857 0.36659406 6 0.07879276 -0.39990796 7 -1.20817133 0.03857880 8 -0.67848560 -0.94117668 9 -0.99625585 -0.52508619 10 0.99035758 0.68735157 . select(...,everything()) . - 데이터확인 . A . XY1 XY2 XZ1 XZ2 X5 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . - Z를 포함하는 열을 앞으로 이동시킴 . A %&gt;% select(contains(&quot;Z&quot;),everything()) . XZ1 XZ2 XY1 XY2 X5 1 0.95756614 -0.30129979 1.17767702 0.63070688 -0.1132809 2 -1.06746861 0.63455394 2.73106894 0.79315491 -0.6277589 3 -0.80694017 0.59275899 -1.35304458 -0.88411918 0.9040710 4 0.40289417 -0.02683564 -0.03276446 -0.89302478 0.4549365 5 0.03584857 0.36659406 0.53369832 -1.73600236 -0.3249856 6 0.07879276 -0.39990796 0.49395437 -1.03698473 0.1117328 7 -1.20817133 0.03857880 -0.57098744 -0.01582456 -0.1888670 8 -0.67848560 -0.94117668 0.08639052 0.96717754 -0.3054000 9 -0.99625585 -0.52508619 0.13038589 -0.22076719 1.8484595 10 0.99035758 0.68735157 -0.83919513 1.01093743 -0.1747314 . filter() . - 데이터확인 . A . XY1 XY2 XZ1 XZ2 X5 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . - X5&gt;0인 행들만 뽑고싶다. . A %&gt;% filter(X5&gt;0) . XY1 XY2 XZ1 XZ2 X5 1 -1.35304458 -0.8841192 -0.80694017 0.59275899 0.9040710 2 -0.03276446 -0.8930248 0.40289417 -0.02683564 0.4549365 3 0.49395437 -1.0369847 0.07879276 -0.39990796 0.1117328 4 0.13038589 -0.2207672 -0.99625585 -0.52508619 1.8484595 . - X5&gt;0 이고 XY2&gt;0 인 행들만 뽑고싶다. . A %&gt;% filter(X5&gt;0 &amp; XY2&gt;0) . XY1 XY2 XZ1 XZ2 X5 . - 위의 결과에서 XZ를 포함하는 열을 뽑고싶다. . A %&gt;% filter(X5&gt;0 &amp; XY2&gt;0) %&gt;% select(contains(&quot;XZ&quot;)) . XZ1 XZ2 . mutate() . - 데이터를 확인 . A . XY1 XY2 XZ1 XZ2 X5 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 . - 새로운 변수추가 . A %&gt;% mutate(X6=abs(X5)) . XY1 XY2 XZ1 XZ2 X5 X6 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 0.1747314 . - 여러개의 새로운 변수를 추가하는 기능도 있음 . A %&gt;% mutate(X6=abs(X5),Z7=X5**2) . XY1 XY2 XZ1 XZ2 X5 X6 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 0.1747314 Z7 1 0.01283257 2 0.39408125 3 0.81734435 4 0.20696721 5 0.10561567 6 0.01248422 7 0.03567076 8 0.09326918 9 3.41680236 10 0.03053106 . - 표준화 . A %&gt;% mutate(X6=abs(X5),Z7=X5**2,Z8=(Z7-mean(Z7))/sd(Z7)) . XY1 XY2 XZ1 XZ2 X5 X6 1 1.17767702 0.63070688 0.95756614 -0.30129979 -0.1132809 0.1132809 2 2.73106894 0.79315491 -1.06746861 0.63455394 -0.6277589 0.6277589 3 -1.35304458 -0.88411918 -0.80694017 0.59275899 0.9040710 0.9040710 4 -0.03276446 -0.89302478 0.40289417 -0.02683564 0.4549365 0.4549365 5 0.53369832 -1.73600236 0.03584857 0.36659406 -0.3249856 0.3249856 6 0.49395437 -1.03698473 0.07879276 -0.39990796 0.1117328 0.1117328 7 -0.57098744 -0.01582456 -1.20817133 0.03857880 -0.1888670 0.1888670 8 0.08639052 0.96717754 -0.67848560 -0.94117668 -0.3054000 0.3054000 9 0.13038589 -0.22076719 -0.99625585 -0.52508619 1.8484595 1.8484595 10 -0.83919513 1.01093743 0.99035758 0.68735157 -0.1747314 0.1747314 Z7 Z8 1 0.01283257 -0.4756090 2 0.39408125 -0.1127605 3 0.81734435 0.2900747 4 0.20696721 -0.2908439 5 0.10561567 -0.3873039 6 0.01248422 -0.4759406 7 0.03567076 -0.4538731 8 0.09326918 -0.3990545 9 3.41680236 2.7640755 10 0.03053106 -0.4587647 . group_by() . sex = c(&quot;M&quot;,&quot;M&quot;,&quot;M&quot;,&quot;F&quot;,&quot;F&quot;,&quot;F&quot;,&quot;F&quot;) value = c(1,2,3,10,20,30,40) . df = tibble(sex,value) df . sex value 1 M 1 2 M 2 3 M 3 4 F 10 5 F 20 6 F 30 7 F 40 . df %&gt;% group_by(sex) %&gt;% summarise(mean_value=mean(value)) . sex mean_value 1 F 25 2 M 2 . 그룹별로 묶은 다음에 평균을 계산함 | . - 신기한데? 다른것도 실습해보자. . df %&gt;% group_by(sex) %&gt;% summarise(sqrt_value=sqrt(value)) . `summarise()` has grouped output by &#39;sex&#39;. You can override using the `.groups` argument. . sex sqrt_value 1 F 3.162278 2 F 4.472136 3 F 5.477226 4 F 6.324555 5 M 1.000000 6 M 1.414214 7 M 1.732051 . 의도한 결과는 아님. 이렇게 쓰는건 아니에요! | . - 아래를 수행한 꼴임 . df %&gt;% mutate(sqrt_value=sqrt(value)) . sex value sqrt_value 1 M 1 1.000000 2 M 2 1.414214 3 M 3 1.732051 4 F 10 3.162278 5 F 20 4.472136 6 F 30 5.477226 7 F 40 6.324555 . - summarise에 쓸수 있는 함수꼴은 평균과 같이 $n$개의 벡터가 입력으로 올때 하나의 스칼라출력을 주는 함수모양이어야함 . - 예를들면 아래는 가능 . df %&gt;% group_by(sex) %&gt;% summarise(mean_sqrt_value=mean(sqrt(value))) . sex mean_sqrt_value 1 F 4.859049 2 M 1.382088 . (sqrt(1)+sqrt(2)+sqrt(3))/3 . [1] 1.382088 . (sqrt(10)+sqrt(20)+sqrt(30)+sqrt(40))/4 . [1] 4.859049 . - group_by + mutate . df %&gt;% group_by(sex) %&gt;% mutate(value2= value-mean(value)) . sex value value2 1 M 1 -1 2 M 2 0 3 M 3 1 4 F 10 -15 5 F 20 -5 6 F 30 5 7 F 40 15 . - 위의 코드는 아래와 동일하다. . df %&gt;% filter(sex==&#39;M&#39;) %&gt;% mutate(value2 = value - mean(value)) . sex value value2 1 M 1 -1 2 M 2 0 3 M 3 1 . df %&gt;% filter(sex==&#39;F&#39;) %&gt;% mutate(value2 = value - mean(value)) . sex value value2 1 F 10 -15 2 F 20 -5 3 F 30 5 4 F 40 15 . df %&gt;% filter(sex==&#39;M&#39;) %&gt;% mutate(value2 = value - mean(value)) -&gt; A1 df %&gt;% filter(sex==&#39;F&#39;) %&gt;% mutate(value2 = value - mean(value)) -&gt; A2 . A1 . sex value value2 1 M 1 -1 2 M 2 0 3 M 3 1 . A2 . sex value value2 1 F 10 -15 2 F 20 -5 3 F 30 5 4 F 40 15 . - 두 데이터프레임을 합치면 된다. (어떻게..??) . rbind(A1,A2) # 아 몰라.. 매트릭스처럼 하면 되지 않을까? . sex value value2 1 M 1 -1 2 M 2 0 3 M 3 1 4 F 10 -15 5 F 20 -5 6 F 30 5 7 F 40 15 . 된다... (떡밥) | . NA . - NA 포함되어도 개별연산은 괜찮아요 . x = c(1,2,NA,4,5) x . [1] 1 2 NA 4 5 . x+1 . [1] 2 3 NA 5 6 . x**2 . [1] 1 4 NA 16 25 . - 그런데 summarise에 쓸 연산은 망가져요 . mean(x) . [1] NA . max(x) . [1] NA . - 수정을 위해서 . mean(x,na.rm=TRUE) . [1] 3 . max(x,na.rm=TRUE) . [1] 5 . - 데이터프레임에서도 비슷합니다. . tibble(x) %&gt;% mutate(z=x+1) . x z 1 1 2 2 2 3 3 NA NA 4 4 5 5 5 6 . tibble(x) %&gt;% summarise(z=mean(x)) . z 1 NA . tibble(x) %&gt;% summarise(z=mean(x,na.rm=TRUE)) . z 1 3 . - NA를 무조건 없애는것이 좋은가? . x&lt;- c(1,2,NA,4) y&lt;- c(1,NA,3,4) z&lt;- c(NA,2,3,4) w&lt;- c(1,2,3,NA) . tibble(x,y,z,w) . x y z w 1 1 1 NA 1 2 2 NA 2 2 3 NA 3 3 3 4 4 4 4 NA . tibble(x,y,z,w) %&gt;% mutate(xy=x+y) . x y z w xy 1 1 1 NA 1 2 2 2 NA 2 2 NA 3 NA 3 3 3 NA 4 4 4 4 NA 8 . tibble(x,y,z,w) %&gt;% mutate(xy=x+y) %&gt;% summarise(mean_xy = mean(xy,na.rm=TRUE)) . mean_xy 1 5 . 그래도 NA를 살려두면 좋지않을까? 데이터 하나하나가 소중하니까요! | . - 결측치를 살릴까 죽일까? . x=c(1,2,3,4,NA,5,6,7) y=c(-1,-2,-3,-4,77,-5,-6,-7) . tibble(x,y) . x y 1 1 -1 2 2 -2 3 3 -3 4 4 -4 5 NA 77 6 5 -5 7 6 -6 8 7 -7 . tibble(x,y) %&gt;% filter(x&gt;3,x&lt;7) . x y 1 4 -4 2 5 -5 3 6 -6 . ?? y=77 은 죄없이 사라짐. 사실 보류로 봐야하지않나? NA는 3보다 크지 않지만 작지도 않음, 또한 7보다 크지 않지만 작지도 않음 | . - 결측치를 살리고 싶다. . tibble(x,y) %&gt;% filter(is.na(x)) . x y 1 NA 77 . tibble(x,y) %&gt;% filter(is.na(x) | (x&gt;3 &amp; x&lt;7)) . x y 1 4 -4 2 NA 77 3 5 -5 4 6 -6 . 데이터는 소중함 | . &#49892;&#49845; . library(nycflights13) . ref: https://r4ds.had.co.nz/transform.html | . df=flights df . year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time 1 2013 1 1 517 515 2 830 819 2 2013 1 1 533 529 4 850 830 3 2013 1 1 542 540 2 923 850 4 2013 1 1 544 545 -1 1004 1022 5 2013 1 1 554 600 -6 812 837 6 2013 1 1 554 558 -4 740 728 7 2013 1 1 555 600 -5 913 854 8 2013 1 1 557 600 -3 709 723 9 2013 1 1 557 600 -3 838 846 10 2013 1 1 558 600 -2 753 745 arr_delay carrier flight tailnum origin dest air_time distance hour 1 11 UA 1545 N14228 EWR IAH 227 1400 5 2 20 UA 1714 N24211 LGA IAH 227 1416 5 3 33 AA 1141 N619AA JFK MIA 160 1089 5 4 -18 B6 725 N804JB JFK BQN 183 1576 5 5 -25 DL 461 N668DN LGA ATL 116 762 6 6 12 UA 1696 N39463 EWR ORD 150 719 5 7 19 B6 507 N516JB EWR FLL 158 1065 6 8 -14 EV 5708 N829AS LGA IAD 53 229 6 9 -8 B6 79 N593JB JFK MCO 140 944 6 10 8 AA 301 N3ALAA LGA ORD 138 733 6 minute time_hour 1 15 2013-01-01 05:00:00 2 29 2013-01-01 05:00:00 3 40 2013-01-01 05:00:00 4 45 2013-01-01 05:00:00 5 0 2013-01-01 06:00:00 6 58 2013-01-01 05:00:00 7 0 2013-01-01 06:00:00 8 0 2013-01-01 06:00:00 9 0 2013-01-01 06:00:00 10 0 2013-01-01 06:00:00 [ reached getOption(&#34;max.print&#34;) -- omitted 51 rows ] . - 1월1일의 모든 항공편을 선택하고싶다. . df %&gt;% filter(month==1 &amp; day==1) . year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time 1 2013 1 1 517 515 2 830 819 2 2013 1 1 533 529 4 850 830 3 2013 1 1 542 540 2 923 850 4 2013 1 1 544 545 -1 1004 1022 5 2013 1 1 554 600 -6 812 837 6 2013 1 1 554 558 -4 740 728 7 2013 1 1 555 600 -5 913 854 8 2013 1 1 557 600 -3 709 723 9 2013 1 1 557 600 -3 838 846 10 2013 1 1 558 600 -2 753 745 arr_delay carrier flight tailnum origin dest air_time distance hour minute 1 11 UA 1545 N14228 EWR IAH 227 1400 5 15 2 20 UA 1714 N24211 LGA IAH 227 1416 5 29 3 33 AA 1141 N619AA JFK MIA 160 1089 5 40 4 -18 B6 725 N804JB JFK BQN 183 1576 5 45 5 -25 DL 461 N668DN LGA ATL 116 762 6 0 6 12 UA 1696 N39463 EWR ORD 150 719 5 58 7 19 B6 507 N516JB EWR FLL 158 1065 6 0 8 -14 EV 5708 N829AS LGA IAD 53 229 6 0 9 -8 B6 79 N593JB JFK MCO 140 944 6 0 10 8 AA 301 N3ALAA LGA ORD 138 733 6 0 time_hour 1 2013-01-01 05:00:00 2 2013-01-01 05:00:00 3 2013-01-01 05:00:00 4 2013-01-01 05:00:00 5 2013-01-01 06:00:00 6 2013-01-01 05:00:00 7 2013-01-01 06:00:00 8 2013-01-01 06:00:00 9 2013-01-01 06:00:00 10 2013-01-01 06:00:00 [ reached getOption(&#34;max.print&#34;) -- omitted 51 rows ] . df %&gt;% filter(month==1 , day==1) . year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time 1 2013 1 1 517 515 2 830 819 2 2013 1 1 533 529 4 850 830 3 2013 1 1 542 540 2 923 850 4 2013 1 1 544 545 -1 1004 1022 5 2013 1 1 554 600 -6 812 837 6 2013 1 1 554 558 -4 740 728 7 2013 1 1 555 600 -5 913 854 8 2013 1 1 557 600 -3 709 723 9 2013 1 1 557 600 -3 838 846 10 2013 1 1 558 600 -2 753 745 arr_delay carrier flight tailnum origin dest air_time distance hour minute 1 11 UA 1545 N14228 EWR IAH 227 1400 5 15 2 20 UA 1714 N24211 LGA IAH 227 1416 5 29 3 33 AA 1141 N619AA JFK MIA 160 1089 5 40 4 -18 B6 725 N804JB JFK BQN 183 1576 5 45 5 -25 DL 461 N668DN LGA ATL 116 762 6 0 6 12 UA 1696 N39463 EWR ORD 150 719 5 58 7 19 B6 507 N516JB EWR FLL 158 1065 6 0 8 -14 EV 5708 N829AS LGA IAD 53 229 6 0 9 -8 B6 79 N593JB JFK MCO 140 944 6 0 10 8 AA 301 N3ALAA LGA ORD 138 733 6 0 time_hour 1 2013-01-01 05:00:00 2 2013-01-01 05:00:00 3 2013-01-01 05:00:00 4 2013-01-01 05:00:00 5 2013-01-01 06:00:00 6 2013-01-01 05:00:00 7 2013-01-01 06:00:00 8 2013-01-01 06:00:00 9 2013-01-01 06:00:00 10 2013-01-01 06:00:00 [ reached getOption(&#34;max.print&#34;) -- omitted 51 rows ] . - 11월에 출발하거나 12월에 출발한 항공 . df %&gt;% filter(month==11 | month==12) . year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time 1 2013 11 1 5 2359 6 352 345 2 2013 11 1 35 2250 105 123 2356 3 2013 11 1 455 500 -5 641 651 4 2013 11 1 539 545 -6 856 827 5 2013 11 1 542 545 -3 831 855 6 2013 11 1 549 600 -11 912 923 7 2013 11 1 550 600 -10 705 659 8 2013 11 1 554 600 -6 659 701 9 2013 11 1 554 600 -6 826 827 10 2013 11 1 554 600 -6 749 751 arr_delay carrier flight tailnum origin dest air_time distance hour 1 7 B6 745 N568JB JFK PSE 205 1617 23 2 87 B6 1816 N353JB JFK SYR 36 209 22 3 -10 US 1895 N192UW EWR CLT 88 529 5 4 29 UA 1714 N38727 LGA IAH 229 1416 5 5 -24 AA 2243 N5CLAA JFK MIA 147 1089 5 6 -11 UA 303 N595UA JFK SFO 359 2586 6 7 6 US 2167 N748UW LGA DCA 57 214 6 8 -2 US 2134 N742PS LGA BOS 40 184 6 9 -1 DL 563 N912DE LGA ATL 126 762 6 10 -2 DL 731 N315NB LGA DTW 93 502 6 minute time_hour 1 59 2013-11-01 23:00:00 2 50 2013-11-01 22:00:00 3 0 2013-11-01 05:00:00 4 45 2013-11-01 05:00:00 5 45 2013-11-01 05:00:00 6 0 2013-11-01 06:00:00 7 0 2013-11-01 06:00:00 8 0 2013-11-01 06:00:00 9 0 2013-11-01 06:00:00 10 0 2013-11-01 06:00:00 [ reached getOption(&#34;max.print&#34;) -- omitted 51 rows ] . - 아래와 동일한 코드 . df %&gt;% filter(month %in% c(11,12)) . year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time 1 2013 11 1 5 2359 6 352 345 2 2013 11 1 35 2250 105 123 2356 3 2013 11 1 455 500 -5 641 651 4 2013 11 1 539 545 -6 856 827 5 2013 11 1 542 545 -3 831 855 6 2013 11 1 549 600 -11 912 923 7 2013 11 1 550 600 -10 705 659 8 2013 11 1 554 600 -6 659 701 9 2013 11 1 554 600 -6 826 827 10 2013 11 1 554 600 -6 749 751 arr_delay carrier flight tailnum origin dest air_time distance hour 1 7 B6 745 N568JB JFK PSE 205 1617 23 2 87 B6 1816 N353JB JFK SYR 36 209 22 3 -10 US 1895 N192UW EWR CLT 88 529 5 4 29 UA 1714 N38727 LGA IAH 229 1416 5 5 -24 AA 2243 N5CLAA JFK MIA 147 1089 5 6 -11 UA 303 N595UA JFK SFO 359 2586 6 7 6 US 2167 N748UW LGA DCA 57 214 6 8 -2 US 2134 N742PS LGA BOS 40 184 6 9 -1 DL 563 N912DE LGA ATL 126 762 6 10 -2 DL 731 N315NB LGA DTW 93 502 6 minute time_hour 1 59 2013-11-01 23:00:00 2 50 2013-11-01 22:00:00 3 0 2013-11-01 05:00:00 4 45 2013-11-01 05:00:00 5 45 2013-11-01 05:00:00 6 0 2013-11-01 06:00:00 7 0 2013-11-01 06:00:00 8 0 2013-11-01 06:00:00 9 0 2013-11-01 06:00:00 10 0 2013-11-01 06:00:00 [ reached getOption(&#34;max.print&#34;) -- omitted 51 rows ] . - arr_delay &lt;=120 이고 dep_delay &lt;=120 인 항공편을 찾고 싶다. . df %&gt;% filter(arr_delay &lt;= 120, dep_delay&lt;=120) . year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time 1 2013 1 1 517 515 2 830 819 2 2013 1 1 533 529 4 850 830 3 2013 1 1 542 540 2 923 850 4 2013 1 1 544 545 -1 1004 1022 5 2013 1 1 554 600 -6 812 837 6 2013 1 1 554 558 -4 740 728 7 2013 1 1 555 600 -5 913 854 8 2013 1 1 557 600 -3 709 723 9 2013 1 1 557 600 -3 838 846 10 2013 1 1 558 600 -2 753 745 arr_delay carrier flight tailnum origin dest air_time distance hour 1 11 UA 1545 N14228 EWR IAH 227 1400 5 2 20 UA 1714 N24211 LGA IAH 227 1416 5 3 33 AA 1141 N619AA JFK MIA 160 1089 5 4 -18 B6 725 N804JB JFK BQN 183 1576 5 5 -25 DL 461 N668DN LGA ATL 116 762 6 6 12 UA 1696 N39463 EWR ORD 150 719 5 7 19 B6 507 N516JB EWR FLL 158 1065 6 8 -14 EV 5708 N829AS LGA IAD 53 229 6 9 -8 B6 79 N593JB JFK MCO 140 944 6 10 8 AA 301 N3ALAA LGA ORD 138 733 6 minute time_hour 1 15 2013-01-01 05:00:00 2 29 2013-01-01 05:00:00 3 40 2013-01-01 05:00:00 4 45 2013-01-01 05:00:00 5 0 2013-01-01 06:00:00 6 58 2013-01-01 05:00:00 7 0 2013-01-01 06:00:00 8 0 2013-01-01 06:00:00 9 0 2013-01-01 06:00:00 10 0 2013-01-01 06:00:00 [ reached getOption(&#34;max.print&#34;) -- omitted 51 rows ] . df %&gt;% filter(arr_delay &lt;= 120 &amp; dep_delay&lt;=120) . year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time 1 2013 1 1 517 515 2 830 819 2 2013 1 1 533 529 4 850 830 3 2013 1 1 542 540 2 923 850 4 2013 1 1 544 545 -1 1004 1022 5 2013 1 1 554 600 -6 812 837 6 2013 1 1 554 558 -4 740 728 7 2013 1 1 555 600 -5 913 854 8 2013 1 1 557 600 -3 709 723 9 2013 1 1 557 600 -3 838 846 10 2013 1 1 558 600 -2 753 745 arr_delay carrier flight tailnum origin dest air_time distance hour 1 11 UA 1545 N14228 EWR IAH 227 1400 5 2 20 UA 1714 N24211 LGA IAH 227 1416 5 3 33 AA 1141 N619AA JFK MIA 160 1089 5 4 -18 B6 725 N804JB JFK BQN 183 1576 5 5 -25 DL 461 N668DN LGA ATL 116 762 6 6 12 UA 1696 N39463 EWR ORD 150 719 5 7 19 B6 507 N516JB EWR FLL 158 1065 6 8 -14 EV 5708 N829AS LGA IAD 53 229 6 9 -8 B6 79 N593JB JFK MCO 140 944 6 10 8 AA 301 N3ALAA LGA ORD 138 733 6 minute time_hour 1 15 2013-01-01 05:00:00 2 29 2013-01-01 05:00:00 3 40 2013-01-01 05:00:00 4 45 2013-01-01 05:00:00 5 0 2013-01-01 06:00:00 6 58 2013-01-01 05:00:00 7 0 2013-01-01 06:00:00 8 0 2013-01-01 06:00:00 9 0 2013-01-01 06:00:00 10 0 2013-01-01 06:00:00 [ reached getOption(&#34;max.print&#34;) -- omitted 51 rows ] . df %&gt;% filter(!(arr_delay &gt; 120 | dep_delay&gt; 120)) . year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time 1 2013 1 1 517 515 2 830 819 2 2013 1 1 533 529 4 850 830 3 2013 1 1 542 540 2 923 850 4 2013 1 1 544 545 -1 1004 1022 5 2013 1 1 554 600 -6 812 837 6 2013 1 1 554 558 -4 740 728 7 2013 1 1 555 600 -5 913 854 8 2013 1 1 557 600 -3 709 723 9 2013 1 1 557 600 -3 838 846 10 2013 1 1 558 600 -2 753 745 arr_delay carrier flight tailnum origin dest air_time distance hour 1 11 UA 1545 N14228 EWR IAH 227 1400 5 2 20 UA 1714 N24211 LGA IAH 227 1416 5 3 33 AA 1141 N619AA JFK MIA 160 1089 5 4 -18 B6 725 N804JB JFK BQN 183 1576 5 5 -25 DL 461 N668DN LGA ATL 116 762 6 6 12 UA 1696 N39463 EWR ORD 150 719 5 7 19 B6 507 N516JB EWR FLL 158 1065 6 8 -14 EV 5708 N829AS LGA IAD 53 229 6 9 -8 B6 79 N593JB JFK MCO 140 944 6 10 8 AA 301 N3ALAA LGA ORD 138 733 6 minute time_hour 1 15 2013-01-01 05:00:00 2 29 2013-01-01 05:00:00 3 40 2013-01-01 05:00:00 4 45 2013-01-01 05:00:00 5 0 2013-01-01 06:00:00 6 58 2013-01-01 05:00:00 7 0 2013-01-01 06:00:00 8 0 2013-01-01 06:00:00 9 0 2013-01-01 06:00:00 10 0 2013-01-01 06:00:00 [ reached getOption(&#34;max.print&#34;) -- omitted 51 rows ] . - 변수이름을 확인하자. . df %&gt;% colnames . [1] &#34;year&#34; &#34;month&#34; &#34;day&#34; &#34;dep_time&#34; [5] &#34;sched_dep_time&#34; &#34;dep_delay&#34; &#34;arr_time&#34; &#34;sched_arr_time&#34; [9] &#34;arr_delay&#34; &#34;carrier&#34; &#34;flight&#34; &#34;tailnum&#34; [13] &#34;origin&#34; &#34;dest&#34; &#34;air_time&#34; &#34;distance&#34; [17] &#34;hour&#34; &#34;minute&#34; &#34;time_hour&#34; . df %&gt;% names . [1] &#34;year&#34; &#34;month&#34; &#34;day&#34; &#34;dep_time&#34; [5] &#34;sched_dep_time&#34; &#34;dep_delay&#34; &#34;arr_time&#34; &#34;sched_arr_time&#34; [9] &#34;arr_delay&#34; &#34;carrier&#34; &#34;flight&#34; &#34;tailnum&#34; [13] &#34;origin&#34; &#34;dest&#34; &#34;air_time&#34; &#34;distance&#34; [17] &#34;hour&#34; &#34;minute&#34; &#34;time_hour&#34; . 왜 방법이 두개있을까? (떡밥) | . - 변수가 너무 많아서 귀찮음. 몇개만 추리자. . year~day 는 포함 | delay로 끝나는 변수들 | distance, air_time | . df %&gt;% select(year:day, ends_with(&#39;delay&#39;), distance, air_time) . year month day dep_delay arr_delay distance air_time 1 2013 1 1 2 11 1400 227 2 2013 1 1 4 20 1416 227 3 2013 1 1 2 33 1089 160 4 2013 1 1 -1 -18 1576 183 5 2013 1 1 -6 -25 762 116 6 2013 1 1 -4 12 719 150 7 2013 1 1 -5 19 1065 158 8 2013 1 1 -3 -14 229 53 9 2013 1 1 -3 -8 944 140 10 2013 1 1 -2 8 733 138 11 2013 1 1 -2 -2 1028 149 12 2013 1 1 -2 -3 1005 158 13 2013 1 1 -2 7 2475 345 14 2013 1 1 -2 -14 2565 361 15 2013 1 1 -1 31 1389 257 16 2013 1 1 0 -4 187 44 17 2013 1 1 -1 -8 2227 337 18 2013 1 1 0 -7 1076 152 19 2013 1 1 0 12 762 134 20 2013 1 1 1 -6 1023 147 21 2013 1 1 -8 -8 1020 170 22 2013 1 1 -3 16 502 105 23 2013 1 1 -4 -12 1085 152 24 2013 1 1 -4 -8 760 128 25 2013 1 1 0 -17 1085 157 26 2013 1 1 8 32 719 139 27 2013 1 1 11 14 2586 366 28 2013 1 1 3 4 1074 175 [ reached getOption(&#34;max.print&#34;) -- omitted 33 rows ] . - 아래의 수식을 이용해서 gain, speed를 계산하자. . gain = dep_delay - arr_delay | speed = distance / air_time | . df %&gt;% select(year:day, ends_with(&#39;delay&#39;), distance, air_time) %&gt;% mutate(gain = dep_delay - arr_delay, speed = distance / air_time) . year month day dep_delay arr_delay distance air_time gain speed 1 2013 1 1 2 11 1400 227 -9 6.167401 2 2013 1 1 4 20 1416 227 -16 6.237885 3 2013 1 1 2 33 1089 160 -31 6.806250 4 2013 1 1 -1 -18 1576 183 17 8.612022 5 2013 1 1 -6 -25 762 116 19 6.568966 6 2013 1 1 -4 12 719 150 -16 4.793333 7 2013 1 1 -5 19 1065 158 -24 6.740506 8 2013 1 1 -3 -14 229 53 11 4.320755 9 2013 1 1 -3 -8 944 140 5 6.742857 10 2013 1 1 -2 8 733 138 -10 5.311594 11 2013 1 1 -2 -2 1028 149 0 6.899329 12 2013 1 1 -2 -3 1005 158 1 6.360759 13 2013 1 1 -2 7 2475 345 -9 7.173913 14 2013 1 1 -2 -14 2565 361 12 7.105263 15 2013 1 1 -1 31 1389 257 -32 5.404669 16 2013 1 1 0 -4 187 44 4 4.250000 17 2013 1 1 -1 -8 2227 337 7 6.608309 18 2013 1 1 0 -7 1076 152 7 7.078947 19 2013 1 1 0 12 762 134 -12 5.686567 20 2013 1 1 1 -6 1023 147 7 6.959184 21 2013 1 1 -8 -8 1020 170 0 6.000000 22 2013 1 1 -3 16 502 105 -19 4.780952 [ reached getOption(&#34;max.print&#34;) -- omitted 39 rows ] . - year, month, day 로 그룹핑을하고 평균속도와 평균gain을 계산해보자. . df %&gt;% select(year:day, ends_with(&#39;delay&#39;), distance, air_time) %&gt;% mutate(gain = dep_delay - arr_delay, speed = distance / air_time) %&gt;% group_by(year,month,day) %&gt;% summarise(gain_mean=mean(gain),speed_mean=mean(speed)) . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . year month day gain_mean speed_mean 1 2013 1 1 NA NA 2 2013 1 2 NA NA 3 2013 1 3 NA NA 4 2013 1 4 NA NA 5 2013 1 5 NA NA 6 2013 1 6 NA NA 7 2013 1 7 NA NA 8 2013 1 8 NA NA 9 2013 1 9 NA NA 10 2013 1 10 NA NA 11 2013 1 11 NA NA 12 2013 1 12 NA NA 13 2013 1 13 NA NA 14 2013 1 14 NA NA 15 2013 1 15 NA NA 16 2013 1 16 NA NA 17 2013 1 17 NA NA 18 2013 1 18 NA NA 19 2013 1 19 NA NA 20 2013 1 20 NA NA 21 2013 1 21 NA NA 22 2013 1 22 NA NA 23 2013 1 23 NA NA 24 2013 1 24 NA NA 25 2013 1 25 NA NA 26 2013 1 26 NA NA 27 2013 1 27 NA NA 28 2013 1 28 NA NA 29 2013 1 29 NA NA 30 2013 1 30 NA NA ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ 336 2013 12 2 NA NA 337 2013 12 3 NA NA 338 2013 12 4 NA NA 339 2013 12 5 NA NA 340 2013 12 6 NA NA 341 2013 12 7 NA NA 342 2013 12 8 NA NA 343 2013 12 9 NA NA 344 2013 12 10 NA NA [ reached getOption(&#34;max.print&#34;) -- omitted 21 rows ] . 다 NA가 나옴.. | . df %&gt;% select(year:day, ends_with(&#39;delay&#39;), distance, air_time) %&gt;% mutate(gain = dep_delay - arr_delay, speed = distance / air_time) %&gt;% group_by(year,month,day) %&gt;% summarise(gain_mean=mean(gain,na.rm=TRUE),speed_mean=mean(speed,na.rm=TRUE)) . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . year month day gain_mean speed_mean 1 2013 1 1 -1.2154031 5.956879 2 2013 1 2 0.9849138 6.085977 3 2013 1 3 5.1744444 6.163061 4 2013 1 4 10.8986784 6.389652 5 2013 1 5 7.2580195 6.259174 6 2013 1 6 2.9095296 6.146544 7 2013 1 7 10.3645161 6.488469 8 2013 1 8 5.7858744 6.215331 9 2013 1 9 2.5655095 6.021767 10 2013 1 10 8.7438105 6.375353 11 2013 1 11 7.5954198 6.326487 12 2013 1 12 14.6093979 6.613691 13 2013 1 13 4.6877323 6.353392 14 2013 1 14 -0.8418202 6.018617 15 2013 1 15 -0.3019296 5.918271 16 2013 1 16 -9.7924971 5.819344 17 2013 1 17 1.1923497 5.923112 18 2013 1 18 4.9263736 6.207338 19 2013 1 19 11.8882265 6.340853 20 2013 1 20 3.0640205 6.098927 21 2013 1 21 1.5232816 5.911828 22 2013 1 22 0.2225989 5.966793 23 2013 1 23 3.6925676 6.081496 24 2013 1 24 4.1156388 6.305144 25 2013 1 25 -5.3469852 6.177677 26 2013 1 26 6.4619970 6.342779 27 2013 1 27 9.6972705 6.371808 28 2013 1 28 5.7794632 6.288730 29 2013 1 29 9.1047181 6.297918 30 2013 1 30 2.0226131 6.072084 ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ 336 2013 12 2 8.6172345 6.538165 337 2013 12 3 3.7637306 6.385837 338 2013 12 4 5.5354497 6.374694 339 2013 12 5 0.7886279 6.315847 340 2013 12 6 -4.9424779 6.088300 341 2013 12 7 -0.5210210 6.083830 342 2013 12 8 -16.0335404 6.015119 343 2013 12 9 -7.9688889 5.927017 344 2013 12 10 -18.0433018 5.851833 [ reached getOption(&#34;max.print&#34;) -- omitted 21 rows ] . &#49689;&#51228; . 강화유리와 유리를 구분할 수 있는 유리 장인이 있다. . 이 유리장인은 80퍼센트의 확률로 강화유리를 고른다. . 총 10명의 참가자가 있고 이 참가자들은 (유리,강화유리)의 조합으로 이루어진 징검다리를 5번연속으로 건너야 한다. . 아래의 경우에 참가자들은 평균적으로 몇명이 살아남겠는가? . (1) 일반인1 - 일반인2 - .... - 일반인9 - 유리장인 || (강화유리, 유리) . (2) 유리장인 - 일반인1 - 일반인2 - ... - 일반인9 || (강화유리, 유리) . 1000번 시뮬레이션을 하여 결과를 추정하라. . (단, 일반인은 50%의 확률로 강화유리를 고를수 있다고 하자) . . [예시] (1)의 시뮬레이션 결과가 아래와 같다고 하자. . 첫번째 징검다리: 유리장인이 강화유리 선택 | 두번째 징검다리: 유리장인이 강화유리 선택 | 세번째 징검다리: 유리장인이 일반유리 선택 $ to$ 유리장인 탈락 &amp; 일반인9는 당연히 강화유리를 선택 | 네번째 징검다리: 일반인9가 일반유리 선택 $ to$ 일반인9 탈락 &amp; 일반인8은 당연히 강화유리 선택 | 다섯번째 징검다리: 일반인8이 강화유리 선택 | . 이 경우는 일반인8,일반인7, $ dots$, 일반인1이 살아남으므로 8명이 살아남는다. . [예시] (2)의 시뮬레이션 결과가 아래와 같다고 하자. . 첫번째 징검다리: 일반인9 일반유리 선택 $ to$ 일반인9 탈락 &amp; 일반인8은 강화유리 선택 | 두번째 징검다리: 일반인8 일반유리 선택 $ to$ 일반인8 탈락 &amp; 일반인7은 강화유리 선택 | 세번째 징검다리: 일반인7 일반유리 선택 $ to$ 일반인7 탈락 &amp; 일반인6은 강화유리 선택 | 네번째 징검다리: 일반인6 일반유리 선택 $ to$ 일반인6 탈락 &amp; 일반인5는 강화유리 선택 | 다섯번째 징검다리: 일반인5 일반유리 선택 $ to$ 일반인5 탈락 &amp; 일반인4는 강화유리 선택 | . 이 경우는 일반인4,일반인3,일반인2,일반인1,유리장인 이 살아남는다. (따라서 5명) . - 즉 살아남을수 있는 최대인원수는 10명이며 최소인원수는 5명이다. . - 유리장인이 100%의 확률로 강화유리를 구분한다면 (1)의 경우 항상 10명이 살아남는다. (즉 평균도 10명) . (1) . 10명이 전부 살아남는 경우 = $0.5^5$ | . - 9명이 살아남는 경우 . 일반인1이 1번째 탈락 = $0.5^0 times 0.5 times 0.5^4$ = $0.5^5$ | 일반인1이 2번째 탈락 = $0.5^1 times 0.5 times 0.5^3$ = $0.5^5$ | 일반인1이 3번째 탈락 = $0.5^2 times 0.5 times 0.5^2$ = $0.5^5$ | 일반인1이 4번째 탈락 = $0.5^3 times 0.5 times 0.5^1$ = $0.5^5$ | 일반인1이 5번째 탈락 = $0.5^4 times 0.5 times 0.5^0$ = $0.5^5$ | . 확률은 동일하게 $0.5^5$이므로, 경우가 중요 . - 8 명이 살아남는 결우 . 일반인1이 1번째 탈락 = $choose(4,1) times 0.5^5$ 일반인2가 2번째 탈락 | 일반인2가 3번째 탈락 | 일반인2가 4번째 탈락 | 일반인2가 5번째 탈락 | . | 일반인1이 2번째 탈락 = $choose(3,1) times 0.5^5$ 일반인2가 3번째 탈락 | 일반인2가 4번째 탈락 | 일반인2가 5번째 탈락 | . | 일반인1이 3번째 탈락 = $choose(2,1) times 0.5^5$ 일반인2가 4번째 탈락 | 일반인2가 5번째 탈락 | . | 일반인1이 4번째 탈락 = $choose(1,1) times 0.5^5$ 일반인2가 5번째 탈락 | . | . - 7명이 살아남을 확률? . 일반인1이 1번째 탈락 = $choose(4,2) times 0.5^5$ 일반인이 2,3번째 탈락 | 일반인이 2,4번째 탈락 | 일반인이 2,5번째 탈락 | 일반인이 3,4번째 탈락 | 일반인이 3,5번째 탈락 | 일반인이 4,5번째 탈락 | . | 일반인1이 2번째 탈락 = $choose(3,2) times 0.5^5$ 일반인이 3,4번째 탈락 | 일반인이 3,5번째 탈락 | 일반인이 4,5번째 탈락 | . | 일반인1이 3번째 탈락 = $choose(2,2) times 0.5^5$ 일반인이 4,5번째 탈락 | . | . - 6명이 살아남을 확률? . 일반인1이 1번째 탈락 = $choose(4,3) times 0.5^5$ 일반인이 2,3,4번째 탈락 | 일반인이 2,3,5번째 탈락 | 일반인이 2,4,5번째 탈락 | 일반인이 3,4,5번째 탈락 | . | 일반인1이 2번째 탈락 = $1 times 0.5^3$ 일반인이 3,4,5번째 탈락 | . | . - 5명이 살아남을 확률? $0.5^5$ . 일반인5명 연속탈락 | . surv10_prob1 = 0.5^5 . surv9_prob1 = c() for (i in 0:4) surv9_prob1[i+1] = 0.5^5 . surv8_prob1 = c() for (i in 0:3) surv8_prob1[i+1] = choose(4-i,1)*0.5^5 . surv7_prob1 = c() for (i in 0:2) surv7_prob1[i+1] = choose(4-i,2)*0.5^5 . surv6_prob1 = c() for (i in 0:1) surv6_prob1[i+1] = choose(4-i,3)*0.5^5 . surv5_prob1 = 0.5^5 . surv10_prob1*10 + sum(surv9_prob1)*9 + sum(surv8_prob1)*8 + sum(surv7_prob1)*7 + sum(surv6_prob1)*6 + surv5_prob1*5 . 7.5 (2) . 10명이 전부 살아남는 경우 = $0.8^5$ | . - 9명이 살아남는 경우 . 장인이 1번째 탈락 = $0.8^0 times 0.2 times 0.5^4$ | 장인이 2번째 탈락 = $0.8^1 times 0.2 times 0.5^3$ | 장인이 3번째 탈락 = $0.8^2 times 0.2 times 0.5^2$ | 장인이 4번째 탈락 = $0.8^3 times 0.2 times 0.5^1$ | 장인이 5번째 탈락 = $0.8^4 times 0.2 times 0.5^0$ | . - 8 명이 살아남는 결우 . 장인이 1번째 탈락 = $choose(4,1) times 0.8^0 times 0.2 times 0.5^4$ 일반인1이 2번째 탈락 | 일반인1이 3번째 탈락 | 일반인1이 4번째 탈락 | 일반인1이 5번째 탈락 | . | 장인이 2번째 탈락 = $choose(3,1) times 0.8^1 times 0.2 times 0.5^3$ 일반인1이 3번째 탈락 | 일반인1이 4번째 탈락 | 일반인1이 5번째 탈락 | . | 장인이 3번째 탈락 = $choose(2,1) times 0.8^2 times 0.2 times 0.5^3$ 일반인1이 4번째 탈락 | 일반인1이 5번째 탈락 | . | 장인이 4번째 탈락 = $choose(1,1) times 0.8^3 times 0.2 times 0.5^2$ 일반인1이 5번째 탈락 | . | . - 7명이 살아남을 확률? . 장인이 1번째 탈락 = $choose(4,2) times 0.8^0 times 0.2 times 0.5^4$ 일반인이 2,3번째 탈락 | 일반인이 2,4번째 탈락 | 일반인이 2,5번째 탈락 | 일반인이 3,4번째 탈락 | 일반인이 3,5번째 탈락 | 일반인이 4,5번째 탈락 | . | 장인이 2번째 탈락 = $choose(3,2) times 0.8^1 times 0.2 times 0.5^3$ 일반인이 3,4번째 탈락 | 일반인이 3,5번째 탈락 | 일반인이 4,5번째 탈락 | . | 일반인1이 3번째 탈락 = $choose(2,2) times 0.8^3 times 0.2 times 0.5^2$ 일반인이 4,5번째 탈락 | . | . - 6명이 살아남을 확률? . 장인이 1번째 탈락 = $choose(4,3) times 0.8^0 times 0.2 times 0.5^4$ 일반인이 2,3,4번째 탈락 | 일반인이 2,3,5번째 탈락 | 일반인이 2,4,5번째 탈락 | 일반인이 3,4,5번째 탈락 | . | 장인이 2번째 탈락 = $1 times 0.8^1 times 0.2 times 0.5^3$ 일반인이 3,4,5번째 탈락 | . | . - 5명이 살아남을 확률? 0.8^0 times 0.2 times 0.5^4$ . 장인 + 일반인4명 연속탈락 | . surv10_prob2 = 0.8^5 . surv9_prob2 = c() for (i in 0:4) surv9_prob2[i+1] = 0.8^i*0.2*0.5^(4-i) . surv8_prob2 = c() for (i in 0:3) surv8_prob2[i+1] = choose(4-i,1)*0.8^i*0.2*0.5^(4-i) . surv7_prob2 = c() for (i in 0:2) surv7_prob2[i+1] = choose(4-i,2)*0.8^i*0.2*0.5^(4-i) . surv6_prob2 = c() for (i in 0:1) surv6_prob2[i+1] = choose(4-i,3)*0.8^i*0.2*0.5^(4-i) . surv5_prob2 = 0.2*0.5^4 . surv10_prob2*10 + sum(surv9_prob2)*9 + sum(surv8_prob2)*8 + sum(surv7_prob2)*7 + sum(surv6_prob2)*6 + surv5_prob2*5 . 8.50848",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_11_30_(12%EC%A3%BC%EC%B0%A8)_11%EC%9B%9430%EC%9D%BC,_11%EC%9B%9425%EC%9D%BC_%EB%B3%B4%EA%B0%95.html",
            "relUrl": "/2022/04/29/_11_30_(12%EC%A3%BC%EC%B0%A8)_11%EC%9B%9430%EC%9D%BC,_11%EC%9B%9425%EC%9D%BC_%EB%B3%B4%EA%B0%95.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "(11주차) 11월23일",
            "content": "library(tidyverse) . &#51669;&#44160;&#45796;&#47532;&#47928;&#51228;&#54400;&#51060; . (&#54400;&#51060;1) . - (유리, 강화유리) . set = c(&#39;tempered glass&#39;,&#39;glass&#39;) set . [1] &#34;tempered glass&#34; &#34;glass&#34; . - sample을 이용하여 0.8의 확률로 강화유리를 뽑음 . sample(size=5, set, prob=c(0.8,0.2),replace=T) . [1] &#34;tempered glass&#34; &#34;tempered glass&#34; &#34;tempered glass&#34; &#34;glass&#34; [5] &#34;tempered glass&#34; . - 함수로 보기좋게 만들자. . simulate_once = function() sample(size=5, set, prob=c(0.8,0.2),replace=T) #입력이 없는 함수 . simulate_once() . [1] &#34;glass&#34; &#34;tempered glass&#34; &#34;tempered glass&#34; &#34;tempered glass&#34; [5] &#34;tempered glass&#34; . - 뽑은결과를 바탕으로 사망유무를 판단 . a = simulate_once() a . [1] &#34;tempered glass&#34; &#34;tempered glass&#34; &#34;tempered glass&#34; &#34;glass&#34; [5] &#34;tempered glass&#34; . a[1] == &quot;tempered glass&quot; &amp; a[2] == &quot;tempered glass&quot; &amp; a[3] == &quot;tempered glass&quot; &amp; a[4] == &quot;tempered glass&quot; &amp; a[5] == &quot;tempered glass&quot; . [1] FALSE . 조건 | . - 위의 조건이 참이면 b=1, 참이 아니라면 b=0 . if (a[1] == &quot;tempered glass&quot; &amp; a[2] == &quot;tempered glass&quot; &amp; a[3] == &quot;tempered glass&quot; &amp; a[4] == &quot;tempered glass&quot; &amp; a[5] == &quot;tempered glass&quot;){ b=1 }else{ b=0} . b . [1] 0 . - 함수로 정리하자. . test = function(a){ if (a[1] == &quot;tempered glass&quot; &amp; a[2] == &quot;tempered glass&quot; &amp; a[3] == &quot;tempered glass&quot; &amp; a[4] == &quot;tempered glass&quot; &amp; a[5] == &quot;tempered glass&quot;) b=1 else b=0 b } . a=simulate_once() print(a) test(a) . [1] &#34;tempered glass&#34; &#34;tempered glass&#34; &#34;tempered glass&#34; &#34;tempered glass&#34; [5] &#34;tempered glass&#34; . [1] 1 . - 답을 구해보자 . sum_ = 0 for (i in 1:1000) sum_ = sum_ + test(simulate_once()) . sum_ . [1] 322 . (&#54400;&#51060;2) . - 시행결과를 벡터로하는 편이 좋겠다. . set = c(&#39;tempered glass&#39;,&#39;glass&#39;) simulate_once = function() sample(size=5, set, prob=c(0.8,0.2),replace=T) #입력이 없는 함수 test = function(a){ if (a[1] == &quot;tempered glass&quot; &amp; a[2] == &quot;tempered glass&quot; &amp; a[3] == &quot;tempered glass&quot; &amp; a[4] == &quot;tempered glass&quot; &amp; a[5] == &quot;tempered glass&quot;) b=1 else b=0 b } # sum_ = 0 # for (i in 1:1000) sum_ = sum_ + test(simulate_once()) 컨트롤+/ (Rstudio: 컨트롤+쉬프트+c) rslt = c() for (i in 1:1000) rslt[i] = test(simulate_once()) . rslt . [1] 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 [38] 0 0 0 1 0 0 0 1 1 0 0 1 0 1 0 0 1 0 1 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 [75] 0 1 1 1 1 0 1 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 [112] 0 0 1 0 1 0 1 0 1 0 0 0 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 [149] 1 0 0 0 0 1 0 0 1 1 1 0 0 1 1 1 0 1 0 1 0 0 1 0 1 1 0 1 0 1 0 0 1 1 1 0 0 [186] 0 1 0 0 1 0 0 1 0 0 0 0 0 1 0 [ reached getOption(&#34;max.print&#34;) -- omitted 800 entries ] . sum(rslt) . [1] 317 . (&#54400;&#51060;3) . - 시뮬레이션 결과를 매트릭스에 저장하면 더 디버깅이 용이하다. . mat = rep(0,1000*5) dim(mat) = c(1000,5) head(mat) . [,1] [,2] [,3] [,4] [,5] [1,] 0 0 0 0 0 [2,] 0 0 0 0 0 [3,] 0 0 0 0 0 [4,] 0 0 0 0 0 [5,] 0 0 0 0 0 [6,] 0 0 0 0 0 . mat[1,] . [1] 0 0 0 0 0 . mat[1,] = simulate_once() . head(mat) . [,1] [,2] [,3] [,4] [,5] [1,] glass tempered glass tempered glass tempered glass glass [2,] 0 0 0 0 0 [3,] 0 0 0 0 0 [4,] 0 0 0 0 0 [5,] 0 0 0 0 0 [6,] 0 0 0 0 0 . for (i in 1:1000) mat[i,] = simulate_once() . head(mat) . [,1] [,2] [,3] [,4] [,5] [1,] tempered glass tempered glass tempered glass tempered glass tempered glass [2,] glass tempered glass tempered glass tempered glass glass [3,] tempered glass tempered glass tempered glass tempered glass tempered glass [4,] tempered glass tempered glass tempered glass tempered glass tempered glass [5,] tempered glass tempered glass glass glass tempered glass [6,] tempered glass tempered glass tempered glass glass tempered glass . rslt=c() for (i in 1:1000) rslt[i] = test(mat[i,]) . rslt[1:5] . [1] 1 0 1 1 0 . mat[1:5,] . [,1] [,2] [,3] [,4] [,5] [1,] tempered glass tempered glass tempered glass tempered glass tempered glass [2,] glass tempered glass tempered glass tempered glass glass [3,] tempered glass tempered glass tempered glass tempered glass tempered glass [4,] tempered glass tempered glass tempered glass tempered glass tempered glass [5,] tempered glass tempered glass glass glass tempered glass . - 정리하면 . set = c(&#39;tempered glass&#39;,&#39;glass&#39;) simulate_once = function() sample(size=5, set, prob=c(0.8,0.2),replace=T) #입력이 없는 함수 test = function(a){ if (a[1] == &quot;tempered glass&quot; &amp; a[2] == &quot;tempered glass&quot; &amp; a[3] == &quot;tempered glass&quot; &amp; a[4] == &quot;tempered glass&quot; &amp; a[5] == &quot;tempered glass&quot;) b=1 else b=0 b } mat = rep(0,1000*5) dim(mat) = c(1000,5) rslt = c() # for (i in 1:1000) rslt[i] = test(simulate_once()) for (i in 1:1000){ mat[i,] = simulate_once() rslt[i] = test(mat[i,]) } sum(rslt) . [1] 329 . (&#54400;&#51060;4) . - 어차피 mat 매트릭스만 만들면 되니까 . set = c(&#39;tempered glass&#39;,&#39;glass&#39;) mat= sample(size=1000*5, set, prob=c(0.8,0.2),replace=T) #입력이 없는 함수 dim(mat)=c(1000,5) . head(mat) . [,1] [,2] [,3] [,4] [,5] [1,] glass tempered glass glass tempered glass tempered glass [2,] tempered glass tempered glass glass tempered glass glass [3,] tempered glass tempered glass tempered glass glass glass [4,] tempered glass tempered glass tempered glass glass tempered glass [5,] tempered glass tempered glass tempered glass tempered glass tempered glass [6,] tempered glass tempered glass tempered glass tempered glass tempered glass . test = function(a){ if (a[1] == &quot;tempered glass&quot; &amp; a[2] == &quot;tempered glass&quot; &amp; a[3] == &quot;tempered glass&quot; &amp; a[4] == &quot;tempered glass&quot; &amp; a[5] == &quot;tempered glass&quot;) b=1 else b=0 b } rslt = c() for (i in 1:1000){ rslt[i] = test(mat[i,]) } sum(rslt) . [1] 326 . (&#54400;&#51060;5) . - 매트릭스의 원소가 꼭 문자열일 필요는 없는것 같음 . set = c(1,0) mat= sample(size=1000*5, set, prob=c(0.8,0.2),replace=T) #입력이 없는 함수 dim(mat)=c(1000,5) . head(mat) . [,1] [,2] [,3] [,4] [,5] [1,] 1 1 1 1 1 [2,] 1 0 1 1 1 [3,] 1 1 1 1 1 [4,] 0 1 1 0 1 [5,] 1 1 1 1 1 [6,] 0 1 1 1 1 . test = function(a){ if (a[1] == 1 &amp; a[2] == 1 &amp; a[3] == 1 &amp; a[4] == 1 &amp; a[5] == 1) b=1 else b=0 b } rslt = c() for (i in 1:1000){ rslt[i] = test(mat[i,]) } sum(rslt) . [1] 355 . - 조건도 아래와 같이 간소화할 수있다. . test = function(a){ if (sum(a)==5) b=1 else b=0 b } rslt = c() for (i in 1:1000){ rslt[i] = test(mat[i,]) } sum(rslt) . [1] 355 . - 아래와 같이 바꿔도 가능 . test = function(a){ if (prod(a)==1) b=1 else b=0 b } rslt = c() for (i in 1:1000){ rslt[i] = test(mat[i,]) } sum(rslt) . [1] 355 . - test함수 자체도 아래와 같이 간소화 가능 . test = function(a){ prod(c(1,0,1,1,1))==1 } . - 정리하면 . set = c(1,0) mat= sample(size=1000*5, set, prob=c(0.8,0.2),replace=T) #입력이 없는 함수 dim(mat)=c(1000,5) head(mat) . [,1] [,2] [,3] [,4] [,5] [1,] 1 1 1 1 1 [2,] 1 1 1 0 1 [3,] 0 0 1 1 1 [4,] 1 1 1 1 1 [5,] 1 0 1 0 1 [6,] 0 1 0 1 1 . test = function(a) prod(a)==1 rslt = c() for (i in 1:1000){ rslt[i] = test(mat[i,]) } sum(rslt) . [1] 334 . (&#54400;&#51060;6) . - 숫자로 만들고 보니까 베르누이로 뽑아도 괜찮을 것 같다. . rbinom(5,size=1,prob=0.8) # 하나의행 . [1] 1 1 1 1 1 . set을 만들 필요가 없음 | . mat = rbinom(1000*5,size=1,prob=0.8) dim(mat)=c(1000,5) head(mat) . [,1] [,2] [,3] [,4] [,5] [1,] 1 1 1 1 0 [2,] 1 1 1 1 1 [3,] 1 1 1 1 1 [4,] 1 1 0 1 1 [5,] 1 1 1 1 0 [6,] 1 1 1 1 1 . test = function(a) prod(a)==1 rslt = c() for (i in 1:1000){ rslt[i] = test(mat[i,]) } sum(rslt) . [1] 341 . (&#54400;&#51060;7) . - 매트릭스 옆에 결과를 붙여보자. . mat = rbinom(1000*5,size=1,prob=0.8) dim(mat)=c(1000,5) head(mat) . [,1] [,2] [,3] [,4] [,5] [1,] 1 1 1 1 1 [2,] 1 0 1 1 1 [3,] 1 1 1 0 1 [4,] 1 1 0 0 1 [5,] 1 0 0 1 0 [6,] 0 1 1 0 1 . test = function(a) prod(a)==1 rslt = c() for (i in 1:1000){ rslt[i] = test(mat[i,]) } . cbind(mat,rslt)[1:20,] . rslt [1,] 1 1 1 1 1 1 [2,] 1 0 1 1 1 0 [3,] 1 1 1 0 1 0 [4,] 1 1 0 0 1 0 [5,] 1 0 0 1 0 0 [6,] 0 1 1 0 1 0 [7,] 1 1 0 0 1 0 [8,] 0 1 1 1 1 0 [9,] 1 1 1 1 1 1 [10,] 0 1 1 0 1 0 [11,] 1 1 1 0 1 0 [12,] 0 1 1 1 0 0 [13,] 1 1 1 1 1 1 [14,] 1 1 1 0 0 0 [15,] 1 1 1 1 1 1 [16,] 1 1 1 1 1 1 [17,] 1 1 1 1 1 1 [18,] 1 1 1 1 1 1 [19,] 0 1 1 1 1 0 [20,] 0 1 1 1 0 0 . (&#54400;&#51060;8) for&#47928;&#51012; &#54616;&#45208;&#46020; &#49324;&#50857;&#54616;&#51648; &#50506;&#51008; &#54400;&#51060; . - 매트릭스의 각 row에 어떠한 함수를 반복적으로 적용하는 형태임 $ to$ apply . mat = rbinom(1000*5,size=1,prob=0.8) dim(mat)=c(1000,5) head(mat) . [,1] [,2] [,3] [,4] [,5] [1,] 0 1 1 1 1 [2,] 0 1 0 1 1 [3,] 1 1 0 1 1 [4,] 1 1 1 1 1 [5,] 0 1 1 0 0 [6,] 1 1 0 1 1 . sum(apply(mat,1,test)) . [1] 331 . apply(mat,1,test) %&gt;% sum . [1] 331 . mat %&gt;% apply(1,test) %&gt;% sum . [1] 331 . (&#54400;&#51060;9) . - 바이노미알 이용: 어차피 베르누이의 합은 바이노미알이라고 했음 . sum(rbinom(1000,size=5,p=0.8)==5) . [1] 344 . &#49689;&#51228; . 징검다리 문제 . 강화유리와 유리를 랜덤으로 찍는 참가자가 2명 있다고 하자. (따라서 강화유리를 고를 확률이 50%이다.) . (강화유리, 유리)의 징검다리가 3개 있다고 하자. (따라서 총 6개의 유리가 있고, 3번연속으로 강화유리를 고르면 2명 모두 살아남는다) . 8000번의 시뮬레이션을 하였을 경우 아래의 질문에 답하라. . (질문1) 2명 모두 살아남는 경우는 몇번인가? 약 1000번 . (질문2) 1명만 살아남는 경우는 몇번정도인가? 약 3000번 정도.. . (풀이) . 질문1: 확률이 0.5인 시행을 3번하여 3번 모두 성공하는 경우 . sum(rbinom(8000,size=3,p=0.5)==3) . 1003 질문2: 확률이 0.5인 시행을 3번하여 2번 성공하는 경우 . sum(rbinom(8000,size=3,p=0.5)==2) . 3003",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_11_23_(11%EC%A3%BC%EC%B0%A8)_11%EC%9B%9423%EC%9D%BC.html",
            "relUrl": "/2022/04/29/_11_23_(11%EC%A3%BC%EC%B0%A8)_11%EC%9B%9423%EC%9D%BC.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "(11주차) 11월18일",
            "content": "&#51221;&#51201;&#48516;&#51032; &#44228;&#49328; (2007&#45380; 9&#50900; &#54217;&#44032;&#50896;) . (문제) $ int_0^2 |x^2(x-1)| dx $ 의 값은? . (1) $ frac{3}{2}$ . (2) $2$ . (3) $ frac{5}{2}$ . (4) $3$ . (5) $ frac{7}{2}$ . (풀이) . x=seq(from=0, to=2, by=0.01) y=abs(x**2 * (x-1)) . plot(x,y,type=&#39;l&#39;) . - 아이디어: (1) 가로가 2 세로가 4인 작사각형에 임의의 점을 뿌린다. (2) 전체점의 수와 함수 아래에 위치한 점의 갯수를 센다. (3) 점의 갯수를 바탕으로 넓이를 추론한다. . xx=runif(10000) # 0~1 사이의 점을 랜덤으로 10000개 뽑음 . xx = xx*2 # 0~2사이의 값을 랜덤으로 10000개 뽑은것과 같은 효과 . yy=runif(10000)*4 # 0~4 사의의 점을 랜덤으로 10000개 뽑음 . plot(xx,yy) . 가로가 2, 세로가 4인 직사각형에 무작위로 점이 흩뿌려져 있다. . plot(xx,yy) lines(x,y,col=&#39;red&#39;,lwd=3) . 붉은선 아래의 점들이 몇개일까? . test = function(xx,yy){ yy &lt; abs(xx**2 * (xx-1)) } . print(c(xx[1],yy[1])) ## xx[1], yy[1] 의 값 = 무작위로 찍힌 값 print(abs(xx[1]**2 *(xx[1]-1))) ## xx[1]에 해당하는 붉은점의 값 test(xx[1],yy[1]) . [1] 0.830618 2.372124 [1] 0.1168611 . [1] FALSE . plot(xx,yy,col=&#39;gray&#39;) lines(x,y,col=&#39;red&#39;,lwd=3) points(xx[1],yy[1],col=&#39;blue&#39;) points(xx[1],abs(xx[1]**2 * (xx[1]-1)),col=&#39;red&#39;) . tst = c() for (i in 1:10000) tst[i] = test(xx[i],yy[i]) . head(tst) . [1] FALSE FALSE FALSE FALSE FALSE FALSE . plot(xx,yy,col=&#39;gray&#39;) lines(x,y,col=&#39;red&#39;,lwd=3) points(xx[tst],yy[tst],col=&#39;red&#39;) . 붉은점들의 갯수는? tst==TRUE인 점들의 수 . sum(tst) . [1] 1829 . 전체 10000개 중에서 1829개정도가 붉은점임. 따라서 . $$ frac{s}{8} approx frac{1829}{10000}$$ . 이므로 구하는 넓이는 대략적으로 . 1829/10000 * 8 . [1] 1.4632 . 따라서 답은 1번 3/2 이다. . - 이와 같은 방법을 몬테카를로 방법이라고 한다. . - 꽤 복잡한 함수에 대하여서도 정적분의 값을 근사적으로 계산해낼 수 있다는 장점이 있음. . (풀이2) . - 사실 그냥 아래와 같이 풀어도 된다. . sum(yy &lt; abs(xx^2 * (xx-1)) ) . [1] 1829 . &#47004;&#45924;&#48320;&#49688; . &#47004;&#45924;&#48320;&#49688;&#47484; &#49373;&#49457;&#54616;&#45716; &#48169;&#48277; . &#50696;&#51228;1: &#44512;&#46321;&#48516;&#54252; . - 목표: 구간 [0,1]에서 하나의 임의의 값을 뽑는것 (이때 구간 [0,1]에서 각 점이 뽑힐 확률은 동일) . runif(1) . [1] 0.7638336 . - 목표: 구간 [0,1]에서 10개의 값을 뽑고 싶다면? . runif(10) . [1] 0.43916197 0.58808151 0.01061738 0.57311258 0.62008149 0.79359762 [7] 0.43567517 0.06111325 0.66865770 0.98463477 . - 10000개의 값을 뽑아보고 평균이 0.5근처인지 체크해보자. . runif(10000) %&gt;% mean . [1] 0.5001962 . &#50696;&#51228;2: &#44512;&#46321;&#48516;&#54252; . - 목표: 구간 [0,2]에서 하나의 값을 임의로 뽑고 싶다. (이때 구간 [0,2]에서 각 점이 뽑힐 확률은 동일) . - 방법1 . runif(n=1,min=0,max=2) . [1] 0.7713044 . - 방법2 . runif(1)*2 . [1] 1.197119 . 왜 방법2처럼 해도되는가? $X sim U(0,1)$ 이면 $2X sim U(0,2)$ 이므로 | 이론적인 내용은 수리통계학에서 배울것임 | . - 10000개의 값을 뽑아보고 평균이 1인지 살펴보자. . runif(n=10000,min=0,max=2) %&gt;% mean . [1] 0.9979827 . (runif(10000)*2) %&gt;% mean . [1] 0.9942539 . &#50696;&#51228;3: &#48288;&#47476;&#45572;&#51060;&#48516;&#54252; ($n=1$&#51064; &#51060;&#54637;&#48516;&#54252;) . - 목표: 동전을 한번 던져서 앞면이 나오는 경우를 생성하고 싶음 (이때 동전은 공평한 동전이라 가정하자. 즉 앞면이 나올 횟수와 뒷면이 나올 횟수는 같다고 하자.) . rbinom(1,size=1,prob=0.5) . [1] 0 . 앞면이 1, 뒷면이 0이라고 생각 | . - 잘 되는것이 맞는지 한번 체크해보자. (10000개 정도의 동전을 던져서 결과를 저장하고 평균이 0.5인지 체크하자) . rbinom(10000,size=1,prob=0.5) %&gt;% mean . [1] 0.5022 . - 동전이 공평하지 않다고 하자. 예를들어 앞면이 나올 확률이 0.8이라고 생각하자. . rbinom(10000,size=1,prob=0.8) %&gt;% mean . [1] 0.8083 . &#50696;&#51228;4: &#51060;&#54637;&#48516;&#54252; . - 목표: 동전을 10회던져 앞면이 나올 총 횟수를 생성하자. . 동전을 10회던져 앞면이 나온 횟수를 $X$라고 하자. $X$를 생성하라. | . rbinom(1,size=10,prob=0.5) . [1] 3 . - 평균적으로 5가 나와야 한다. (10000번 정도 뽑아보고 관찰하자) . rbinom(10000,size=10,prob=0.5) %&gt;% mean . [1] 5.0029 . - 베르누이 분포는 이항분포의 특수한 경우이다. . - 직관적으로 생각하면 아래와 같이 이항분포를 생성해도 될 것 같다. . rbinom(10,size=1,prob=0.5) %&gt;% sum . [1] 4 . X=c() for (i in 1:10000) X[i] = rbinom(10,size=1,prob=0.5) %&gt;% sum . X . [1] 6 5 7 2 2 5 4 5 5 2 3 5 5 4 5 5 4 6 5 5 3 3 5 3 [25] 5 3 9 4 8 3 3 5 5 3 6 4 7 4 7 6 6 4 5 5 7 3 5 2 [49] 6 5 5 5 4 6 8 5 2 4 4 6 6 4 7 5 4 1 4 5 7 7 4 5 [73] 4 5 4 7 4 4 3 4 6 6 5 4 6 5 5 5 6 4 5 6 4 4 8 6 [97] 5 5 3 8 4 4 5 2 4 3 2 3 5 4 5 7 4 4 9 5 4 5 5 5 [121] 7 4 6 6 6 5 3 5 7 6 7 4 3 6 4 3 4 6 5 6 6 5 6 9 [145] 4 6 10 2 6 3 7 3 6 2 2 5 6 6 5 3 3 5 5 7 5 5 5 5 [169] 6 3 5 6 3 6 3 6 4 6 5 5 4 5 6 3 5 6 3 5 6 6 4 7 [193] 5 4 3 8 5 5 5 4 7 5 5 5 5 4 6 6 5 4 3 10 5 4 5 4 [217] 4 5 4 9 4 5 3 4 4 3 5 3 4 4 5 7 3 4 6 5 8 5 4 3 [241] 5 4 4 6 7 5 7 5 4 8 3 6 5 5 3 5 5 3 2 5 5 4 6 6 [265] 6 4 6 5 3 3 6 6 5 5 4 5 5 4 7 6 5 4 3 4 4 4 5 5 [289] 3 6 6 3 6 4 6 7 4 6 3 4 5 3 5 3 5 7 4 2 6 4 5 4 [313] 5 7 8 1 7 4 5 8 5 3 6 6 6 7 5 8 4 6 6 6 4 6 3 6 [337] 5 4 5 6 8 7 3 5 6 6 5 5 4 3 8 4 6 4 3 2 5 8 5 6 [361] 2 4 5 5 5 5 6 5 4 5 4 4 2 6 5 7 3 3 6 6 9 6 4 6 [385] 4 5 8 4 7 5 6 5 5 8 6 4 5 3 6 6 5 7 6 8 3 3 6 7 [409] 8 5 5 5 6 6 5 4 6 3 4 4 5 5 6 6 5 5 8 4 5 6 2 4 [433] 3 1 4 6 7 5 3 5 9 8 5 6 2 4 5 5 6 6 5 5 7 6 6 4 [457] 7 4 4 7 7 2 3 7 3 7 4 5 6 4 4 4 5 7 2 4 8 7 6 6 [481] 5 4 4 6 5 5 3 7 2 3 8 4 4 3 5 3 6 4 6 6 5 4 4 7 [505] 3 6 3 5 2 3 4 5 6 4 3 4 7 5 7 6 4 6 7 2 6 8 5 2 [529] 7 5 3 8 7 6 5 3 6 5 7 2 6 3 5 5 3 4 6 2 2 4 6 3 [553] 5 6 8 4 4 7 5 6 2 8 7 5 6 5 1 7 7 2 5 4 5 7 4 6 [577] 7 3 6 7 6 4 4 7 5 5 5 5 4 1 5 5 5 5 6 1 5 2 3 2 [601] 3 5 6 0 5 4 3 5 6 2 5 3 5 6 6 6 2 4 4 4 3 5 7 5 [625] 4 6 4 9 4 7 4 5 7 8 6 5 5 6 7 3 4 4 4 5 6 5 6 3 [649] 6 7 5 5 3 4 5 3 4 6 3 4 3 7 3 5 6 6 5 6 6 3 3 5 [673] 6 4 2 6 6 6 6 4 5 5 5 3 7 4 6 3 4 6 6 7 3 1 8 1 [697] 7 6 8 7 4 7 3 3 3 4 3 8 4 4 6 3 6 2 2 5 3 5 8 6 [721] 2 6 5 7 6 5 7 4 7 6 3 5 4 4 6 7 5 6 4 5 4 4 6 5 [745] 4 7 6 5 6 7 5 7 2 5 2 5 3 6 5 7 7 6 4 3 2 1 9 6 [769] 5 6 4 8 6 5 4 5 5 3 5 3 5 6 8 5 5 6 2 5 3 5 3 4 [793] 4 5 5 4 4 6 4 4 4 5 5 5 6 7 5 3 7 6 5 7 7 5 6 7 [817] 3 6 4 3 6 5 6 3 7 5 6 6 6 6 4 7 6 5 3 3 6 5 3 5 [841] 5 6 5 4 6 6 5 6 5 4 5 6 3 4 5 5 4 8 3 6 4 5 6 8 [865] 5 6 9 5 7 7 4 4 6 7 4 5 6 4 4 5 6 6 4 5 2 5 6 3 [889] 5 5 5 5 3 5 5 7 3 6 6 7 5 2 5 5 8 4 3 4 6 6 3 5 [913] 7 7 5 6 5 6 4 3 7 4 9 9 7 4 3 6 4 3 4 3 5 6 5 4 [937] 5 5 4 4 2 3 4 7 6 6 4 5 5 7 5 8 6 8 5 5 6 6 4 6 [961] 6 2 5 8 8 5 7 6 6 7 7 8 3 5 3 4 6 6 6 5 7 3 6 4 [985] 1 5 5 2 4 7 4 8 5 6 3 5 4 6 6 5 [ reached getOption(&#34;max.print&#34;) -- omitted 9000 entries ] . 직관적으로 생각하면 X는 rbinom(10000,size=10,prob=0.5) 와 같은 효과 (랜덤성 때문에 같은 값은 아님) 일 것 같은데 이는 실제로 그러하다. (좀 더 엄밀한 증명은 수리통계 시간에 배운다) | . X %&gt;% mean() . [1] 5.0216 . &#50612;&#46496;&#54620; &#51665;&#54633;&#50640;&#49436; &#49368;&#54540;&#47553; . &#50696;&#51228;5: &#48708;&#48373;&#50896;&#52628;&#52636; . - 주머니에서 빨간공 2개와 파란공 3개가 있다고 하자. . set = c(rep(&quot;red&quot;,2),rep(&quot;blue&quot;,3)) set . [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; . - 이러한 집합에서 랜덤으로 3개의 원소를 고르고 싶다면? (단, 뽑은 공은 다시 넣지 않는다) . sample(set,size=3) . [1] &#34;red&#34; &#34;blue&#34; &#34;red&#34; . - 50번정도 해보자. . for (i in 1:50) sample(set,size=3) %&gt;% print . [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; . 빨간공을 3번 뽑지는 못함 | . &#50696;&#51228;6: &#48373;&#50896;&#52628;&#52636; . - 뽑은공을 다시 넣는다고 가정한다면? . set = c(rep(&quot;red&quot;,2),rep(&quot;blue&quot;,3)) set . [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; . for (i in 1:50) sample(set, size=3,replace = TRUE) %&gt;% print . [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;red&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;red&#34; &#34;red&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;red&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;red&#34; [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; [1] &#34;red&#34; &#34;red&#34; &#34;blue&#34; [1] &#34;blue&#34; &#34;blue&#34; &#34;blue&#34; . 빨간공을 3번 뽑을 수 있음 | . (&#51064;&#45937;&#49828;,&#54869;&#47456;) &#51221;&#48372;&#44032; &#51452;&#50612;&#51276;&#51012; &#44221;&#50864; &#49368;&#54540;&#47553; . &#50696;&#51228;7: &#50696;&#51228;6&#51032; &#45796;&#47480;&#44396;&#54788; . - 예제6의 코드는 아래와 같다. . set = c(&#39;red&#39;,&#39;blue&#39;) ## 인덱스.. p = c(0.4,0.6) ## 인덱스에 해당하는 확률 . sample(set,size=3, prob=p, replace = T) . [1] &#34;red&#34; &#34;blue&#34; &#34;blue&#34; . - 아래와 같은 코드로도 응용가능하다. . sample(set,size=20,prob=c(0.95,0.05),replace=T) . [1] &#34;blue&#34; &#34;blue&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; [11] &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; &#34;red&#34; . &#51204;&#52404;&#51665;&#54633;&#50640;&#49436; &#49436;&#47196; &#45796;&#47480; &#54869;&#47456;&#47196; &#50896;&#49548;&#44032; &#48977;&#55176;&#45716; &#44221;&#50864; . &#50696;&#51228;8 . - 예제7의 코드에서 replace를 제외한다면? . set = c(&#39;red&#39;,&#39;blue&#39;) ## 인덱스.. . sample(set,size=20,prob=c(0.95,0.05)) . Error in sample.int(length(x), size, replace, prob): cannot take a sample larger than the population when &#39;replace = FALSE&#39; Traceback: 1. sample(set, size = 20, prob = c(0.95, 0.05)) 2. sample.int(length(x), size, replace, prob) . 당연히 에러가남 (원소가 2개 있는 set에서 20개를 뽑으라고 하니..) | . - 아래는 에러가 나지 않을 것임 . sample(set,size=2,prob=c(0.95,0.05)) . [1] &#34;red&#34; &#34;blue&#34; . - 의미는? . rslt = matrix(rep(&quot;-&quot;,1000*2),ncol=2) head(rslt) . [,1] [,2] [1,] - - [2,] - - [3,] - - [4,] - - [5,] - - [6,] - - . for (i in 1:1000) rslt[i,] = sample(set,size=2,prob=c(0.95,0.05)) . head(rslt) . [,1] [,2] [1,] red blue [2,] red blue [3,] red blue [4,] red blue [5,] red blue [6,] red blue . sum(rslt[,1]==&#39;red&#39;)/1000 . [1] 0.947 . 대략 95% | . - 첫번째가 붉은 공이 뽑힐 확률은 95%임. 그리고 두번째 공은 첫번째 공과 다른색이 뽑힘 . &#49689;&#51228;: &#51669;&#44160;&#45796;&#47532; &#44148;&#45320;&#44592; . (유리,강화유리)의 쌍으로 이루어진 징검다리가 총 5개 있다고 하자. (따라서 징검다리는 모두 10개이다) . 강화유리로 된 징검다리를 밟으면 살아남지만 유리로 된 징검다리를 밟으면 죽는다. . 따라서 강화유리로 된 징검다리를 계속 골라야 살아남을 수 있다. . A씨는 유리공장에서 20년 근무한 장인으로 유리와 강화유리를 구분할수 있는 능력을 가졌다고 하자. . 그래서 강화유리로 된 징검다리를 고를 확률이 80%라고 하자. . A씨가 살아남을 확률을 시뮬레이션을 통하여 구하여라. . Hint: 총 1000번의 시뮬레이션을 수행하고 그중에서 A씨가 살아남는 케이스가 몇회정도 되는지 찾아라. . sample = rbinom(1000,size=5,prob=0.8) sample . &lt;ol class=list-inline&gt;4 | 5 | 5 | 5 | 5 | 4 | 5 | 3 | 4 | 5 | 4 | 2 | 3 | 4 | 5 | 5 | 4 | 5 | 5 | 4 | 4 | 4 | 3 | 5 | 4 | 5 | 3 | 5 | 4 | 4 | 5 | 5 | 4 | 5 | 5 | 3 | 4 | 2 | 5 | 5 | 4 | 3 | 2 | 4 | 5 | 2 | 5 | 3 | 3 | 4 | 5 | 5 | 5 | 5 | 3 | 5 | 3 | 5 | 4 | 5 | 5 | 3 | 4 | 4 | 5 | 4 | 5 | 5 | 5 | 4 | 4 | 4 | 4 | 4 | 3 | 4 | 3 | 3 | 5 | 3 | 4 | 4 | 5 | 4 | 3 | 4 | 4 | 4 | 4 | 4 | 3 | 3 | 4 | 5 | 4 | 4 | 5 | 4 | 3 | 5 | 5 | 5 | 3 | 5 | 3 | 5 | 5 | 5 | 3 | 2 | 4 | 5 | 4 | 5 | 4 | 4 | 4 | 3 | 3 | 5 | 2 | 4 | 4 | 5 | 3 | 5 | 5 | 5 | 5 | 3 | 3 | 4 | 3 | 3 | 5 | 4 | 2 | 5 | 4 | 4 | 5 | 5 | 5 | 3 | 4 | 4 | 4 | 3 | 4 | 4 | 5 | 4 | 4 | 4 | 3 | 4 | 5 | 4 | 4 | 4 | 5 | 3 | 5 | 3 | 4 | 4 | 4 | 5 | 5 | 5 | 5 | 5 | 3 | 4 | 5 | 3 | 5 | 4 | 4 | 4 | 3 | 4 | 2 | 5 | 4 | 4 | 5 | 3 | 5 | 4 | 4 | 2 | 4 | 5 | 5 | 5 | 4 | 2 | 5 | 4 | ⋯ | 4 | 3 | 2 | 4 | 4 | 5 | 5 | 5 | 4 | 5 | 3 | 4 | 4 | 4 | 3 | 5 | 5 | 2 | 4 | 4 | 3 | 5 | 1 | 4 | 4 | 2 | 5 | 5 | 5 | 2 | 4 | 3 | 4 | 5 | 2 | 3 | 5 | 4 | 5 | 3 | 4 | 4 | 3 | 5 | 4 | 4 | 4 | 2 | 3 | 5 | 4 | 2 | 3 | 4 | 3 | 5 | 3 | 5 | 3 | 5 | 3 | 4 | 5 | 5 | 4 | 5 | 5 | 3 | 4 | 4 | 3 | 4 | 5 | 5 | 4 | 3 | 3 | 4 | 4 | 4 | 3 | 5 | 4 | 5 | 5 | 5 | 4 | 4 | 4 | 3 | 4 | 4 | 5 | 4 | 5 | 5 | 4 | 3 | 4 | 4 | 3 | 4 | 5 | 4 | 5 | 4 | 3 | 4 | 3 | 2 | 5 | 2 | 3 | 4 | 3 | 3 | 4 | 5 | 3 | 4 | 4 | 5 | 5 | 4 | 4 | 4 | 5 | 4 | 4 | 3 | 5 | 3 | 4 | 5 | 5 | 3 | 3 | 4 | 4 | 4 | 3 | 3 | 5 | 3 | 5 | 4 | 3 | 4 | 4 | 2 | 3 | 4 | 5 | 4 | 3 | 4 | 5 | 4 | 5 | 4 | 4 | 4 | 5 | 3 | 4 | 5 | 3 | 3 | 4 | 5 | 4 | 3 | 4 | 5 | 4 | 5 | 4 | 5 | 4 | 3 | 2 | 3 | 5 | 4 | 4 | 5 | 4 | 5 | 3 | 4 | 5 | 4 | 4 | 5 | 5 | 4 | 4 | 5 | 4 | 5 | &lt;/ol&gt; X &lt;- sample == 5 X . &lt;ol class=list-inline&gt;FALSE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | TRUE | TRUE | FALSE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | TRUE | TRUE | FALSE | TRUE | TRUE | FALSE | FALSE | FALSE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | TRUE | TRUE | TRUE | TRUE | FALSE | TRUE | FALSE | TRUE | FALSE | TRUE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | TRUE | TRUE | FALSE | TRUE | FALSE | TRUE | TRUE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | TRUE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | TRUE | TRUE | TRUE | TRUE | TRUE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | TRUE | TRUE | TRUE | FALSE | FALSE | TRUE | FALSE | ⋯ | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | TRUE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | TRUE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | TRUE | TRUE | FALSE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | TRUE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | FALSE | TRUE | FALSE | FALSE | TRUE | FALSE | FALSE | TRUE | TRUE | FALSE | FALSE | TRUE | FALSE | TRUE | &lt;/ol&gt; sum(X)/1000*100 . 32.4",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_11_18_(11%EC%A3%BC%EC%B0%A8)_11%EC%9B%9418%EC%9D%BC.html",
            "relUrl": "/2022/04/29/_11_18_(11%EC%A3%BC%EC%B0%A8)_11%EC%9B%9418%EC%9D%BC.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "(10주차) 11월16일",
            "content": "options(jupyter.rich_display=FALSE) . &#47532;&#49828;&#53944; . - 이상한 자료형 . - 제가 굉장히 많이 사용하는 자료형태.. 그런데 왜 쓰는지 이유를 물어보면 딱히 잘 모르겠어요 . &#50696;&#51228;1 . - 리스트를 선언하는 방법 . lst = list(5:10,c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;),matrix(c(T,T,F,T),ncol=2)) . lst . [[1]] [1] 5 6 7 8 9 10 [[2]] [1] &#34;A&#34; &#34;B&#34; &#34;C&#34; [[3]] [,1] [,2] [1,] TRUE FALSE [2,] TRUE TRUE . 리스트의 첫번째 원소 = 숫자로 이루어진 벡터 | 리스트의 두번째 원소 = 문자로 이루어진 벡터 | 리스트의 세번째 원소 = True / False로 이루어진 매트릭스 | . - 리스트의 각 원소를 추출하는 방법 . lst[[1]] . [1] 5 6 7 8 9 10 . lst[[2]] . [1] &#34;A&#34; &#34;B&#34; &#34;C&#34; . lst[[3]] . [,1] [,2] [1,] TRUE FALSE [2,] TRUE TRUE . lst[[1]]+3 . [1] 8 9 10 11 12 13 . - 리스트의 길이 . length(lst) . [1] 3 . - 왜 리스트를 쓰는가? (1) 함수에서 여러개의 리턴값을 주는 효과 (2) 정리의 효과 . 명확한 이점: 함수의 리턴값을 여러개 | 그외의 이점: 저도 솔직히 잘 모르겠어요. | 벡터, 매트릭스, 데이터프레임와 같이 기능상의 이점이 있는것 같진 않아요. | 그런데 자료를 저장하고 정리하기에 좋아요 (제가 정리하는걸 좋아하는것 같아요) | . &#50696;&#51228;2 . mid = list(c(&#39;hynn&#39;,&#39;iu&#39;,&#39;gd&#39;),c(100,95,100)) mid . [[1]] [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; [[2]] [1] 100 95 100 . names(mid) . NULL . names(mid)&lt;-c(&#39;names&#39;,&#39;score&#39;) . mid . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $score [1] 100 95 100 . - 보기에 깔끔하다. . - 데이터에 접근하기도 좋다. . mid$names . [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . mid$score . [1] 100 95 100 . - 물론 아래와 같이 접근할수도 있다. . mid[[1]] . [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . mid[[2]] . [1] 100 95 100 . - 리스트를 복사후 재생성하기에 좋음 . mid . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $score [1] 100 95 100 . final = mid . final . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $score [1] 100 95 100 . final$score = mid$score - 10 . final$score . [1] 90 85 90 . final . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $score [1] 90 85 90 . - 리스트를 묶어서 새로운 리스트를 또 만들 수도 있음 . IR2021 &lt;- list(mid,final) . IR2021 . [[1]] [[1]]$names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; [[1]]$score [1] 100 95 100 [[2]] [[2]]$names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; [[2]]$score [1] 90 85 90 . - 리스트원소에 이름을 붙여주면 . names(IR2021) . NULL . names(IR2021) &lt;- c(&quot;mid&quot;,&quot;final&quot;) . IR2021 . $mid $mid$names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $mid$score [1] 100 95 100 $final $final$names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $final$score [1] 90 85 90 . IR2021$final$score . [1] 90 85 90 . - 아래와 같이 선언하는 것도 깔끔해보인다. . IR2021 = list(names=mid$names, mid=mid$score, final=final$score) # 리스트의 구성요소와 이름을 동시에 선언 IR2021 . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $mid [1] 100 95 100 $final [1] 90 85 90 . &#47532;&#49828;&#53944;&#51032; &#49436;&#48652;&#49483;&#54021; . IR2021 . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $mid [1] 100 95 100 $final [1] 90 85 90 . [&#50672;&#49328;&#51088;: &#47532;&#49828;&#53944;&#47484; &#47532;&#53556; . IR2021[1] . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . IR2021[1:2] . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $mid [1] 100 95 100 . IR2021[c(1,3)] . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $final [1] 90 85 90 . IR2021[-2] . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $final [1] 90 85 90 . [[ &#50672;&#49328;&#51088;: &#47532;&#49828;&#53944;&#51032; &#50836;&#49548;&#47484; &#52628;&#52636;&#54632; . IR2021[[1]] . [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . IR2021[[2]] . [1] 100 95 100 . - 아래는 동작하지 않음 . IR2021[[-1]] . Error in IR2021[[-1]]: invalid negative subscript in get1index &lt;real&gt; Traceback: . - 아래는 의도와 다르게 동작함 . IR2021[[1:2]] . IR2021[[c(1,2)]] . IR2021[[1]][2]와 결과가 같음 | . IR2021[[1:3]] . IR2021[[c(1,3)]] #IR2021[[1]][3] . $&#50672;&#49328;&#51088; . IR2021$names . [[&#39;names&#39;]]&#50752; &#44057;&#51008; &#49324;&#50857;&#46020; &#44032;&#45733; . IR2021[[&#39;names&#39;]] . - 언뜻 생각하면 IR2021$names 와 IR2021[[&#39;names&#39;]] 의 기능은 같으므로 이 경우에는 $와 [[를 서로 바꿔도 될것 같다. 하지만 항상 그런 것은 아니다. . IR2021$n . IR2021[[&#39;n&#39;]] . - 즉 $연산자와 [[연산자의 차이는 파샬매칭(partial matching)을 허용하느냐 하지않느냐의 차이다. . IR2021$n . IR2021$na . IR2021$name . 특히 마지막 IR2021$name은 마치 오타를 허용해주는 느낌이다. | . - 그런데 아래는 동작하지 않음 . IR2021$ames . IR2021$es . &#47532;&#49828;&#53944;&#51032; &#51025;&#50857;: &#54632;&#49688;&#51032; return&#51004;&#47196; &#49324;&#50857; . - R에서는 일반적으로 하나의 오브젝트만 리턴함 . - 하지만 리스트를 사용하면 다중리턴을 지원하는 것처럼 느낄 수 있음. . cal= function(x,y){ return(list(add=x+y, sub=x-y, mul=x*y, dic=x/y)) } . cal(2,3) . - 이런일이 있으면 그냥 cal_add, cal_mul, cal_sub, cal_div 처럼 함수를 4개 구현하면 되는것이 아닌가? $ to$ 물론 그래도 가능하지만 코드가 지저분해 지니까 . - 함수의 결과값을 저장하여 아래와 같이 사용 . rslt = cal(4,3) . rslt$add . rslt$sub . - 아래와 같이 쓰지는 않음 . cal(4,3)$add . cal(4,3)$sub . &#49689;&#51228; . - 기본적인 자료형 vector, matrix, list에 기능을 스스로 정리해보고 요약해볼것 (제출의무 없음) . 벡터의 길이를 재려면 어떻게 해야하는지? | 매트릭스의 차원은 어떻게 알 수 있는지? | 리스트의 원소에 접근하려면? | $n times 1$ 매트릭스 혹은 $1 times n$ 매트릭스를 쓰면 되는데 왜 굳이 벡터를 만들었을까? | . - 벡터 ${ bf x}$와 벡터 ${ bf y}$를 아래의 코드를 이용해 표준 정규분포에서 생성하라. (표준정규분포를 모른다면 질문하거나 네이버 구글에서 스스로 찾아볼것) . x=rnorm(100) y=rnorm(100) . 아래의 수식을 계산하는 코드를 작성하라. . $$ frac{ sum_{i=1}^{100}(x_i- bar{x})(y_i- bar{y})}{ sqrt{ sum_{i=1}^{100}(x_i- bar{x})^2} sqrt{ sum_{i=1}^{100}(y_i- bar{y})^2}}$$ . 단 $ bar{x}= frac{1}{100} sum_{i=1}^{100}x_i$로 정의한다. . x=rnorm(100) y=rnorm(100) . num &lt;- sum((x-mean(x))*(y-mean(y))) num . [1] 6.206896 . den &lt;- sqrt(sum((x-mean(x))^2))*sqrt(sum((y-mean(y))^2)) den . [1] 122.7962 . normal &lt;- num/den normal . [1] 0.05054633 . . 보충학습 . x . ${ bf x} = (x_1,x_2, dots, x_{100})=(-1.34195186 ,-0.85612995, dots, -0.87349548)$ . $ frac{1}{100} sum_{i=1}^{100} x_i = frac{1}{100}(x_1+x_2+ dots +x_{100})= frac{1}{100}(-1.34195186 + (-0.85612995) + dots (-0.87349548))$ . 코드상으로는 아래와 같이 계산할 수 있겠음 . sum(x)/100 # xbar . mean(x) . . (풀이) . $$ frac{ sum_{i=1}^{100}(x_i- bar{x})(y_i- bar{y})}{ sqrt{ sum_{i=1}^{100}(x_i- bar{x})^2} sqrt{ sum_{i=1}^{100}(y_i- bar{y})^2}}= frac{A}{BC}$$ . A=0 for (i in 1:100) A=A+(x[i]-mean(x))*(y[i]-mean(y)) A . [1] 6.206896 . B=0 for (i in 1:100) B=B+(x[i]-mean(x))**2 B=sqrt(B) B . [1] 11.24123 . C=0 for (i in 1:100) C=C+(y[i]-mean(y))**2 C=sqrt(C) C . [1] 10.92373 . A/(B*C) . [1] 0.05054633 . (다른풀이) . sum((x-mean(x))*(y-mean(y))) / (sqrt(sum((x-mean(x))**2)) * sqrt(sum((y-mean(y))**2))) . (다른풀이2) . 벡터의 내적: ${ bf x}=(x_1, dots,x_{100})$ 라고 하고, ${ bf y}=(y_1, dots,y_{100})$ 라고 할때 두 벡터의 내적은 아래와 같이 계산한다. . $${ bf x} cdot { bf y} = x_1 y_1 + dots + x_{100}y_{100}$$ . x_ &lt;- c(1,2,3) y_ &lt;- c(2,3,4) . x_ %*% y_ . 1*2+ 2*3+ 3*4 . 이러한 성질을 이용하면 . xx= x-mean(x) yy= y-mean(y) . ((xx %*% yy) / (sqrt(xx %*% xx )* sqrt(yy %*% yy ))) . Error in eval(expr, envir, enclos): 객체 &#39;xx&#39;를 찾을 수 없습니다 Traceback: .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_11_16_(10%EC%A3%BC%EC%B0%A8)_11%EC%9B%9416%EC%9D%BC.html",
            "relUrl": "/2022/04/29/_11_16_(10%EC%A3%BC%EC%B0%A8)_11%EC%9B%9416%EC%9D%BC.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "2021년 1학기 R입문 중간고사",
            "content": "1. R&#51012; &#51060;&#50857;&#54616;&#50668; &#45796;&#51020;&#51012; &#44228;&#49328;&#54616;&#50668;&#46972;. (3&#51216;) . (a) $2^{-5}+2^{3}$ . 2^(-5) + 2^2 . [1] 4.03125 . (b) $ sqrt{33}$ . sqrt(33) . [1] 5.744563 . (c) $ sum_{k=1}^{100} frac{1}{k^2+2k+1}$ . k = c(1:100) sum(1/(k^2+2*k+1)) . [1] 0.6350819 . 2. &#45796;&#51020;&#51012; &#51096; &#51069;&#44256; &#47932;&#51020;&#50640; &#45813;&#54616;&#46972;. (2&#51216;) . (a) &#50500;&#47000;&#50752; &#44057;&#51008; &#49688;&#50676;&#51012; &#49373;&#49457;&#54616;&#46972;. . $$x=(-10,-9.5,-9.0,...,9.0,9.5,10)$$ . (b) &#49373;&#49457;&#46108; &#49688;&#50676;&#50640; &#45824;&#54616;&#50668; &#50500;&#47000;&#47484; &#47564;&#51313;&#54616;&#45716; $y$&#47484; &#44228;&#49328;&#54616;&#46972;. . $$y= begin{cases} x &amp; |x|&gt;5 0 &amp; |x| leq 2 5 &amp; o.w. end{cases}$$ (a) . x &lt;- c(seq(-10,10,0.5)) x . [1] -10.0 -9.5 -9.0 -8.5 -8.0 -7.5 -7.0 -6.5 -6.0 -5.5 -5.0 -4.5 [13] -4.0 -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5 0.0 0.5 1.0 1.5 [25] 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 [37] 8.0 8.5 9.0 9.5 10.0 . (b) . ifelse(abs(x)&gt;5,x, ifelse(abs(x)&lt;=2,0,5)) . [1] -10.0 -9.5 -9.0 -8.5 -8.0 -7.5 -7.0 -6.5 -6.0 -5.5 5.0 5.0 [13] 5.0 5.0 5.0 5.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 [25] 0.0 5.0 5.0 5.0 5.0 5.0 5.0 5.5 6.0 6.5 7.0 7.5 [37] 8.0 8.5 9.0 9.5 10.0 . 3. $x=(-10,-9,-8, dots,8,9,10)$&#50640; &#45824;&#54616;&#50668; $h(g(f(x)))$&#51032; &#44228;&#49328;&#44208;&#44284;&#47484; &#44396;&#54616;&#45716; &#53076;&#46300;&#47484; &#51089;&#49457;&#54616;&#46972;. (10&#51216;) . 단, $f(x)$,$g(x)$, $h(x)$의 정의는 각각 아래와 같다. . $f(x)=2x+3 $ | $g(x)= frac{e^x}{1+e^x}$ | $h(x)=max(x,0)$ | . library(tidyverse) . Warning message: “package ‘tidyverse’ was built under R version 4.0.3” ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.6 ✔ dplyr 1.0.7 ✔ tidyr 1.1.4 ✔ stringr 1.4.0 ✔ readr 2.1.1 ✔ forcats 0.5.1 Warning message: “package ‘ggplot2’ was built under R version 4.0.5” Warning message: “package ‘tibble’ was built under R version 4.0.5” Warning message: “package ‘tidyr’ was built under R version 4.0.5” Warning message: “package ‘readr’ was built under R version 4.0.5” Warning message: “package ‘purrr’ was built under R version 4.0.3” Warning message: “package ‘dplyr’ was built under R version 4.0.5” Warning message: “package ‘stringr’ was built under R version 4.0.5” Warning message: “package ‘forcats’ was built under R version 4.0.3” ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . x = c() f &lt;- function(x) 2*x + 3 g &lt;- function(x) exp(x)/(1+exp(x)) h &lt;- function(x) ifelse(x&gt;0,x,0) for (i in -10:10){ x = f(i) %&gt;% g %&gt;% h print(x) } . [1] 4.139938e-08 [1] 3.059022e-07 [1] 2.260324e-06 [1] 1.670142e-05 [1] 0.0001233946 [1] 0.0009110512 [1] 0.006692851 [1] 0.04742587 [1] 0.2689414 [1] 0.7310586 [1] 0.9525741 [1] 0.9933071 [1] 0.9990889 [1] 0.9998766 [1] 0.9999833 [1] 0.9999977 [1] 0.9999997 [1] 1 [1] 1 [1] 1 [1] 1 . f = function(x) 2*x +3 g = function(x) exp(x) / (1+exp(x)) h = function(x) ifelse(x&gt;0,x,0) -10:10 %&gt;% f %&gt;% g %&gt;% h . [1] 4.139938e-08 3.059022e-07 2.260324e-06 1.670142e-05 1.233946e-04 [6] 9.110512e-04 6.692851e-03 4.742587e-02 2.689414e-01 7.310586e-01 [11] 9.525741e-01 9.933071e-01 9.990889e-01 9.998766e-01 9.999833e-01 [16] 9.999977e-01 9.999997e-01 1.000000e+00 1.000000e+00 1.000000e+00 [21] 1.000000e+00 . 4. &#50500;&#47000;&#51473; &#50739;&#51008;&#44163;&#51008;? (O / X &#47196; &#45813;&#50504;&#51648;&#47484; &#50416;&#44256; &#45813;&#51032; &#44540;&#44144;&#44032; &#46104;&#45716; &#53076;&#46300;&#47484; &#51089;&#49457;&#54624;&#44163;) (10&#51216;) . (a) $1= frac{1}{2}+ frac{1}{4} + frac{1}{8} dots $ . f = function(N){ a&lt;-c() a[1]=0.5 for(n in 2:N) a[n]=a[n-1]*0.5 sum(a) } for(k in 5:20) print (c(f(k))) . [1] 0.96875 [1] 0.984375 [1] 0.9921875 [1] 0.9960938 [1] 0.9980469 [1] 0.9990234 [1] 0.9995117 [1] 0.9997559 [1] 0.9998779 [1] 0.999939 [1] 0.9999695 [1] 0.9999847 [1] 0.9999924 [1] 0.9999962 [1] 0.9999981 [1] 0.999999 . (b) $e^x= 1+x+x^2+x^3+ dots $ . g = function(x, N){ a&lt;-c() a[1] = x for(n in 2:N) a[n]=a[n-1]*x sum(a)+1 } x=2 for (k in 5:20) print (c(exp(x)-g(x,k))) . [1] -55.61094 [1] -119.6109 [1] -247.6109 [1] -503.6109 [1] -1015.611 [1] -2039.611 [1] -4087.611 [1] -8183.611 [1] -16375.61 [1] -32759.61 [1] -65527.61 [1] -131063.6 [1] -262135.6 [1] -524279.6 [1] -1048568 [1] -2097144 . 5. &#45796;&#51020;&#51012; &#51069;&#44256; &#47932;&#51020;&#50640; &#45813;&#54616;&#46972;. (10&#51216;) . 다음은 어느 회사의 연봉에 대한 규정이다. . (가) 입사 첫째 해 연봉은 $a$원이고, 입사 19년째 해까지의 연봉은 해마다 직전 연봉에서 8%씩 인상된다. . (나) 입사 20년째 해부터의 연봉은 입사 19년째 해 연봉의 75%로 한다. . 이 회사에 입사한 사람이 28년동안 근무하여 받는 연봉의 총합은? . sal &lt;- c() sal[1] &lt;- 1 . for(i in 2:19){ sal[i] = sal[i-1]*1.08 } . sal . [1] 1.000000 1.080000 1.166400 1.259712 1.360489 1.469328 1.586874 1.713824 [9] 1.850930 1.999005 2.158925 2.331639 2.518170 2.719624 2.937194 3.172169 [17] 3.425943 3.700018 3.996019 . for (i in 20:28){ sal[i] = sal[19]*0.75 } . sal . [1] 1.000000 1.080000 1.166400 1.259712 1.360489 1.469328 1.586874 1.713824 [9] 1.850930 1.999005 2.158925 2.331639 2.518170 2.719624 2.937194 3.172169 [17] 3.425943 3.700018 3.996019 2.997015 2.997015 2.997015 2.997015 2.997015 [25] 2.997015 2.997015 2.997015 2.997015 . sum(sal) . [1] 68.41939 . 6. &#45796;&#51020; &#47928;&#51109;&#51012; &#51069;&#44256; &#52280;&#44144;&#51667;&#51012; &#54032;&#45800;&#54616;&#49884;&#50724;. (10&#51216;) . (a) _a&#45716; &#48320;&#49688;&#51060;&#47492;&#51004;&#47196; &#44032;&#45733;&#54616;&#45796;. . _a &lt;- 2 a F . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:1: 예상하지 못한 입력입니다. 1: _ ^ Traceback: . False . (b) &#48289;&#53552;&#51032; &#50896;&#49548;&#45716; &#49688;&#52824;&#54805;(numeric)&#47564; &#44032;&#45733;&#54616;&#45796;. . c &lt;- c(&#39;A&#39;, &#39;B&#39;) print (x=c) class(x=c) . [1] &#34;A&#34; &#34;B&#34; . [1] &#34;character&#34; . False . (c) &#45436;&#47532;&#54805;(logical)&#48320;&#49688;&#45716; &#49688;&#52824;&#54805; &#48320;&#49688;&#47196; &#48320;&#54872;&#54624; &#49688; &#50630;&#45796;. . d &lt;- c(F, T) print(x=d) class(x=d) d = as.numeric(d) d class(x=d) . [1] FALSE TRUE . [1] &#34;logical&#34; . [1] 0 1 . [1] &#34;numeric&#34; . True . (d) R&#50640;&#49436; {}&#45716; ()&#47196; &#48148;&#44992; &#49688; &#51080;&#45796;. . False . 7. 100&#44060;&#51032; &#46972;&#52964; (15&#51216;) . 복도에 100개의 라커가 있다. 복도를 어떤 남자가 100개의 라커 문을 전부 연다. 그리고 나서 짝수 번호의 라커를 전부 닫는다. 그 다음에는 번호가 3의 배수인 라커를 순서대로 찾아다니며 열려 있으면 닫고, 닫혀 있으면 연다. 그 다음에는 번호가 4의 배수인 라커를 순서대로 찾아다니며 열려있으면 닫고, 닫혀있으면 연다. 이후에 5의 배수, 6의 배수 .. 인 라커를 순서대로 찾아다니며 행동을 반복한다. 이런식으로 복도를 100번 지나가면 열린 라커의 문은 몇개가 되겠는가? . x = rep(FALSE, 100) . g &lt;- function(x,a){ n=length(x) x[(1:n) %% a == 0] &lt;- x[(1:n) %% a == 0] %&gt;% f x } . x=f(x) for (i in 2:100){ x=g(x,i) } . Warning message in 2:N: “수치형 표현식(numerical expression)은 100개의 구성요소들을 가지고 있기 때문에 오로지 첫번째 것만을 사용합니다.” . Error in a[n] &lt;- a[n - 1] * 0.5: replacement has length zero Traceback: 1. f(x) . xsum(x) . [1] 0 . 8. &#47924;&#44417;&#54868; &#44867;&#51060; &#54588;&#50632;&#49845;&#45768;&#45796;. (25&#51216;) . 총 456명의 참가자가 &#39;무궁화 꽃이 피었습니다&#39; 게임에 참가한다. 기본적인 게임의 규칙은 아래와 같다. . 술래는 총 10회간 벽을 보고 &#39;무궁화 꽃이 피었습니다&#39; 를 외친다. . | 참가자는 술래가 있는 곳 까지 이동해야 살 수 있다. . | 술래는 벽을 보고 &#39;무궁화 꽃이 피었습니다&#39;를 외치다가 구호가 끝남과 동시에 뒤를 돌아본다. 이때 움직이는 사람은 죽는다 . | . 따라서 참가자는 술래가 벽을 보고 &#39;무궁화 꽃이 피었습니다&#39;를 외치는 동안만 이동할 수 있다. 욕심을 부려 더 이동하고자 하면 죽을 수 있다. 반대로 죽는 것을 지나치게 두려워한 나머지 매턴마다 조금씩만 이동한다면 10회의 제한횟수 내에 술래에게 도달하지 못하여 죽는다. . 게임환경과 관련된 세부적인 설정은 아래와 같다. . 술래와 참가자의 거리는 35이다. . | 술래는 처음 벽을 보고 $x$초간 무궁화 꽃이 피었습니다를 외친다. . | 모든 참가자는 1초에 거리1이상 움직일 수 없다고 가정한다. (예를들어 2.4초 동안은 최대 2.4의 거리를 이동할 수 있다. 반면 이동을 원치않으면 0의 거리만큼 움직이므로 0~2.4사이의 거리를 움직일 수 있다) . | . 술래와 참가자에 대한 설정값은 아래와 같다. . 술래에 대한 설정값 . 처음에는 술래가 10초간 무궁화 꽃이 피었습니다를 외친다. . | 그 다음에는 술래가 9.5초간 무궁화 꽃이 피었습니다를 외친다. . | 그 다음에도 0.5초씩 구호를 외치는 시간을 줄인다. 이것을 10회 반복한다. . | . 참가자에 대한 설정값 . 처음에는 참가자가 &quot;본인의번호/100&quot;을 계산하여 나온 숫자만큼 움직인다. 즉 10번 참가자는 0.1의 거리를 움직이고 456번 참가자는 4.56의 거리를 움직인다. . | 그 다음은 처음에 본인이 이동했던 거리에 1씩 더하여 움직인다. 즉 10번 참가자는 1.1의 거리를 움직이고 456번 참가자는 5.56의 거리를 움직인다. . | . - 예시1 . 300번 참가자의 경우 아래와 같이 이동하므로 . 1회 2회 3회 4회 5회 6회 . 술래의 외침시간 | 10 | 9.5 | 9.0 | 8.5 | 8.0 | 7.5 | . 참가자의 이동폭 | 3 | 4 | 5 | 6 | 7 | 7.5 | . 참가자의 총 이동거리 | 3 | 7 | 12 | 18 | 25 | 32.5 | . 생존할 수 없다. (6회에서 32.5까지 이동후 사망) . - 예시2 . 350번 참가자의 경우 아래와 같이 이동하므로 . 1회 2회 3회 4회 5회 6회 . 술래의 외침시간 | 10 | 9.5 | 9.0 | 8.5 | 8.0 | 7.5 | . 참가자의 이동폭 | 3.5 | 4.5 | 5.5 | 6.5 | 7.5 | 7.5 | . 참가자의 총 이동거리 | 3.5 | 8 | 13.5 | 20 | 27.5 | 35 | . 생존 할 수 있다. (6회에서 정확하게 7.5초간 이동하고 살아남는다) . - 예시3 . 400번 참가자의 경우 아래와 같이 이동하므로 . 1회 2회 3회 4회 5회 6회 . 술래의 외침시간 | 10 | 9.5 | 9.0 | 8.5 | 8.0 | 7.5 | . 참가자의 이동폭 | 4 | 5 | 6 | 7 | 8 | 5 | . 참가자의 총 이동거리 | 4 | 9 | 15 | 22 | 30 | 35 | . 생존 할 수 있다. (6회에서 5초간만 이동하면 35만큼 이동하므로 살아남는다) . (a) 1&#48264;, 67&#48264;, 218&#48264;, 456&#48264; &#52280;&#44032;&#51088;&#51032; &#49373;&#51316;&#50668;&#48512;&#47484; &#54869;&#51064;&#54616;&#45716; &#54632;&#49688;&#47484; &#51089;&#49457;&#54616;&#46972;. . 술래 . t = c(seq(10,by=-0.5,length.out=10)) t . [1] 10.0 9.5 9.0 8.5 8.0 7.5 7.0 6.5 6.0 5.5 . 참가자 . $x= frac{n}{100}+ frac{n}{100}+1+ frac{n}{100}+2+ dots+ frac{n}{100}+9 $ . 참가자가 생존하기 위해서는 1) 술래의 외침시간 &lt; 이동폭 2) 10회 동안 이동거리 &gt;= 35 . num=350 steps = num/100 + 0:9 steps . [1] 3.5 4.5 5.5 6.5 7.5 8.5 9.5 10.5 11.5 12.5 . t &gt;= steps . [1] TRUE TRUE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE . sum(steps[t&gt;=steps]) . [1] 27.5 . t[t&lt;steps][1] . [1] 7.5 . sum(steps[t&gt;=steps]) + t[t&lt;steps][1] &gt;= 35 . [1] TRUE . t = c(seq(10,by=-0.5,length.out=10)) surv &lt;- c() num = 67 steps = num/100 + 0:9 x1 &lt;- sum(steps[t&gt;=steps]) + t[t&lt;steps][1] &gt;= 35 num = 218 steps = num/100 + 0:9 x2 &lt;- sum(steps[t&gt;=steps]) + t[t&lt;steps][1] &gt;= 35 num = 456 steps = num/100 + 0:9 x3 &lt;- sum(steps[t&gt;=steps]) + t[t&lt;steps][1] &gt;= 35 surv &lt;- c(x1, x2, x3) surv . [1] FALSE TRUE FALSE . (b) &#51204;&#52404; &#49373;&#51316;&#51088;&#51473; &#47751;&#47749;&#51060; &#49332;&#50500;&#45224;&#45716;&#51648; &#44228;&#49328;&#54616;&#46972;. . t = c(seq(10,by=-0.5,length.out=10)) surv &lt;- c() for (num in 1:456){ steps = num/100 + 0:9 surv[num] &lt;- sum(steps[t&gt;=steps]) + t[t&lt;steps][1] &gt;= 35 } sum(surv) . [1] 85 . 9. &#45796;&#51020;&#51012; &#51096; &#51069;&#44256; &#49884;&#44033;&#54868; &#54616;&#46972;. (15&#51216;) . 다음은 인터넷에서 어떠한 자료를 다운받아 매트릭스로 저장하는 코드이다. . df=read.csv(&quot;https://raw.githubusercontent.com/guebin/2021IR/master/_notebooks/round2.csv&quot;) mat=as.matrix(df) . 매트릭스는 mat이라는 변수에 저장되어 있다. . (a) mat&#51032; &#52395;&#48264;&#51704; &#50676;&#51012; $x$, &#46160;&#48264;&#51704;&#50676;&#51012; $y$&#47196; &#49373;&#44033;&#54616;&#44256; plot&#54632;&#49688;&#47484; &#53685;&#54616;&#50668; &#50500;&#47000;&#50752; &#44057;&#51008; &#49328;&#51216;&#46020;&#47484; &#44536;&#47140;&#46972;. . . df=read.csv(&quot;https://raw.githubusercontent.com/guebin/2021IR/master/_notebooks/round2.csv&quot;) mat=as.matrix(df) . plot(mat[,1],mat[,2]) . (b) &#47588;&#53944;&#47533;&#49828;&#51032; &#52395;&#48264;&#51704; &#54665;(first row)&#47484; &#52636;&#47141;&#54616;&#45716; &#53076;&#46300;&#47484; &#51089;&#49457;&#54616;&#46972;. . - 힌트: 출력결과는 (12,313)이 나와야 한다. . X &lt;- mat[1,] X . x y 12 313 . (c) (b)&#51032; &#44208;&#44284;&#50640; &#50500;&#47000;&#51032; &#50672;&#49328;&#51012; &#49688;&#54665;&#54616;&#45716; &#53076;&#46300;&#47484; &#51089;&#49457;&#54616;&#46972;. . $$ begin{bmatrix} 0 &amp; -1 -1 &amp; 0 end{bmatrix} begin{bmatrix} 12 313 end{bmatrix} $$ Y = rbind(c(0,-1),c(-1,0)) Y . [,1] [,2] [1,] 0 -1 [2,] -1 0 . Y %*% X . [,1] [1,] -313 [2,] -12 . f = function(X){ dim(X)=c(2,1) X } . rbind(c(0,-1),c(-1,0)) %*% f(mat[1,]) . [,1] [1,] -313 [2,] -12 . (d) (b)-(c) &#44284;&#51221;&#51012; mat&#51032; &#47784;&#46321;&#54665;&#50640; &#48152;&#48373;&#54616;&#50668; &#49352;&#47196;&#50868; &#47588;&#53944;&#47533;&#49828;&#47484; &#47564;&#46308;&#50612;&#46972;. . - 힌트: 아래의 과정을 따른다. . (i) mat와 동일한 dim을 가진 mat2를 만든다. | (ii) mat의 첫번째 행에 (b)-(c)의 과정을 적용하여 길이가 2인 벡터를 얻는다. | (iii) (ii)의 과정에서 얻은 벡터를 새로운 매트릭스의 첫번째 행에 넣는다. | (iv) mat의 두번째 행에 대하여 (ii)-(iii)의 과정을 반복한다. 이후 세번째, 네번째 행에 대하여 (ii)-(iii)의 과정을 반복한다. | . g = function(X){ dim(X)=c(1,2) X } . mat2 = mat dim(mat2) . [1] 5513 2 . mat2 = mat*0 for (i in 1:5513) mat2[i,] = rbind(c(0,-1),c(-1,0)) %*% f(mat[i,]) %&gt;% g . (e) (d)&#51032; &#44208;&#44284;&#47196; &#49373;&#49457;&#46104; &#47588;&#53944;&#47533;&#49828;&#51032; &#52395;&#48264;&#51704; &#50676;&#51012; x, &#46160;&#48264;&#51704; &#50676;&#51012; y&#47196; &#54616;&#44256; &#49328;&#51216;&#46020;&#47484; &#44536;&#47140;&#46972;. (&#51216;&#51032; &#49353;&#51008; &#48521;&#51008;&#49353;&#51004;&#47196; &#54616;&#46972;) . - 힌트: 아래와 같은 그림이 나와야 한다. . . plot(mat2[,1],mat2[,2], col=&#39;red&#39;) .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_11_09_2021%EB%85%84_1%ED%95%99%EA%B8%B0_R%EC%9E%85%EB%AC%B8%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC.html",
            "relUrl": "/2022/04/29/_11_09_2021%EB%85%84_1%ED%95%99%EA%B8%B0_R%EC%9E%85%EB%AC%B8%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "(A3) 중간고사 대비문제",
            "content": "#. R&#51012; &#51060;&#50857;&#54616;&#50668; &#45796;&#51020;&#51012; &#44228;&#49328;&#54616;&#50668;&#46972;. . $2^{-5}+2^{3}$ | . 2^(-5) + 2^3 . [1] 8.03125 . $ sqrt{33}$ | . sqrt(33) . [1] 5.744563 . $ sum_{k=1}^{100} frac{1}{k^2+2k+1}$ㅁㅁ | . k = c(1:100) . k . [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 [91] 91 92 93 94 95 96 97 98 99 100 . sum(1/(k^2+2*k+1)) . [1] 0.6350819 . ... | . #. &#50500;&#47000;&#50752; &#44057;&#51008; &#49688;&#50676;&#51012; &#47564;&#46308;&#50612;&#46972;. . $(1,3,5,...,101)$ | . seq(1,101,2) . [1] 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 [20] 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 [39] 77 79 81 83 85 87 89 91 93 95 97 99 101 . ... | . #. &#50500;&#47000;&#50752; &#44057;&#51008; &#54632;&#49688;&#47484; &#49440;&#50616;&#54616;&#46972;. $x=1,2,3$ &#50640; &#45824;&#54616;&#50668; &#51452;&#50612;&#51652; &#54632;&#49688;&#51032; &#44208;&#44284;&#44050;&#51012; &#52636;&#47141;&#54616;&#46972;. . $f(x)=x^2$ | . f &lt;- function(x){ x^2 } . x = c(1:3) . f(x) . [1] 1 4 9 . #. &#50500;&#47000;&#51473; &#50739;&#51008;&#44163;&#51008;? . (a) $e^x= sum_{n=0}^{ infty} frac{x^n}{n!}$ . (b) $e^x= 1+x+x^2+x^3+ dots $ . (c) $e^x= 1-(x-1)+(x-1)^2-(x-1)^3+ dots $ . (풀이) . f&lt;-function(x,N){ a&lt;-c() a[1]=x for(n in 2:N) a[n]=a[n-1]*x/n sum(a)+1 } . g&lt;-function(x,N){ a&lt;-c() a[1]=x for(n in 2:N) a[n]=a[n-1]*x sum(a)+1 } . h&lt;-function(x,N){ a&lt;-c() a[1]= -(x-1) for(n in 2:N) a[n]=a[n-1]*(1-x) sum(a)+1 } . x=2 for (k in 5:20) print(c(exp(x)-f(x,k) , exp(x)-g(x,k), exp(x)-h(x,k))) . [1] 0.1223894 -55.6109439 7.3890561 [1] 0.03350054 -119.61094390 6.38905610 [1] 8.103718e-03 -2.476109e+02 7.389056e+00 [1] 1.754512e-03 -5.036109e+02 6.389056e+00 [1] 3.435769e-04 -1.015611e+03 7.389056e+00 [1] 6.138994e-05 -2.039611e+03 6.389056e+00 [1] 1.008322e-05 -4.087611e+03 7.389056e+00 [1] 1.532098e-06 -8.183611e+03 6.389056e+00 [1] 2.165414e-07 -1.637561e+04 7.389056e+00 [1] 2.860474e-08 -3.275961e+04 6.389056e+00 [1] 3.546512e-09 -6.552761e+04 7.389056e+00 [1] 4.142349e-10 -1.310636e+05 6.389056e+00 [1] 4.573142e-11 -2.621356e+05 7.389056e+00 [1] 4.786394e-12 -5.242796e+05 6.389056e+00 [1] 4.760636e-13 -1.048568e+06 7.389056e+00 [1] 4.529710e-14 -2.097144e+06 6.389056e+00 . $x=2$일때: $k$가 커질수록 $exp(x) approx f(x,k)$ 이지만 다른것은 그렇지 않음 | . x=3 for (k in 5:20) print(c(exp(x)-f(x,k) , exp(x)-g(x,k), exp(x)-h(x,k))) . [1] 1.685537 -343.914463 41.085537 [1] 0.6730369 -1072.9144631 -22.9144631 [1] 0.2391084 -3259.9144631 105.0855369 [1] 7.638514e-02 -9.820914e+03 -1.509145e+02 [1] 2.214407e-02 -2.950391e+04 3.610855e+02 [1] 5.871745e-03 -8.855291e+04 -6.629145e+02 [1] 1.433839e-03 -2.656999e+05 1.385086e+03 [1] 3.243623e-04 -7.971409e+05 -2.710914e+03 [1] 6.832928e-05 -2.391464e+06 5.481086e+03 [1] 1.346506e-05 -7.174433e+06 -1.090291e+04 [1] 2.492217e-06 -2.152334e+07 2.186509e+04 [1] 4.348086e-07 -6.457006e+07 -4.367091e+04 [1] 7.173653e-08 -1.937102e+08 8.740109e+04 [1] 1.122453e-08 -5.811307e+08 -1.747429e+05 [1] 1.669996e-09 -1.743392e+09 3.495451e+05 [1] 2.368168e-10 -5.230177e+09 -6.990309e+05 . x=10 for (k in 5:50) print(c(exp(x)-f(x,k) , exp(x)-g(x,k), exp(x)-h(x,k))) . [1] 20548.80 -89084.53 75170.47 [1] 19159.91 -1089084.53 -456270.53 [1] 17175.78 -11089084.53 4326698.47 [1] 14695.62 -111089084.53 -38720022.53 [1] 1.193989e+04 -1.111089e+09 3.487005e+08 [1] 9.184161e+03 -1.111109e+10 -3.138084e+09 [1] 6.678950e+03 -1.111111e+11 2.824298e+10 [1] 4.591274e+03 -1.111111e+12 -2.541866e+11 [1] 2.985370e+03 -1.111111e+13 2.287679e+12 [1] 1.838295e+03 -1.111111e+14 -2.058911e+13 [1] 1.073579e+03 -1.111111e+15 1.853020e+14 [1] 5.956311e+02 -1.111111e+16 -1.667718e+15 [1] 3.144854e+02 -1.111111e+17 1.500946e+16 [1] 1.582933e+02 -1.111111e+18 -1.350852e+17 [1] 7.608695e+01 -1.111111e+19 1.215767e+18 [1] 3.498377e+01 -1.111111e+20 -1.094190e+19 [1] 1.541083e+01 -1.111111e+21 9.847709e+19 [1] 6.514037e+00 -1.111111e+22 -8.862938e+20 [1] 2.645867e+00 -1.111111e+23 7.976644e+21 [1] 1.034129e+00 -1.111111e+24 -7.178980e+22 [1] 3.894339e-01 -1.111111e+25 6.461082e+23 [1] 1.414743e-01 -1.111111e+26 -5.814974e+24 [1] 4.963739e-02 -1.111111e+27 5.233476e+25 [1] 1.683850e-02 -1.111111e+28 -4.710129e+26 [1] 5.528535e-03 -1.111111e+29 4.239116e+27 [1] 1.758548e-03 -1.111111e+30 -3.815204e+28 [1] 5.424228e-04 -1.111111e+31 3.433684e+29 [1] 1.623837e-04 -1.111111e+32 -3.090315e+30 [1] 4.722033e-05 -1.111111e+33 2.781284e+31 [1] 1.334876e-05 -1.111111e+34 -2.503156e+32 [1] 3.671161e-06 -1.111111e+35 2.252840e+33 [1] 9.829419e-07 -1.111111e+36 -2.027556e+34 [1] 2.563938e-07 -1.111111e+37 1.824800e+35 [1] 6.519986e-08 -1.111111e+38 -1.642320e+36 [1] 1.617445e-08 -1.111111e+39 1.478088e+37 [1] 3.918103e-09 -1.111111e+40 -1.330279e+38 [1] 9.276846e-10 -1.111111e+41 1.197252e+39 [1] 2.182787e-10 -1.111111e+42 -1.077526e+40 [1] 5.093170e-11 -1.111111e+43 9.697737e+40 [1] 1.455192e-11 -1.111111e+44 -8.727964e+41 [1] 3.637979e-12 -1.111111e+45 7.855167e+42 [1] 3.637979e-12 -1.111111e+46 -7.069650e+43 [1] 3.637979e-12 -1.111111e+47 6.362685e+44 [1] 3.637979e-12 -1.111111e+48 -5.726417e+45 [1] 3.637979e-12 -1.111111e+49 5.153775e+46 [1] 3.637979e-12 -1.111111e+50 -4.638398e+47 . 답: (a) . #. &#45796;&#51020;&#51012; &#51069;&#44256; &#47932;&#51020;&#50640; &#45813;&#54616;&#46972;. . 다음은 어느 회사의 연봉에 대한 규정이다. . (가) 입사 첫째 해 연봉은 $a$원이고, 입사 19년째 해까지의 연봉은 해마다 직전 연봉에서 8%씩 인상된다. . (나) 입사 20년째 해부터의 연봉은 입사 19년째 해 연봉의 2/3로 한다. . 이 회사에 입사한 사람이 28년동안 근무하여 받는 연봉의 총합은? . sal&lt;-c() sal[1]&lt;-1 . for(i in 2:19){ sal[i] = sal[i-1]*1.08 } . sal . [1] 1.000000 1.080000 1.166400 1.259712 1.360489 1.469328 1.586874 1.713824 [9] 1.850930 1.999005 2.158925 2.331639 2.518170 2.719624 2.937194 3.172169 [17] 3.425943 3.700018 3.996019 . for(i in 20:28){ sal[i] = sal[19]*2/3 } . sal . [1] 1.000000 1.080000 1.166400 1.259712 1.360489 1.469328 1.586874 1.713824 [9] 1.850930 1.999005 2.158925 2.331639 2.518170 2.719624 2.937194 3.172169 [17] 3.425943 3.700018 3.996019 2.664013 2.664013 2.664013 2.664013 2.664013 [25] 2.664013 2.664013 2.664013 2.664013 . sum(sal) . [1] 65.42238 . #. &#45796;&#51020; &#47928;&#51109;&#51012; &#51069;&#44256; &#52280;&#44144;&#51667;&#51012; &#54032;&#45800;&#54616;&#49884;&#50724;. . _a는 변수이름으로 가능하다. | . _a &lt;- 1 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:1: 예상하지 못한 입력입니다. 1: _ ^ Traceback: . ... | . # &#45796;&#51020;&#51012; &#51096; &#51069;&#44256; &#49884;&#44033;&#54868; &#54616;&#46972;. . 두점 $(1,2)$, $(1.1,2.1)$를 붉은 점으로 각각 시각화 하라. . | 동일한 플랏에 $(-1,-2)$, $(-1.1,-2.1)$을 푸른점으로 각각 시각화 하라. . | . 출력예시 . # &#48380;&#47553;&#44277;&#51032; &#49440;&#53469; . A,B 두 사람이 볼링을 치고 있습니다. 두 사람은 서로 무게가 다른 볼링공을 고르려고 합니다. 볼링공은 총 N개가 있으며 각 볼링공마다 무게가 적혀 있고, 공의 번호는 1번부터 순서대로 부여됩니다. 또한 같은 무게의 공이 여러개 있을 수 있지만, 서로 다른 공으로 간주합니다. 볼링공의 무게는 1부터 M까지의 자연수 형태로 존재합니다. 예를들어 N이 5이고, M이 3이며 각각의 무게가 차례대로 1,3,2,3,2일 때 각 공의 번호가 차례대로 1번부터 5번까지 부여됩니다. 이때 두 사람이 고를 수 있는 볼링공 번호의 조합을 구하면 다음과 같습니다. . (1번,2번), (1번,3번), (1번,4번), (1번,5번), (2번,3번), (2번,5번), (3번,4번), (4번,5번) . 결과적으로 두 사람이 공을 고르는 경우의 수는 8가지입니다. N개의 공의 무게가 각각 주어질 때, 두 사람이 볼링공을 고르는 경우의 수를 구하는 프로그램을 작성하세요. . - 입력예시 . 입력 5 3 1 3 2 3 2 출력 8 . a=c(1,3,2,3,2) A=rep(0,25*2) dim(A)=c(25,2) A . [,1] [,2] [1,] 0 0 [2,] 0 0 [3,] 0 0 [4,] 0 0 [5,] 0 0 [6,] 0 0 [7,] 0 0 [8,] 0 0 [9,] 0 0 [10,] 0 0 [11,] 0 0 [12,] 0 0 [13,] 0 0 [14,] 0 0 [15,] 0 0 [16,] 0 0 [17,] 0 0 [18,] 0 0 [19,] 0 0 [20,] 0 0 [21,] 0 0 [22,] 0 0 [23,] 0 0 [24,] 0 0 [25,] 0 0 . k=1 for (i in 1:5){ for (j in 1:5){ A[k,]&lt;-c(a[i],a[j]) k=k+1 } } . A . [,1] [,2] [1,] 1 1 [2,] 1 3 [3,] 1 2 [4,] 1 3 [5,] 1 2 [6,] 3 1 [7,] 3 3 [8,] 3 2 [9,] 3 3 [10,] 3 2 [11,] 2 1 [12,] 2 3 [13,] 2 2 [14,] 2 3 [15,] 2 2 [16,] 3 1 [17,] 3 3 [18,] 3 2 [19,] 3 3 [20,] 3 2 [21,] 2 1 [22,] 2 3 [23,] 2 2 [24,] 2 3 [25,] 2 2 . vec1&lt;-c() vec2&lt;-c() for(i in 1:25){ vec1[i] &lt;- A[i,1] != A[i,2] vec2[i] &lt;- A[i,1] &gt; A[i,2] } . vec1 . [1] FALSE TRUE TRUE TRUE TRUE TRUE FALSE TRUE FALSE TRUE TRUE TRUE [13] FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE TRUE TRUE FALSE TRUE [25] FALSE . vec2 . [1] FALSE FALSE FALSE FALSE FALSE TRUE FALSE TRUE FALSE TRUE TRUE FALSE [13] FALSE FALSE FALSE TRUE FALSE TRUE FALSE TRUE TRUE FALSE FALSE FALSE [25] FALSE . sum(vec1 &amp; vec2) . [1] 8 .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_11_02_(A3)_%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC_%EB%8C%80%EB%B9%84%EB%AC%B8%EC%A0%9C.html",
            "relUrl": "/2022/04/29/_11_02_(A3)_%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC_%EB%8C%80%EB%B9%84%EB%AC%B8%EC%A0%9C.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "(6주차) 10월18일",
            "content": "&#54644;&#46308;&#47532;&#50948;&#52980; &#44536;&#47000;&#54532;&#47112;&#51060;&#50612; . import . import pandas as pd from plotnine import * . data . - ref: https://r4ds.had.co.nz/index.html . rpy2 . import rpy2 . %load_ext rpy2.ipython . %%R ### 여기는 R처럼 쓸 수 있다. a&lt;-c(1,2,3) a+1 . [1] 2 3 4 . a . NameError Traceback (most recent call last) Input In [5], in &lt;module&gt; -&gt; 1 a NameError: name &#39;a&#39; is not defined . %%R library(tidyverse) mpg . R[write to console]: ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── R[write to console]: ✔ ggplot2 3.3.5 ✔ purrr 0.3.4 ✔ tibble 3.1.6 ✔ dplyr 1.0.7 ✔ tidyr 1.2.0 ✔ stringr 1.4.0 ✔ readr 2.1.2 ✔ forcats 0.5.1 R[write to console]: ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() . # A tibble: 234 × 11 manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4 audi a4 2 2008 4 auto… f 21 30 p comp… 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 8 audi a4 quattro 1.8 1999 4 manu… 4 18 26 p comp… 9 audi a4 quattro 1.8 1999 4 auto… 4 16 25 p comp… 10 audi a4 quattro 2 2008 4 manu… 4 20 28 p comp… # … with 224 more rows . mpg . NameError Traceback (most recent call last) Input In [7], in &lt;module&gt; -&gt; 1 mpg NameError: name &#39;mpg&#39; is not defined . %R -o mpg # R에 있던 자료가 파이썬으로 넘어옴 . mpg . manufacturer model displ year cyl trans drv cty hwy fl class . 1 audi | a4 | 1.8 | 1999 | 4 | auto(l5) | f | 18 | 29 | p | compact | . 2 audi | a4 | 1.8 | 1999 | 4 | manual(m5) | f | 21 | 29 | p | compact | . 3 audi | a4 | 2.0 | 2008 | 4 | manual(m6) | f | 20 | 31 | p | compact | . 4 audi | a4 | 2.0 | 2008 | 4 | auto(av) | f | 21 | 30 | p | compact | . 5 audi | a4 | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | compact | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 230 volkswagen | passat | 2.0 | 2008 | 4 | auto(s6) | f | 19 | 28 | p | midsize | . 231 volkswagen | passat | 2.0 | 2008 | 4 | manual(m6) | f | 21 | 29 | p | midsize | . 232 volkswagen | passat | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | midsize | . 233 volkswagen | passat | 2.8 | 1999 | 6 | manual(m5) | f | 18 | 26 | p | midsize | . 234 volkswagen | passat | 3.6 | 2008 | 6 | auto(s6) | f | 17 | 26 | p | midsize | . 234 rows × 11 columns . &#51200;&#51109;&#46108; &#54028;&#51068;&#51012; &#53685;&#54616;&#50668; &#45936;&#51060;&#53552;&#47484; &#54869;&#48372; . mpg.to_csv(&quot;mpg.csv&quot;) . pd.read_csv(&quot;mpg.csv&quot;) # mpg = pd.read_csv(&quot;mpg.csv&quot;) . Unnamed: 0 manufacturer model displ year cyl trans drv cty hwy fl class . 0 1 | audi | a4 | 1.8 | 1999 | 4 | auto(l5) | f | 18 | 29 | p | compact | . 1 2 | audi | a4 | 1.8 | 1999 | 4 | manual(m5) | f | 21 | 29 | p | compact | . 2 3 | audi | a4 | 2.0 | 2008 | 4 | manual(m6) | f | 20 | 31 | p | compact | . 3 4 | audi | a4 | 2.0 | 2008 | 4 | auto(av) | f | 21 | 30 | p | compact | . 4 5 | audi | a4 | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | compact | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 229 230 | volkswagen | passat | 2.0 | 2008 | 4 | auto(s6) | f | 19 | 28 | p | midsize | . 230 231 | volkswagen | passat | 2.0 | 2008 | 4 | manual(m6) | f | 21 | 29 | p | midsize | . 231 232 | volkswagen | passat | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | midsize | . 232 233 | volkswagen | passat | 2.8 | 1999 | 6 | manual(m5) | f | 18 | 26 | p | midsize | . 233 234 | volkswagen | passat | 3.6 | 2008 | 6 | auto(s6) | f | 17 | 26 | p | midsize | . 234 rows × 12 columns . - 무언가 잘못되었다? . - 다시 저장하자. . mpg.to_csv(&quot;mpg.csv&quot;,index=False) . pd.read_csv(&quot;mpg.csv&quot;) # mpg=pd.read_csv(&quot;mpg.csv&quot;) . manufacturer model displ year cyl trans drv cty hwy fl class . 0 audi | a4 | 1.8 | 1999 | 4 | auto(l5) | f | 18 | 29 | p | compact | . 1 audi | a4 | 1.8 | 1999 | 4 | manual(m5) | f | 21 | 29 | p | compact | . 2 audi | a4 | 2.0 | 2008 | 4 | manual(m6) | f | 20 | 31 | p | compact | . 3 audi | a4 | 2.0 | 2008 | 4 | auto(av) | f | 21 | 30 | p | compact | . 4 audi | a4 | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | compact | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 229 volkswagen | passat | 2.0 | 2008 | 4 | auto(s6) | f | 19 | 28 | p | midsize | . 230 volkswagen | passat | 2.0 | 2008 | 4 | manual(m6) | f | 21 | 29 | p | midsize | . 231 volkswagen | passat | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | midsize | . 232 volkswagen | passat | 2.8 | 1999 | 6 | manual(m5) | f | 18 | 26 | p | midsize | . 233 volkswagen | passat | 3.6 | 2008 | 6 | auto(s6) | f | 17 | 26 | p | midsize | . 234 rows × 11 columns . 제대로 불러졌음 | . github&#46321;&#50640; &#44277;&#44060;&#46108; csv&#47484; &#51069;&#50612;&#50724;&#44592; . pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/mpg.csv&#39;) # mpg=pd.read_csv(&#39;https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/mpg.csv&#39;) . manufacturer model displ year cyl trans drv cty hwy fl class . 0 audi | a4 | 1.8 | 1999 | 4 | auto(l5) | f | 18 | 29 | p | compact | . 1 audi | a4 | 1.8 | 1999 | 4 | manual(m5) | f | 21 | 29 | p | compact | . 2 audi | a4 | 2.0 | 2008 | 4 | manual(m6) | f | 20 | 31 | p | compact | . 3 audi | a4 | 2.0 | 2008 | 4 | auto(av) | f | 21 | 30 | p | compact | . 4 audi | a4 | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | compact | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 229 volkswagen | passat | 2.0 | 2008 | 4 | auto(s6) | f | 19 | 28 | p | midsize | . 230 volkswagen | passat | 2.0 | 2008 | 4 | manual(m6) | f | 21 | 29 | p | midsize | . 231 volkswagen | passat | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | midsize | . 232 volkswagen | passat | 2.8 | 1999 | 6 | manual(m5) | f | 18 | 26 | p | midsize | . 233 volkswagen | passat | 3.6 | 2008 | 6 | auto(s6) | f | 17 | 26 | p | midsize | . 234 rows × 11 columns . - 깃허브 저장소에 아예 데이터만 따로 모아서 관리하는 것도 좋은 방법입니다. . data &#49444;&#47749; . - displ: 자동차의 엔진크기 . - hwy: 연료의 효율, 동일한 연료로 얼마나 멀리 가느냐? . - 자세한 설명은 R에서 ?mpg로 알아볼것 . &#44592;&#48376;&#49328;&#51216;&#46020; (2&#52264;&#50896;) . ggplot(data = mpg) + geom_point(mapping = aes(x = &quot;displ&quot;, y = &quot;hwy&quot;)) ## plotnine . &lt;ggplot: (8785683301045)&gt; . 산점도: 엔진크기와 연료효율은 반비례. (엔진이 큰 차일수록 연비가 좋지 않다) | . - ggplot2를 이용한 산점도 . %%R -w 800 ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) ## 진짜 ggplot에서 그릴때에는 변수이름에 &quot;&quot; 를 제거함 . - 객체지향적인 느낌으로 산점도 그리기 . step1: 도화지를 준비한다 . fig=ggplot(data=mpg) fig . &lt;ggplot: (8785688037313)&gt; . step2: 변수와 에스테틱사이의 맵핑을 설정한다. . a1=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;) a1 . {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;} . step3: 점들의 집합을 만든다. 즉 포인트지옴을 만든다. . point1=geom_point(mapping=a1) . geom_point(): 점들을 그려! 어떻게? | a1에서 설정된 표를 보고 | . step4: 도화지와 지옴을 합친다. . fig+point1 . &lt;ggplot: (8785683944382)&gt; . - 빠르게 그리기: mapping = 와 data=는 생략가능함 . ggplot(mpg) + geom_point(aes(x = &quot;displ&quot;, y = &quot;hwy&quot;)) ## plotnine . &lt;ggplot: (8785684019941)&gt; . &#49328;&#51216;&#46020;&#51025;&#50857; (3&#52264;&#50896;) . - 데이터를 다시관찰 . mpg.head() . manufacturer model displ year cyl trans drv cty hwy fl class . 1 audi | a4 | 1.8 | 1999 | 4 | auto(l5) | f | 18 | 29 | p | compact | . 2 audi | a4 | 1.8 | 1999 | 4 | manual(m5) | f | 21 | 29 | p | compact | . 3 audi | a4 | 2.0 | 2008 | 4 | manual(m6) | f | 20 | 31 | p | compact | . 4 audi | a4 | 2.0 | 2008 | 4 | auto(av) | f | 21 | 30 | p | compact | . 5 audi | a4 | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | compact | . - class도 함께 plot에 표시하면 데이터를 탐색할때 좀 더 좋을것 같다. . &#49328;&#51216;&#46020; + &#51216;&#53356;&#44592;&#48320;&#44221; . ggplot(data=mpg)+ geom_point(mapping=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;,size= &#39;class&#39;)) . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_size.py:48: PlotnineWarning: Using size for a discrete variable is not advised. . &lt;ggplot: (8785689111920)&gt; . &#49328;&#51216;&#46020; + &#53804;&#47749;&#46020;&#48320;&#44221; . ggplot(data=mpg)+ geom_point(mapping=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;,alpha= &#39;class&#39;)) . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_alpha.py:68: PlotnineWarning: Using alpha for a discrete variable is not advised. . &lt;ggplot: (8785688505637)&gt; . ggplot(data=mpg)+ geom_point(mapping=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;,size= &#39;class&#39;,alpha=&#39;class&#39;)) . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_size.py:48: PlotnineWarning: Using size for a discrete variable is not advised. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_alpha.py:68: PlotnineWarning: Using alpha for a discrete variable is not advised. . &lt;ggplot: (8785688132675)&gt; . &#49328;&#51216;&#46020; + &#54805;&#53468; . ggplot(data=mpg)+ geom_point(mapping=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;,shape=&#39;class&#39;)) . &lt;ggplot: (8785689585505)&gt; . &#49328;&#51216;&#46020; + &#49353;&#44628; . ggplot(data=mpg)+ geom_point(mapping=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;,color=&#39;class&#39;)) . &lt;ggplot: (8785689434618)&gt; . - 객체지향적으로? . a2=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;,color=&#39;class&#39;) . a1,a2 . ({&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;class&#39;}) . point2=geom_point(a2) . fig+point2 . &lt;ggplot: (8785689577716)&gt; . &#51648;&#50740;&#51012; &#45908; &#52628;&#44032; (&#51201;&#54633;&#49440;) . fig+point1 . &lt;ggplot: (8785689961304)&gt; . sline1=geom_smooth(a1) . fig+point1+sline1 . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. . &lt;ggplot: (8785689961277)&gt; . fig+point2+sline1 . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. . &lt;ggplot: (8785690236570)&gt; . - 명령어로 한번에 그리기 . ggplot(data=mpg)+geom_point(mapping=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;,color=&#39;class&#39;))+geom_smooth(mapping=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;)) . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. . &lt;ggplot: (8785690357110)&gt; . - 공통적인 맵핑규칙은 ggplot()쪽으로 빼기도 한다. (figure를 선언하는 곳에서 공통으로 선언함) . ggplot(data=mpg,mapping=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;))+geom_point(mapping=aes(color=&#39;class&#39;))+geom_smooth() . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. . &lt;ggplot: (8785690558766)&gt; . - R에서는 confidence interval도 geom_smooth()를 이용하여 확인할 수 있다. . %%R -w 800 ggplot(data=mpg,mapping=aes(x=displ,y=hwy))+geom_point(mapping=aes(color=class))+geom_smooth() . R[write to console]: `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; . &#49328;&#51216;&#46020;&#51025;&#50857;2 (4&#52264;&#50896;) . - 데이터를 살펴보자. . mpg.head() . manufacturer model displ year cyl trans drv cty hwy fl class . 1 audi | a4 | 1.8 | 1999 | 4 | auto(l5) | f | 18 | 29 | p | compact | . 2 audi | a4 | 1.8 | 1999 | 4 | manual(m5) | f | 21 | 29 | p | compact | . 3 audi | a4 | 2.0 | 2008 | 4 | manual(m6) | f | 20 | 31 | p | compact | . 4 audi | a4 | 2.0 | 2008 | 4 | auto(av) | f | 21 | 30 | p | compact | . 5 audi | a4 | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | compact | . - drv (전륜, 후륜, 4륜 구동)에 따라서 데이터를 시각화 하고 싶다. . ggplot(data=mpg,mapping=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;))+geom_point(mapping=aes(size=&#39;class&#39;,color=&#39;drv&#39;),alpha=0.2) . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_size.py:48: PlotnineWarning: Using size for a discrete variable is not advised. . &lt;ggplot: (8785690381343)&gt; . 모든 $x$에 대하여 붉은색 점들이 대부분 초록선과 보라색 점들에 비하여 아래쪽에 위치하여 있음 $ to$ 4륜구동방식이 연비가 좋지 않음 | . - 객체지향적 . a1,a2 . ({&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;class&#39;}) . a3=a2.copy() . id(a1),id(a2),id(a3) . (140571012349120, 140571037030816, 140571045477168) . a1,a2,a3 . ({&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;class&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;class&#39;}) . a3[&#39;color&#39;]=&#39;drv&#39; a3[&#39;size&#39;]=&#39;class&#39; . a1,a2,a3 . ({&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;class&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;drv&#39;, &#39;size&#39;: &#39;class&#39;}) . 아래와 같이 선언해도 괜찮음 a3=aes(x=&#39;displ&#39;,y=&#39;hwy&#39;,color=&#39;drv&#39;,size=&#39;class&#39;) . | . point3=geom_point(a3) . fig+point3 . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_size.py:48: PlotnineWarning: Using size for a discrete variable is not advised. . &lt;ggplot: (8785690557928)&gt; . 앗 투명도 조절 | . point3=geom_point(a3,alpha=0.2) fig+point3 . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_size.py:48: PlotnineWarning: Using size for a discrete variable is not advised. . &lt;ggplot: (8785689555547)&gt; . - 여기에 선을 추가하여 보자. . fig+point3+sline1 . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_size.py:48: PlotnineWarning: Using size for a discrete variable is not advised. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. . &lt;ggplot: (8785689803222)&gt; . - 각 그룹별로 선을 따로 그릴수도 있을까? . a1,a2,a3 . ({&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;class&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;drv&#39;, &#39;size&#39;: &#39;class&#39;}) . a4=a2.copy() . a4[&#39;color&#39;]=&#39;drv&#39; . sline2=geom_smooth(a4) . fig+sline2+point3 . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_size.py:48: PlotnineWarning: Using size for a discrete variable is not advised. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. . &lt;ggplot: (8785668084830)&gt; . - 선의 색깔을 동일하게 하고 선의 타입을 변경하여 그룹을 표시할수도 있지 않을까? . a1,a2,a3,a4 . ({&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;class&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;drv&#39;, &#39;size&#39;: &#39;class&#39;}, {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;color&#39;: &#39;drv&#39;}) . a5=a1.copy() . a5[&#39;linetype&#39;]=&#39;drv&#39; . a5 . {&#39;x&#39;: &#39;displ&#39;, &#39;y&#39;: &#39;hwy&#39;, &#39;linetype&#39;: &#39;drv&#39;} . sline3=geom_smooth(a5,size=0.5,color=&#39;gray&#39;) . fig+point3+sline3 . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_size.py:48: PlotnineWarning: Using size for a discrete variable is not advised. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. . &lt;ggplot: (8785668124203)&gt; . fig+point3+sline3+sline1 . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_size.py:48: PlotnineWarning: Using size for a discrete variable is not advised. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. . &lt;ggplot: (8785668446973)&gt; . - 그래도 색깔로 구분하는것이 나은것 같다. . sline2=geom_smooth(a4,size=0.5,linetype=&#39;dashed&#39;) fig+point3+sline2+sline1 . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/scales/scale_size.py:48: PlotnineWarning: Using size for a discrete variable is not advised. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/smoothers.py:310: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. . &lt;ggplot: (8785668461939)&gt; . - 고차원의 변수를 표현할 수 있는 무기는 다양하다. . 산점도(포인트지옴): 점의크기, 점의형태, 점의색깔, 점의투명도 | 라인플랏(스무스지옴, 라인지옴): 선의형태, 선의색깔, 선의굵기 | . &#44208;&#47200; . - 잘 훈련한다면 여러가지 형태의 고차원 그래프를 우리도 그릴 수 있다. (마치 미나드처럼) . - 해들리위컴은 이러한 방법을 체계적으로 정리했다고 보여진다. . - 해들리위컴: 그래프는 데이터 + 지옴 + 맵핑(변수와 에스테틱간의 맵핑) + 스탯(통계) + 포지션 + 축 + 패싯그리드 7개의 조합으로 그릴수 있다. . 내생각: 지옴과 맵핑만 잘 이용해도 아주 다양한 그래프를 그릴 수 있음. | . &#54032;&#45796;&#49828;&#50640;&#49436; column&#51012; &#49440;&#53469;&#54616;&#45716; &#48169;&#48277; . import . &#50696;&#51228;1 . import numpy as np . dic={&#39;X1&#39;:np.random.normal(0,1,5), &#39;X2&#39;:np.random.normal(0,1,5), &#39;X3&#39;:np.random.normal(0,1,5)} df=pd.DataFrame(dic) df . X1 X2 X3 . 0 2.103627 | 0.017018 | -0.841906 | . 1 0.499095 | 0.560991 | -1.158361 | . 2 -0.663951 | 0.633592 | 0.500054 | . 3 -0.482697 | -1.089791 | -1.250082 | . 4 1.410367 | -0.552217 | -1.819774 | . - 방법1 . df.X1 . 0 2.103627 1 0.499095 2 -0.663951 3 -0.482697 4 1.410367 Name: X1, dtype: float64 . - 방법2 . df[&#39;X1&#39;] . 0 2.103627 1 0.499095 2 -0.663951 3 -0.482697 4 1.410367 Name: X1, dtype: float64 . - 방법3 . df[[&#39;X1&#39;]] . X1 . 0 2.103627 | . 1 0.499095 | . 2 -0.663951 | . 3 -0.482697 | . 4 1.410367 | . df[&#39;X1&#39;]는 series를 리턴하고 df[[&#39;X1&#39;]]는 dataframe을 리턴한다. | . - 방법4 . df.loc[:,&#39;X1&#39;] . 0 2.103627 1 0.499095 2 -0.663951 3 -0.482697 4 1.410367 Name: X1, dtype: float64 . - 방법5 . df.loc[:,[&#39;X1&#39;]] . X1 . 0 2.103627 | . 1 0.499095 | . 2 -0.663951 | . 3 -0.482697 | . 4 1.410367 | . df.loc[:,&#39;X1&#39;]는 series를 리턴하고 df.loc[:,[&#39;X1&#39;]]는 dataframe을 리턴한다. | . - 방법6 . df.loc[:,[True,False,False]] . X1 . 0 2.103627 | . 1 0.499095 | . 2 -0.663951 | . 3 -0.482697 | . 4 1.410367 | . 불인덱싱가능 | . - 방법7 . df.iloc[:,0] . 0 2.103627 1 0.499095 2 -0.663951 3 -0.482697 4 1.410367 Name: X1, dtype: float64 . - 방법8 . df.iloc[:,[0]] . X1 . 0 2.103627 | . 1 0.499095 | . 2 -0.663951 | . 3 -0.482697 | . 4 1.410367 | . - 방법9 . df.iloc[:,[True,False,False]] . X1 . 0 2.103627 | . 1 0.499095 | . 2 -0.663951 | . 3 -0.482697 | . 4 1.410367 | . &#52280;&#44256;&#49324;&#54637;: &#50676;&#51060;&#47492;&#51060; interger&#51068; &#44221;&#50864; . import numpy as np . _df = pd.DataFrame(np.array([[1,2,3],[3,4,5],[5,6,7]])) _df . 0 1 2 . 0 1 | 2 | 3 | . 1 3 | 4 | 5 | . 2 5 | 6 | 7 | . - 아래가 모두 가능하다. . _df[0] . 0 1 1 3 2 5 Name: 0, dtype: int64 . _df[[0]] . 0 . 0 1 | . 1 3 | . 2 5 | . _df.loc[:,0] . 0 1 1 3 2 5 Name: 0, dtype: int64 . _df.loc[:,[0]] . 0 . 0 1 | . 1 3 | . 2 5 | . _df.iloc[:,0] . 0 1 1 3 2 5 Name: 0, dtype: int64 . data . _df.iloc[:,[0]] . 0 . 0 1 | . 1 3 | . 2 5 | . &#48169;&#48277;1~9&#51032; &#50836;&#50557; (&#51228; &#49373;&#44033;) . - df.X1로 열을 선택하는게 간단하고 편리함. . 단점1: 변수이름을 알고 있어야 한다는 단점이 있음. | 단점2: 변수이름에 .이 있거나 변수이름에서 공백이 있을경우 사용할 수 없음. | . - 언급한 단점의 예시 . dic={&#39;X.1&#39;:np.random.normal(0,1,5), &#39;X.2&#39;:np.random.normal(0,1,5), &#39;X.3&#39;:np.random.normal(0,1,5)} _df=pd.DataFrame(dic) _df . X.1 X.2 X.3 . 0 -1.975447 | -0.051597 | -0.843999 | . 1 0.491894 | -0.931259 | -2.333483 | . 2 0.256984 | -1.896243 | -0.034112 | . 3 0.762072 | 1.413895 | -1.408724 | . 4 1.795115 | -0.785530 | 0.372167 | . _df[&#39;X.1&#39;] . 0 -1.975447 1 0.491894 2 0.256984 3 0.762072 4 1.795115 Name: X.1, dtype: float64 . df=pd.read_csv(&#39;https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook/master/data/movie.csv&#39;) . df . color director_name num_critic_for_reviews duration director_facebook_likes actor_3_facebook_likes actor_2_name actor_1_facebook_likes gross genres ... num_user_for_reviews language country content_rating budget title_year actor_2_facebook_likes imdb_score aspect_ratio movie_facebook_likes . 0 Color | James Cameron | 723.0 | 178.0 | 0.0 | 855.0 | Joel David Moore | 1000.0 | 760505847.0 | Action|Adventure|Fantasy|Sci-Fi | ... | 3054.0 | English | USA | PG-13 | 237000000.0 | 2009.0 | 936.0 | 7.9 | 1.78 | 33000 | . 1 Color | Gore Verbinski | 302.0 | 169.0 | 563.0 | 1000.0 | Orlando Bloom | 40000.0 | 309404152.0 | Action|Adventure|Fantasy | ... | 1238.0 | English | USA | PG-13 | 300000000.0 | 2007.0 | 5000.0 | 7.1 | 2.35 | 0 | . 2 Color | Sam Mendes | 602.0 | 148.0 | 0.0 | 161.0 | Rory Kinnear | 11000.0 | 200074175.0 | Action|Adventure|Thriller | ... | 994.0 | English | UK | PG-13 | 245000000.0 | 2015.0 | 393.0 | 6.8 | 2.35 | 85000 | . 3 Color | Christopher Nolan | 813.0 | 164.0 | 22000.0 | 23000.0 | Christian Bale | 27000.0 | 448130642.0 | Action|Thriller | ... | 2701.0 | English | USA | PG-13 | 250000000.0 | 2012.0 | 23000.0 | 8.5 | 2.35 | 164000 | . 4 NaN | Doug Walker | NaN | NaN | 131.0 | NaN | Rob Walker | 131.0 | NaN | Documentary | ... | NaN | NaN | NaN | NaN | NaN | NaN | 12.0 | 7.1 | NaN | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 4911 Color | Scott Smith | 1.0 | 87.0 | 2.0 | 318.0 | Daphne Zuniga | 637.0 | NaN | Comedy|Drama | ... | 6.0 | English | Canada | NaN | NaN | 2013.0 | 470.0 | 7.7 | NaN | 84 | . 4912 Color | NaN | 43.0 | 43.0 | NaN | 319.0 | Valorie Curry | 841.0 | NaN | Crime|Drama|Mystery|Thriller | ... | 359.0 | English | USA | TV-14 | NaN | NaN | 593.0 | 7.5 | 16.00 | 32000 | . 4913 Color | Benjamin Roberds | 13.0 | 76.0 | 0.0 | 0.0 | Maxwell Moody | 0.0 | NaN | Drama|Horror|Thriller | ... | 3.0 | English | USA | NaN | 1400.0 | 2013.0 | 0.0 | 6.3 | NaN | 16 | . 4914 Color | Daniel Hsia | 14.0 | 100.0 | 0.0 | 489.0 | Daniel Henney | 946.0 | 10443.0 | Comedy|Drama|Romance | ... | 9.0 | English | USA | PG-13 | NaN | 2012.0 | 719.0 | 6.3 | 2.35 | 660 | . 4915 Color | Jon Gunn | 43.0 | 90.0 | 16.0 | 16.0 | Brian Herzlinger | 86.0 | 85222.0 | Documentary | ... | 84.0 | English | USA | PG | 1100.0 | 2004.0 | 23.0 | 6.6 | 1.85 | 456 | . 4916 rows × 28 columns . _df.X.1 . Input In [95] _df.X.1 ^ SyntaxError: invalid syntax . &#50696;&#51228;2: &#50668;&#47084;&#44060;&#51032; &#50676;&#51012; &#49440;&#53469; . - 데이터 . dic={&#39;X1&#39;:np.random.normal(0,1,5), &#39;X2&#39;:np.random.normal(0,1,5), &#39;X3&#39;:np.random.normal(0,1,5), &#39;X4&#39;:np.random.normal(0,1,5)} df=pd.DataFrame(dic) df . X1 X2 X3 X4 . 0 -0.415989 | 1.556077 | 2.112251 | -1.501965 | . 1 1.690405 | -1.509496 | 1.295217 | -0.924515 | . 2 0.081137 | 1.899265 | 0.480557 | 0.753248 | . 3 -0.617805 | -0.262643 | -1.692317 | -1.951796 | . 4 -0.629891 | 0.616726 | -1.305438 | 0.097772 | . - 목표: 1,2,3열을 선택 . - 방법1 . df[[&#39;X1&#39;,&#39;X2&#39;,&#39;X3&#39;]] . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . - 방법2 . df.loc[:,[&#39;X1&#39;,&#39;X2&#39;,&#39;X3&#39;]] . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . - 방법3 . df.loc[:,&#39;X1&#39;:&#39;X3&#39;] . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . - 방법4 . df.loc[:,[True,True,True,False]] . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . - 방법5 . df.iloc[:,[0,1,2]] . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . - 방법6 . df.iloc[:,:3] . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . df.iloc[:,0:3] . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . df.iloc[:,range(3)] . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . - 방법7 . df.iloc[:,[True,True,True,False]] . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . (주의) loc에서의 슬라이싱은 마지막변수를 포함하지만 iloc에서는 포함하지 않음 . - 아래를 비교하라. . df.iloc[:,0:3] ## 0,1,2,3중 3은 포함되지 않는다. . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . df.loc[:,&#39;X1&#39;:&#39;X3&#39;] ## &#39;X3&#39;도 포함된다. . X1 X2 X3 . 0 -0.415989 | 1.556077 | 2.112251 | . 1 1.690405 | -1.509496 | 1.295217 | . 2 0.081137 | 1.899265 | 0.480557 | . 3 -0.617805 | -0.262643 | -1.692317 | . 4 -0.629891 | 0.616726 | -1.305438 | . - 그래서 column의 이름이 integer일 경우는 종종 매우 헷갈리는 일이 일어남 . _df = pd.DataFrame(np.array([[1,2,3,4],[3,4,5,6],[5,6,7,8]])) _df . 0 1 2 3 . 0 1 | 2 | 3 | 4 | . 1 3 | 4 | 5 | 6 | . 2 5 | 6 | 7 | 8 | . _df.loc[:,0:2] . 0 1 2 . 0 1 | 2 | 3 | . 1 3 | 4 | 5 | . 2 5 | 6 | 7 | . _df.iloc[:,0:2] . 0 1 . 0 1 | 2 | . 1 3 | 4 | . 2 5 | 6 | . . Note: 사실 이것은 일부러 헷갈리게 예제를 구성한 것이다. 실제로는 헷갈리는 상황이 그렇게 자주 발생하지 않는다. 왜냐하면 보통 위와 같은 형태의 자료는 ndarray로 처리하고 colname이 있는 경우만 데이터프레임으로 처리하기 때문. . &#50696;&#51228;3: movie data - &#53945;&#51221;&#51312;&#44148;&#50640; &#47582;&#45716; &#50676;&#51012; &#49440;&#53469; . df=pd.read_csv(&#39;https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook/master/data/movie.csv&#39;) df . color director_name num_critic_for_reviews duration director_facebook_likes actor_3_facebook_likes actor_2_name actor_1_facebook_likes gross genres ... num_user_for_reviews language country content_rating budget title_year actor_2_facebook_likes imdb_score aspect_ratio movie_facebook_likes . 0 Color | James Cameron | 723.0 | 178.0 | 0.0 | 855.0 | Joel David Moore | 1000.0 | 760505847.0 | Action|Adventure|Fantasy|Sci-Fi | ... | 3054.0 | English | USA | PG-13 | 237000000.0 | 2009.0 | 936.0 | 7.9 | 1.78 | 33000 | . 1 Color | Gore Verbinski | 302.0 | 169.0 | 563.0 | 1000.0 | Orlando Bloom | 40000.0 | 309404152.0 | Action|Adventure|Fantasy | ... | 1238.0 | English | USA | PG-13 | 300000000.0 | 2007.0 | 5000.0 | 7.1 | 2.35 | 0 | . 2 Color | Sam Mendes | 602.0 | 148.0 | 0.0 | 161.0 | Rory Kinnear | 11000.0 | 200074175.0 | Action|Adventure|Thriller | ... | 994.0 | English | UK | PG-13 | 245000000.0 | 2015.0 | 393.0 | 6.8 | 2.35 | 85000 | . 3 Color | Christopher Nolan | 813.0 | 164.0 | 22000.0 | 23000.0 | Christian Bale | 27000.0 | 448130642.0 | Action|Thriller | ... | 2701.0 | English | USA | PG-13 | 250000000.0 | 2012.0 | 23000.0 | 8.5 | 2.35 | 164000 | . 4 NaN | Doug Walker | NaN | NaN | 131.0 | NaN | Rob Walker | 131.0 | NaN | Documentary | ... | NaN | NaN | NaN | NaN | NaN | NaN | 12.0 | 7.1 | NaN | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 4911 Color | Scott Smith | 1.0 | 87.0 | 2.0 | 318.0 | Daphne Zuniga | 637.0 | NaN | Comedy|Drama | ... | 6.0 | English | Canada | NaN | NaN | 2013.0 | 470.0 | 7.7 | NaN | 84 | . 4912 Color | NaN | 43.0 | 43.0 | NaN | 319.0 | Valorie Curry | 841.0 | NaN | Crime|Drama|Mystery|Thriller | ... | 359.0 | English | USA | TV-14 | NaN | NaN | 593.0 | 7.5 | 16.00 | 32000 | . 4913 Color | Benjamin Roberds | 13.0 | 76.0 | 0.0 | 0.0 | Maxwell Moody | 0.0 | NaN | Drama|Horror|Thriller | ... | 3.0 | English | USA | NaN | 1400.0 | 2013.0 | 0.0 | 6.3 | NaN | 16 | . 4914 Color | Daniel Hsia | 14.0 | 100.0 | 0.0 | 489.0 | Daniel Henney | 946.0 | 10443.0 | Comedy|Drama|Romance | ... | 9.0 | English | USA | PG-13 | NaN | 2012.0 | 719.0 | 6.3 | 2.35 | 660 | . 4915 Color | Jon Gunn | 43.0 | 90.0 | 16.0 | 16.0 | Brian Herzlinger | 86.0 | 85222.0 | Documentary | ... | 84.0 | English | USA | PG | 1100.0 | 2004.0 | 23.0 | 6.6 | 1.85 | 456 | . 4916 rows × 28 columns . - 열의 이름을 출력하여 보자. . df.columns . Index([&#39;color&#39;, &#39;director_name&#39;, &#39;num_critic_for_reviews&#39;, &#39;duration&#39;, &#39;director_facebook_likes&#39;, &#39;actor_3_facebook_likes&#39;, &#39;actor_2_name&#39;, &#39;actor_1_facebook_likes&#39;, &#39;gross&#39;, &#39;genres&#39;, &#39;actor_1_name&#39;, &#39;movie_title&#39;, &#39;num_voted_users&#39;, &#39;cast_total_facebook_likes&#39;, &#39;actor_3_name&#39;, &#39;facenumber_in_poster&#39;, &#39;plot_keywords&#39;, &#39;movie_imdb_link&#39;, &#39;num_user_for_reviews&#39;, &#39;language&#39;, &#39;country&#39;, &#39;content_rating&#39;, &#39;budget&#39;, &#39;title_year&#39;, &#39;actor_2_facebook_likes&#39;, &#39;imdb_score&#39;, &#39;aspect_ratio&#39;, &#39;movie_facebook_likes&#39;], dtype=&#39;object&#39;) . - color ~ num_voted_user 를 뽑고 + aspect_ratio 도 추가적으로 뽑고싶다. . df.loc[:,[&#39;color&#39;:&#39;num_voted_users&#39;,&#39;aspect_ratio&#39;]] . Input In [114] df.loc[:,[&#39;color&#39;:&#39;num_voted_users&#39;,&#39;aspect_ratio&#39;]] ^ SyntaxError: invalid syntax . - (팁) 복잡한 조건은 iloc으로 쓰는게 편할때가 있다. $ to$ 그런데 df.columns 변수들이 몇번인지 알아보기 힘듬 $ to$ 아래와 같이 하면 열의 이름을 인덱스와 함께 출력할 수 있음 . pd.Series(df.columns) . 0 color 1 director_name 2 num_critic_for_reviews 3 duration 4 director_facebook_likes 5 actor_3_facebook_likes 6 actor_2_name 7 actor_1_facebook_likes 8 gross 9 genres 10 actor_1_name 11 movie_title 12 num_voted_users 13 cast_total_facebook_likes 14 actor_3_name 15 facenumber_in_poster 16 plot_keywords 17 movie_imdb_link 18 num_user_for_reviews 19 language 20 country 21 content_rating 22 budget 23 title_year 24 actor_2_facebook_likes 25 imdb_score 26 aspect_ratio 27 movie_facebook_likes dtype: object . list(range(13))+[26] . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 26] . df.iloc[:,list(range(13))+[26]] . color director_name num_critic_for_reviews duration director_facebook_likes actor_3_facebook_likes actor_2_name actor_1_facebook_likes gross genres actor_1_name movie_title num_voted_users aspect_ratio . 0 Color | James Cameron | 723.0 | 178.0 | 0.0 | 855.0 | Joel David Moore | 1000.0 | 760505847.0 | Action|Adventure|Fantasy|Sci-Fi | CCH Pounder | Avatar | 886204 | 1.78 | . 1 Color | Gore Verbinski | 302.0 | 169.0 | 563.0 | 1000.0 | Orlando Bloom | 40000.0 | 309404152.0 | Action|Adventure|Fantasy | Johnny Depp | Pirates of the Caribbean: At World&#39;s End | 471220 | 2.35 | . 2 Color | Sam Mendes | 602.0 | 148.0 | 0.0 | 161.0 | Rory Kinnear | 11000.0 | 200074175.0 | Action|Adventure|Thriller | Christoph Waltz | Spectre | 275868 | 2.35 | . 3 Color | Christopher Nolan | 813.0 | 164.0 | 22000.0 | 23000.0 | Christian Bale | 27000.0 | 448130642.0 | Action|Thriller | Tom Hardy | The Dark Knight Rises | 1144337 | 2.35 | . 4 NaN | Doug Walker | NaN | NaN | 131.0 | NaN | Rob Walker | 131.0 | NaN | Documentary | Doug Walker | Star Wars: Episode VII - The Force Awakens | 8 | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 4911 Color | Scott Smith | 1.0 | 87.0 | 2.0 | 318.0 | Daphne Zuniga | 637.0 | NaN | Comedy|Drama | Eric Mabius | Signed Sealed Delivered | 629 | NaN | . 4912 Color | NaN | 43.0 | 43.0 | NaN | 319.0 | Valorie Curry | 841.0 | NaN | Crime|Drama|Mystery|Thriller | Natalie Zea | The Following | 73839 | 16.00 | . 4913 Color | Benjamin Roberds | 13.0 | 76.0 | 0.0 | 0.0 | Maxwell Moody | 0.0 | NaN | Drama|Horror|Thriller | Eva Boehnke | A Plague So Pleasant | 38 | NaN | . 4914 Color | Daniel Hsia | 14.0 | 100.0 | 0.0 | 489.0 | Daniel Henney | 946.0 | 10443.0 | Comedy|Drama|Romance | Alan Ruck | Shanghai Calling | 1255 | 2.35 | . 4915 Color | Jon Gunn | 43.0 | 90.0 | 16.0 | 16.0 | Brian Herzlinger | 86.0 | 85222.0 | Documentary | John August | My Date with Drew | 4285 | 1.85 | . 4916 rows × 14 columns . - 다시열의 이름들을 확인 . df.columns . Index([&#39;color&#39;, &#39;director_name&#39;, &#39;num_critic_for_reviews&#39;, &#39;duration&#39;, &#39;director_facebook_likes&#39;, &#39;actor_3_facebook_likes&#39;, &#39;actor_2_name&#39;, &#39;actor_1_facebook_likes&#39;, &#39;gross&#39;, &#39;genres&#39;, &#39;actor_1_name&#39;, &#39;movie_title&#39;, &#39;num_voted_users&#39;, &#39;cast_total_facebook_likes&#39;, &#39;actor_3_name&#39;, &#39;facenumber_in_poster&#39;, &#39;plot_keywords&#39;, &#39;movie_imdb_link&#39;, &#39;num_user_for_reviews&#39;, &#39;language&#39;, &#39;country&#39;, &#39;content_rating&#39;, &#39;budget&#39;, &#39;title_year&#39;, &#39;actor_2_facebook_likes&#39;, &#39;imdb_score&#39;, &#39;aspect_ratio&#39;, &#39;movie_facebook_likes&#39;], dtype=&#39;object&#39;) . actor&#46972;&#45716; &#45800;&#50612;&#44032; &#54252;&#54632;&#46108; &#48320;&#49688;&#46308;&#47564; &#48977;&#44256;&#49910;&#45796;. . - 방법1 . df.iloc[:,list(map(lambda x : &#39;actor&#39; in x, df.columns) )] . actor_3_facebook_likes actor_2_name actor_1_facebook_likes actor_1_name actor_3_name actor_2_facebook_likes . 0 855.0 | Joel David Moore | 1000.0 | CCH Pounder | Wes Studi | 936.0 | . 1 1000.0 | Orlando Bloom | 40000.0 | Johnny Depp | Jack Davenport | 5000.0 | . 2 161.0 | Rory Kinnear | 11000.0 | Christoph Waltz | Stephanie Sigman | 393.0 | . 3 23000.0 | Christian Bale | 27000.0 | Tom Hardy | Joseph Gordon-Levitt | 23000.0 | . 4 NaN | Rob Walker | 131.0 | Doug Walker | NaN | 12.0 | . ... ... | ... | ... | ... | ... | ... | . 4911 318.0 | Daphne Zuniga | 637.0 | Eric Mabius | Crystal Lowe | 470.0 | . 4912 319.0 | Valorie Curry | 841.0 | Natalie Zea | Sam Underwood | 593.0 | . 4913 0.0 | Maxwell Moody | 0.0 | Eva Boehnke | David Chandler | 0.0 | . 4914 489.0 | Daniel Henney | 946.0 | Alan Ruck | Eliza Coupe | 719.0 | . 4915 16.0 | Brian Herzlinger | 86.0 | John August | Jon Gunn | 23.0 | . 4916 rows × 6 columns . - 방법2 . df.loc[:,list(map(lambda x : &#39;actor&#39; in x, df.columns) )] . actor_3_facebook_likes actor_2_name actor_1_facebook_likes actor_1_name actor_3_name actor_2_facebook_likes . 0 855.0 | Joel David Moore | 1000.0 | CCH Pounder | Wes Studi | 936.0 | . 1 1000.0 | Orlando Bloom | 40000.0 | Johnny Depp | Jack Davenport | 5000.0 | . 2 161.0 | Rory Kinnear | 11000.0 | Christoph Waltz | Stephanie Sigman | 393.0 | . 3 23000.0 | Christian Bale | 27000.0 | Tom Hardy | Joseph Gordon-Levitt | 23000.0 | . 4 NaN | Rob Walker | 131.0 | Doug Walker | NaN | 12.0 | . ... ... | ... | ... | ... | ... | ... | . 4911 318.0 | Daphne Zuniga | 637.0 | Eric Mabius | Crystal Lowe | 470.0 | . 4912 319.0 | Valorie Curry | 841.0 | Natalie Zea | Sam Underwood | 593.0 | . 4913 0.0 | Maxwell Moody | 0.0 | Eva Boehnke | David Chandler | 0.0 | . 4914 489.0 | Daniel Henney | 946.0 | Alan Ruck | Eliza Coupe | 719.0 | . 4915 16.0 | Brian Herzlinger | 86.0 | John August | Jon Gunn | 23.0 | . 4916 rows × 6 columns . - 방법3 . df.iloc[:,map(lambda x : &#39;actor&#39; in x, df.columns)] . actor_3_facebook_likes actor_2_name actor_1_facebook_likes actor_1_name actor_3_name actor_2_facebook_likes . 0 855.0 | Joel David Moore | 1000.0 | CCH Pounder | Wes Studi | 936.0 | . 1 1000.0 | Orlando Bloom | 40000.0 | Johnny Depp | Jack Davenport | 5000.0 | . 2 161.0 | Rory Kinnear | 11000.0 | Christoph Waltz | Stephanie Sigman | 393.0 | . 3 23000.0 | Christian Bale | 27000.0 | Tom Hardy | Joseph Gordon-Levitt | 23000.0 | . 4 NaN | Rob Walker | 131.0 | Doug Walker | NaN | 12.0 | . ... ... | ... | ... | ... | ... | ... | . 4911 318.0 | Daphne Zuniga | 637.0 | Eric Mabius | Crystal Lowe | 470.0 | . 4912 319.0 | Valorie Curry | 841.0 | Natalie Zea | Sam Underwood | 593.0 | . 4913 0.0 | Maxwell Moody | 0.0 | Eva Boehnke | David Chandler | 0.0 | . 4914 489.0 | Daniel Henney | 946.0 | Alan Ruck | Eliza Coupe | 719.0 | . 4915 16.0 | Brian Herzlinger | 86.0 | John August | Jon Gunn | 23.0 | . 4916 rows × 6 columns . - 방법4 . df.loc[:,map(lambda x : &#39;actor&#39; in x, df.columns)] . actor_3_facebook_likes actor_2_name actor_1_facebook_likes actor_1_name actor_3_name actor_2_facebook_likes . 0 855.0 | Joel David Moore | 1000.0 | CCH Pounder | Wes Studi | 936.0 | . 1 1000.0 | Orlando Bloom | 40000.0 | Johnny Depp | Jack Davenport | 5000.0 | . 2 161.0 | Rory Kinnear | 11000.0 | Christoph Waltz | Stephanie Sigman | 393.0 | . 3 23000.0 | Christian Bale | 27000.0 | Tom Hardy | Joseph Gordon-Levitt | 23000.0 | . 4 NaN | Rob Walker | 131.0 | Doug Walker | NaN | 12.0 | . ... ... | ... | ... | ... | ... | ... | . 4911 318.0 | Daphne Zuniga | 637.0 | Eric Mabius | Crystal Lowe | 470.0 | . 4912 319.0 | Valorie Curry | 841.0 | Natalie Zea | Sam Underwood | 593.0 | . 4913 0.0 | Maxwell Moody | 0.0 | Eva Boehnke | David Chandler | 0.0 | . 4914 489.0 | Daniel Henney | 946.0 | Alan Ruck | Eliza Coupe | 719.0 | . 4915 16.0 | Brian Herzlinger | 86.0 | John August | Jon Gunn | 23.0 | . 4916 rows × 6 columns . - 방법5 . df.loc[:,filter(lambda x : &#39;actor&#39; in x, df.columns)] . actor_3_facebook_likes actor_2_name actor_1_facebook_likes actor_1_name actor_3_name actor_2_facebook_likes . 0 855.0 | Joel David Moore | 1000.0 | CCH Pounder | Wes Studi | 936.0 | . 1 1000.0 | Orlando Bloom | 40000.0 | Johnny Depp | Jack Davenport | 5000.0 | . 2 161.0 | Rory Kinnear | 11000.0 | Christoph Waltz | Stephanie Sigman | 393.0 | . 3 23000.0 | Christian Bale | 27000.0 | Tom Hardy | Joseph Gordon-Levitt | 23000.0 | . 4 NaN | Rob Walker | 131.0 | Doug Walker | NaN | 12.0 | . ... ... | ... | ... | ... | ... | ... | . 4911 318.0 | Daphne Zuniga | 637.0 | Eric Mabius | Crystal Lowe | 470.0 | . 4912 319.0 | Valorie Curry | 841.0 | Natalie Zea | Sam Underwood | 593.0 | . 4913 0.0 | Maxwell Moody | 0.0 | Eva Boehnke | David Chandler | 0.0 | . 4914 489.0 | Daniel Henney | 946.0 | Alan Ruck | Eliza Coupe | 719.0 | . 4915 16.0 | Brian Herzlinger | 86.0 | John August | Jon Gunn | 23.0 | . 4916 rows × 6 columns . &#48320;&#49688;&#51060;&#47492;&#51060; s&#47196; &#45149;&#45208;&#45716; &#48320;&#49688;&#46308;&#47564; &#48977;&#44256;&#49910;&#45796;. . df.iloc[:,map(lambda x: &#39;s&#39; == x[-1],df.columns )] . num_critic_for_reviews director_facebook_likes actor_3_facebook_likes actor_1_facebook_likes gross genres num_voted_users cast_total_facebook_likes plot_keywords num_user_for_reviews actor_2_facebook_likes movie_facebook_likes . 0 723.0 | 0.0 | 855.0 | 1000.0 | 760505847.0 | Action|Adventure|Fantasy|Sci-Fi | 886204 | 4834 | avatar|future|marine|native|paraplegic | 3054.0 | 936.0 | 33000 | . 1 302.0 | 563.0 | 1000.0 | 40000.0 | 309404152.0 | Action|Adventure|Fantasy | 471220 | 48350 | goddess|marriage ceremony|marriage proposal|pi... | 1238.0 | 5000.0 | 0 | . 2 602.0 | 0.0 | 161.0 | 11000.0 | 200074175.0 | Action|Adventure|Thriller | 275868 | 11700 | bomb|espionage|sequel|spy|terrorist | 994.0 | 393.0 | 85000 | . 3 813.0 | 22000.0 | 23000.0 | 27000.0 | 448130642.0 | Action|Thriller | 1144337 | 106759 | deception|imprisonment|lawlessness|police offi... | 2701.0 | 23000.0 | 164000 | . 4 NaN | 131.0 | NaN | 131.0 | NaN | Documentary | 8 | 143 | NaN | NaN | 12.0 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 4911 1.0 | 2.0 | 318.0 | 637.0 | NaN | Comedy|Drama | 629 | 2283 | fraud|postal worker|prison|theft|trial | 6.0 | 470.0 | 84 | . 4912 43.0 | NaN | 319.0 | 841.0 | NaN | Crime|Drama|Mystery|Thriller | 73839 | 1753 | cult|fbi|hideout|prison escape|serial killer | 359.0 | 593.0 | 32000 | . 4913 13.0 | 0.0 | 0.0 | 0.0 | NaN | Drama|Horror|Thriller | 38 | 0 | NaN | 3.0 | 0.0 | 16 | . 4914 14.0 | 0.0 | 489.0 | 946.0 | 10443.0 | Comedy|Drama|Romance | 1255 | 2386 | NaN | 9.0 | 719.0 | 660 | . 4915 43.0 | 16.0 | 16.0 | 86.0 | 85222.0 | Documentary | 4285 | 163 | actress name in title|crush|date|four word tit... | 84.0 | 23.0 | 456 | . 4916 rows × 12 columns . df.loc[:,map(lambda x: &#39;s&#39; == x[-1],df.columns )] . num_critic_for_reviews director_facebook_likes actor_3_facebook_likes actor_1_facebook_likes gross genres num_voted_users cast_total_facebook_likes plot_keywords num_user_for_reviews actor_2_facebook_likes movie_facebook_likes . 0 723.0 | 0.0 | 855.0 | 1000.0 | 760505847.0 | Action|Adventure|Fantasy|Sci-Fi | 886204 | 4834 | avatar|future|marine|native|paraplegic | 3054.0 | 936.0 | 33000 | . 1 302.0 | 563.0 | 1000.0 | 40000.0 | 309404152.0 | Action|Adventure|Fantasy | 471220 | 48350 | goddess|marriage ceremony|marriage proposal|pi... | 1238.0 | 5000.0 | 0 | . 2 602.0 | 0.0 | 161.0 | 11000.0 | 200074175.0 | Action|Adventure|Thriller | 275868 | 11700 | bomb|espionage|sequel|spy|terrorist | 994.0 | 393.0 | 85000 | . 3 813.0 | 22000.0 | 23000.0 | 27000.0 | 448130642.0 | Action|Thriller | 1144337 | 106759 | deception|imprisonment|lawlessness|police offi... | 2701.0 | 23000.0 | 164000 | . 4 NaN | 131.0 | NaN | 131.0 | NaN | Documentary | 8 | 143 | NaN | NaN | 12.0 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 4911 1.0 | 2.0 | 318.0 | 637.0 | NaN | Comedy|Drama | 629 | 2283 | fraud|postal worker|prison|theft|trial | 6.0 | 470.0 | 84 | . 4912 43.0 | NaN | 319.0 | 841.0 | NaN | Crime|Drama|Mystery|Thriller | 73839 | 1753 | cult|fbi|hideout|prison escape|serial killer | 359.0 | 593.0 | 32000 | . 4913 13.0 | 0.0 | 0.0 | 0.0 | NaN | Drama|Horror|Thriller | 38 | 0 | NaN | 3.0 | 0.0 | 16 | . 4914 14.0 | 0.0 | 489.0 | 946.0 | 10443.0 | Comedy|Drama|Romance | 1255 | 2386 | NaN | 9.0 | 719.0 | 660 | . 4915 43.0 | 16.0 | 16.0 | 86.0 | 85222.0 | Documentary | 4285 | 163 | actress name in title|crush|date|four word tit... | 84.0 | 23.0 | 456 | . 4916 rows × 12 columns . &#48320;&#49688;&#51060;&#47492;&#51060; c &#54841;&#51008; d&#47196; &#49884;&#51089;&#54616;&#45716; &#48320;&#49688;&#46308;&#47564; &#48977;&#44256;&#49910;&#45796;. . df.iloc[:,map(lambda x: &#39;c&#39; == x[0] or &#39;d&#39; == x[0] ,df.columns )] . color director_name duration director_facebook_likes cast_total_facebook_likes country content_rating . 0 Color | James Cameron | 178.0 | 0.0 | 4834 | USA | PG-13 | . 1 Color | Gore Verbinski | 169.0 | 563.0 | 48350 | USA | PG-13 | . 2 Color | Sam Mendes | 148.0 | 0.0 | 11700 | UK | PG-13 | . 3 Color | Christopher Nolan | 164.0 | 22000.0 | 106759 | USA | PG-13 | . 4 NaN | Doug Walker | NaN | 131.0 | 143 | NaN | NaN | . ... ... | ... | ... | ... | ... | ... | ... | . 4911 Color | Scott Smith | 87.0 | 2.0 | 2283 | Canada | NaN | . 4912 Color | NaN | 43.0 | NaN | 1753 | USA | TV-14 | . 4913 Color | Benjamin Roberds | 76.0 | 0.0 | 0 | USA | NaN | . 4914 Color | Daniel Hsia | 100.0 | 0.0 | 2386 | USA | PG-13 | . 4915 Color | Jon Gunn | 90.0 | 16.0 | 163 | USA | PG | . 4916 rows × 7 columns . &#49689;&#51228; . movie data frame에서 &#39;face&#39;라는 단어가 포함된 변수열을 선택하라. . df.iloc[:,list(map(lambda x : &#39;face&#39; in x, df.columns) )] . director_facebook_likes actor_3_facebook_likes actor_1_facebook_likes cast_total_facebook_likes facenumber_in_poster actor_2_facebook_likes movie_facebook_likes . 0 0.0 | 855.0 | 1000.0 | 4834 | 0.0 | 936.0 | 33000 | . 1 563.0 | 1000.0 | 40000.0 | 48350 | 0.0 | 5000.0 | 0 | . 2 0.0 | 161.0 | 11000.0 | 11700 | 1.0 | 393.0 | 85000 | . 3 22000.0 | 23000.0 | 27000.0 | 106759 | 0.0 | 23000.0 | 164000 | . 4 131.0 | NaN | 131.0 | 143 | 0.0 | 12.0 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | . 4911 2.0 | 318.0 | 637.0 | 2283 | 2.0 | 470.0 | 84 | . 4912 NaN | 319.0 | 841.0 | 1753 | 1.0 | 593.0 | 32000 | . 4913 0.0 | 0.0 | 0.0 | 0 | 0.0 | 0.0 | 16 | . 4914 0.0 | 489.0 | 946.0 | 2386 | 5.0 | 719.0 | 660 | . 4915 16.0 | 16.0 | 86.0 | 163 | 0.0 | 23.0 | 456 | . 4916 rows × 7 columns .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_10_18_(6%EC%A3%BC%EC%B0%A8)_10%EC%9B%9418%EC%9D%BC.html",
            "relUrl": "/2022/04/29/_10_18_(6%EC%A3%BC%EC%B0%A8)_10%EC%9B%9418%EC%9D%BC.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "(5주차) 10월12일",
            "content": "&#50696;&#51228; (qqplot): . - 히스토그램이나 박스플랏보다 분포를 특정하기에 좋은 시각화는 없을까? . import numpy as np import matplotlib.pyplot as plt import pandas as pd import seaborn as sns from scipy import stats . np.random.seed(43052) x=np.random.normal(size=1000,loc=2,scale=1.5) y=stats.t.rvs(df=10,size=1000)/np.sqrt(10/8)*1.5 + 2 . - 우리가 관측한 $x_1, dots,x_{1000}$이 $N(2,1.5^2)$에서 나온 샘플인지 궁금하다. . - 아이디어 . (1) 관측한 값을 순서대로 나열하여 $x_{(1)},x_{(2)}, dots, x_{(1000)}$을 만든다. . x[:2] . array([2.57513073, 3.62626175]) . $x_1=2.57513073, quad x_2=3.62626175$ | . x.sort() . x[:2] . array([-2.44398446, -2.14071467]) . $x_{(1)}= -2.44398446, quad x_{(2)}=-2.14071467$ | . (2) 파이썬이나 R로 $N(2,1.5^2)$에서 1000개의 정규분포를 생성. 그리고 순서대로 나열하여 $ tilde{x}_{(1)}, tilde{x}_{(2)}, dots, tilde{x}_{(1000)}$를 만든다. . (3) $x_{(1)} approx tilde{x}_{(1)}, dots , x_{(1000)} approx tilde{x}_{(1000)}$ 이면 x는 정규분포일것 . - 그런데 $ tilde{x}_{(1)}, tilde{x}_{(2)}, dots, tilde{x}_{(1000)}$은 시뮬레이션을 할때마다 다른값이 나올테니까 불안정한 느낌이 든다. $ to$ 이론적인 값을 계산하자. . xx = (x-np.mean(x)) / np.std(x,ddof=1) xx[:2] . array([-3.05569305, -2.84275629]) . 실제우리가 관측한값 | . print(stats.norm.ppf(0.001)) print(stats.norm.ppf(0.002)) . -3.090232306167813 -2.878161739095483 . 이론적인 값 | . - 분위수 . m=[i/1000 for i in np.arange(1000)+1] . q=[] for i in range(len(m)): q=q+[stats.norm.ppf(m[i])] . q[:2] . [-3.090232306167813, -2.878161739095483] . - $xx approx q$ 을 확인하기 위해서 $(q,q)$그래프와 $(q,xx)$의 그래프를 그려서 겹쳐보자. . plt.plot(q,xx,&#39;o&#39;) plt.plot(q,q,&#39;-&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8f0021a1c0&gt;] . 해석: 점들이 주황색선 근처에 모여있을수록 정규분포에 가깝다. | . - 아래와 같이 쉽게 그릴수도 있다. (우리가 그린그림과 조금 다르게 보인다) . _ = stats.probplot(x,plot=plt) . 자세히보면 조금 다르게 그려지긴 하는데 이는 $m=( frac{1}{1000}, dots, frac{999}{1000}, frac{1000}{1000})$와 같이 계산하지 않고 약간 보정한값을 계산하기 때문임 | stats.probplot? 을 통하여 확인한 결과 아래와 같은 코드로 구현됨### 보정하는방법1 n=len(xx) m=[((i+1)-0.3175)/(n+0.365) for i in range(n)] m[-n]=0.5**(1/n) m[0]=1-m[-n] . | 프로그램에 따라서 아래와 같이 보정하는 경우도 있음### 보정하는방법2 m=[(i-3/8)/(n+1/4) for i in np.arange(1000)+1] . | 또 자세히보면 stats.probplot은 y축에 표준화전의 x값이 있음을 알 수 있음. | . - 정규분포와 t분포의 qqplot을 그려서 비교해보자. . _ = stats.probplot(x,plot=plt) # 정규분포 . 정규분포 | . _ = stats.probplot(y,plot=plt) # t분포 . t분포: 푸른점들이 대체로 붉은선위에 놓여있는듯 하지만 양끝단에서는 그렇지 않다. (중앙부근은 정규분포와 비슷하지만, 꼬리부분은 정규분포와 확실히 다르다) | 왼쪽꼬리: 이론적으로 나와야 할 값보다 더 작은값이 실제로 관측됨 | 오른쪽꼬리: 이론적으로 나와야 할 값보다 더 큰값이 실제로 관측됨 | 해석: 이 분포는 정규분포보다 두꺼운 꼬리를 가진다. | . - 서브플랏팅: 두 분포를 양옆에 나란히 비교하고 싶음 . fig , (ax1,ax2) = plt.subplots(1,2) . _ = stats.probplot(x,plot=ax1) _ = stats.probplot(y,plot=ax2) . fig . fig.set_figwidth(8) . fig . ax1.set_title(&#39;normal dist&#39;) ax2.set_title(&#39;t dist&#39;) . Text(0.5, 1.0, &#39;t dist&#39;) . fig . &#50696;&#51228;4 (boxplot, histrogram, qqplot) . - 박스플랏, 히스토그램, qqplot을 그려보자. . fig, ax =plt.subplots(2,3) . (ax1,ax2,ax3), (ax4,ax5,ax6) = ax . sns.boxplot(x,ax=ax1) sns.histplot(x,kde=True,ax=ax2) _ = stats.probplot(x,plot=ax3) sns.boxplot(y,ax=ax4) sns.histplot(y,kde=True,ax=ax5) _ = stats.probplot(y,plot=ax6) . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. warnings.warn( /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. warnings.warn( . fig . fig.set_figwidth(10) fig.set_figheight(8) fig.tight_layout() . fig . Appendix: &#48516;&#50948;&#49688;&#47484; &#44396;&#54616;&#45716; &#45796;&#50577;&#54620;&#48169;&#48277; . m=[i/1000 for i in np.arange(1000)+1] . $m= big { frac{i}{1000}: i in {1,2,3, dots,1000 } big }= big { frac{1}{1000}, frac{2}{1000}, dots, frac{1000}{1000} big }$ | . - 방법1 . q=[] for i in range(len(m)): q=q+[stats.norm.ppf(m[i])] q[:5] . [-3.090232306167813, -2.878161739095483, -2.7477813854449926, -2.6520698079021954, -2.575829303548901] . - 방법2 . q=[stats.norm.ppf(m[i]) for i in range(len(m))] . q[:5] . [-3.090232306167813, -2.878161739095483, -2.7477813854449926, -2.6520698079021954, -2.575829303548901] . - 방법3 . q=list(map(stats.norm.ppf, m)) q[:5] . [-3.090232306167813, -2.878161739095483, -2.7477813854449926, -2.6520698079021954, -2.575829303548901] . - 방법4 . stats.norm.ppf(m)[:5] . array([-3.09023231, -2.87816174, -2.74778139, -2.65206981, -2.5758293 ]) . Appendix: lambda, map . lambda . - 예제1: 사용방법 . f = lambda x,y,z : x+y+z ## lambda 입력:출력 . f(2,3,4) . 9 . - 예제2: 디폴트입력값 . x= (lambda a=&#39;fee&#39;,b=&#39;fie&#39;,c=&#39;foe&#39;: a+b+c) . x(&#39;wee&#39;) . &#39;weefiefoe&#39; . - 예제3: 람다들의 리스트가능 . l=[lambda x: x**2, lambda x: x**3, lambda x: x**4] . for f in l: print(f(2)) . 4 8 16 . - 예제4: 람다들의 딕셔너리 가능 . dct={&#39;f1&#39;: (lambda x: x+1), &#39;f2&#39;: (lambda x: x+22), &#39;f3&#39;: (lambda x: x+333)} . dct[&#39;f1&#39;](1), dct[&#39;f2&#39;](1), dct[&#39;f3&#39;](1) . (2, 23, 334) . - 예제5: 조건부 출력 . (예비학습) 문자열의 대소비교 . &#39;a&#39; &lt; &#39;b&#39; . True . &#39;c&#39; &lt; &#39;b&#39; . False . (예제시작) . lower = lambda x,y : x if x&lt;y else y . lower(&#39;a&#39;,&#39;b&#39;) . &#39;a&#39; . lower(&#39;c&#39;,&#39;b&#39;) . &#39;b&#39; . - 예제6 : lambda expression 을 return력가능 . def action(x): return (lambda y: x+y) . act = action(99) ## act는 99+y를 수행하는 함수 act2 = action(98) ## act2는 98+y를 수행하는 함수 . action은 마치 함수를 만드는 함수같다.. | . print(act(2)) print(act2(2)) . 101 100 . - 예제7: 예제6의 발전 . action = lambda x: (lambda y: x+y) . act= action(99) act2=action(98) . print(act(2)) print(act2(2)) . 101 100 . 괄호를 생략하여 선언하면 . action = lambda x: lambda y: x+y act= action(99) act2=action(98) print(act(2)) print(act2(2)) . 101 100 . map . - 예제1: 사용방법 . def inc(x): return x+1 . list(map(inc,[1,2,3,4])) . [2, 3, 4, 5] . - 예제1의 변형(람다사용) . list(map(lambda x: x+1,[1,2,3,4])) . [2, 3, 4, 5] . list(map(def inc(x): return x+1,[1,2,3,4])) . Input In [57] list(map(def inc(x): return x+1,[1,2,3,4])) ^ SyntaxError: invalid syntax . 함수명을 쓰는 자리에 lambda로 표현한 오브젝트 자체를 전달할 수 있다. $ to$ 코드가 간단하다. | . - 예제2: map과 리스트컴프리헨션 비교 . (함수선언) . f = lambda x: &#39;X&#39; in x . f(&#39;X1&#39;),f(&#39;X2&#39;),f(&#39;Y1&#39;),f(&#39;Y2&#39;) . (map) . list(map(f,[&#39;X1&#39;,&#39;X2&#39;,&#39;Y3&#39;,&#39;Y4&#39;])) . (리스트컴프리헨션과 비교) . [f(x) for x in [&#39;X1&#39;,&#39;X2&#39;,&#39;Y3&#39;,&#39;Y4&#39;]] . - 예제3: 두개의 입력을 받는 함수(pow) map, 리스트컴프리헨션 비교 . (함수소개) . pow(2,4) . (map) . list(map(pow,[2,2,2,3,3,3],[0,1,2,0,1,2])) . (리스트컴프리헨션과 비교) . [pow(x,y) for x,y in zip([2,2,2,3,3,3],[0,1,2,0,1,2])] . - 예제4: map은 (하나의 함수,다양한 입력)인 경우 사용가능 . l=[lambda x: x+1, lambda x: x+2, lambda x: x+3 ] . list(map(l,[100,200,300])) . 리스트컴프리헨션은 (다양한함수,다양한입력)이 가능함 . [l[i](x) for i,x in zip([0,1,2],[100,200,300])] . - 종합: 리스트컴프리헨션과 비교하면 (1) 반복인덱스를 쓰지 않는 장점이 있는 반면 (2) 좀 더 제약적으로 사용할 수밖에 없다는 단점이 있음 . &#50528;&#46300;&#50892;&#46300; &#53552;&#54532;&#54000; . - 시각화계의 거장 . - 터프티의 이론중 백미: 엄격한 미니멀리즘 . 최소한의 잉크로 많은 정보를 전달할 수 있다면 그것이 바로 좋은 그래프이다. | 작은 지면 내에서 잉크를 최대한 적게 써서 짧은 시간 안에 많은 영감을 주어야 한다. | . - 데이터-잉크비: 데이터를 표현하는데 들아가는 잉크의 양 / 그래픽을 인쇄하는데 들어가는 잉크의 총량 . - 차트정크 (나이젤홈즈의 그래프) . . “Lurking behind chartjunk is contempt both for information and for the audience. Chartjunk promoters imagine that numbers and details are boring, dull, and tedious, requiring ornament to enliven. Cosmetic decoration, which frequently distorts the data, will never salvage an underlying lack of content. If the numbers are boring, then you’ve got the wrong numbers (...) Worse is contempt for our audience, designing as if readers were obtuse and uncaring. In fact, consumers of graphics are often more intelligent about the information at hand than those who fabricate the data decoration (...) The operating moral premise of information design should be that our readers are alert and caring; they may be busy, eager to get on with it, but they are not stupid.” . 차트정크 = 대중을 멸시 + 데이터에 대한 모독 | 차트정크 옹호가는 숫자와 데이터가 지루하여 활기가 필요하다고 생각하는 모양이다.. | . - 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽 . . - 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽 . . - 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽 . . - 글쎼... . &#52272;&#49828;&#48120;&#45208;&#46300;&#51032; &#46020;&#54364; (&#51064;&#47448;&#50669;&#49324;&#49345; &#44032;&#51109; &#54988;&#47469;&#54620; &#49884;&#44033;&#54868;) . . - 터프티의 평 . 지금까지 그려진 최고의 통계 그래픽일지도 모른다. | 여기에서는 군대의 크기, 2차원 평면상의 위치, 군대의 이동방향, 모스코바에서 퇴각하는 동안의 여러날짜, 온도 $ to$ 6차원의 변수 | 백만번에 한번 이런 그림을 그릴수는 있겠지만 이러한 멋진 그래픽을 만드는 방법에 대한 원칙은 없다. $ to$ 미니멀리즘.. | . - 왜 우수한 그래프일까? . 자료를 파악하는 기법은 최근까지도 산점도, 막대그래프, 라인플랏에 의존 | 이러한 플랏의 단점은 고차원의 자료를 분석하기 어렵다는 것임 | 미나드는 여러그램을 그리는 방법 대신에 한 그림에서 패널을 늘리는 방법을 선택함. | . &#50696;&#51228; . x=[44,48,49,58,62,68,69,70,76,79] ## 몸무게 y=[159,160,162,165,167,162,165,175,165,172] ## 키 g= &#39;f&#39;,&#39;f&#39;,&#39;f&#39;,&#39;f&#39;,&#39;m&#39;,&#39;f&#39;,&#39;m&#39;,&#39;m&#39;,&#39;m&#39;,&#39;m&#39; df=pd.DataFrame({&#39;w&#39;:x,&#39;h&#39;:y,&#39;g&#39;:g}) . df . - 미나드의 접근방법 . sns.scatterplot(data=df,x=&#39;w&#39;,y=&#39;h&#39;,hue=&#39;g&#39;) . - 일반적인 사람들 (보통 색깔을 사용할 생각을 못한다.) . figs = sns.FacetGrid(df,col=&#39;g&#39;) figs.map (sns.scatterplot,&#39;w&#39;,&#39;h&#39;) . - 생각보다 데이터가 정리된 형태에 따라서 시각화에 대한 사고방식이 달라진다. 아래와 같은 자료를 받았다고 하자. . df1=df.query(&quot;g ==&#39;f&#39;&quot;)[[&#39;w&#39;,&#39;h&#39;]] ## 여성.csv df2=df.query(&quot;g ==&#39;m&#39;&quot;)[[&#39;w&#39;,&#39;h&#39;]] ## 남성.csv . df1 . df2 . - 데이터프레임을 바꿀 생각을 하는게 쉽지 않다. . (방법1) . df1[&#39;g&#39;]= &#39;f&#39; . df1 . df2[&#39;g&#39;]= &#39;m&#39; . df2 . pd.concat([df1,df2]) . (방법2) . df1=df.query(&quot;g ==&#39;f&#39;&quot;)[[&#39;w&#39;,&#39;h&#39;]] ## 여성.csv df2=df.query(&quot;g ==&#39;m&#39;&quot;)[[&#39;w&#39;,&#39;h&#39;]] ## 남성.csv . pd.concat([df1,df2],keys=[&#39;f&#39;,&#39;m&#39;]).reset_index().iloc[:,[0,2,3]].rename(columns={&#39;level_0&#39;:&#39;g&#39;}) . - 어려운점: (1) 센스가 없어서 색깔을 넣어서 그룹을 구분할 생각을 못함 (2) 변형해야할 데이터를 생각못함 (3) 데이터를 변형할 생각을 한다고 해도 변형하는 실제적인 코드를 구현할 수 없음 (그래서 엑셀을 킨다..) . (1) 기획력부족 -&gt; 훌륭한 시각화를 많이 볼것 | (2) 데이터프레임에 대한 이해도가 부족 -&gt; tidydata에 대한 개념 | (3) 프로그래밍 능력 부족 -&gt; 코딩공부열심히.. | . - 목표: (2) 어떠한 데이터 형태로 변형해야하는가? (3) 그러한 데이터 형태로 바꾸기 위한 pandas 숙련도 . &#49689;&#51228; . x=np.random.chisquare(df=5, size=100) . sns.histplot(x,kde=True) . - 자유도가5인 카이제곱분포에서 100개의 랜덤변수를 만들고, boxplot / histogram / qqplot . _ = stats.probplot(x,plot=plt) . fig, ax = plt.subplots(1,3) . (ax1,ax2,ax3) = ax . sns.boxplot(x,ax=ax1) sns.histplot(x,kde=True,ax=ax2) _ = stats.probplot(x,plot=ax3) . fig . fig.set_figwidth(10) fig.set_figheight(4) fig.tight_layout() . fig .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_10_12_(5%EC%A3%BC%EC%B0%A8)_10%EC%9B%9412%EC%9D%BC.html",
            "relUrl": "/2022/04/29/_10_12_(5%EC%A3%BC%EC%B0%A8)_10%EC%9B%9412%EC%9D%BC.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "(5주차) 10월12일",
            "content": "&#50696;&#51228; (qqplot): . - 히스토그램이나 박스플랏보다 분포를 특정하기에 좋은 시각화는 없을까? . import numpy as np import matplotlib.pyplot as plt import pandas as pd import seaborn as sns from scipy import stats . np.random.seed(43052) x=np.random.normal(size=1000,loc=2,scale=1.5) y=stats.t.rvs(df=10,size=1000)/np.sqrt(10/8)*1.5 + 2 . - 우리가 관측한 $x_1, dots,x_{1000}$이 $N(2,1.5^2)$에서 나온 샘플인지 궁금하다. . - 아이디어 . (1) 관측한 값을 순서대로 나열하여 $x_{(1)},x_{(2)}, dots, x_{(1000)}$을 만든다. . x[:2] . array([2.57513073, 3.62626175]) . $x_1=2.57513073, quad x_2=3.62626175$ | . x.sort() . x[:2] . array([-2.44398446, -2.14071467]) . $x_{(1)}= -2.44398446, quad x_{(2)}=-2.14071467$ | . (2) 파이썬이나 R로 $N(2,1.5^2)$에서 1000개의 정규분포를 생성. 그리고 순서대로 나열하여 $ tilde{x}_{(1)}, tilde{x}_{(2)}, dots, tilde{x}_{(1000)}$를 만든다. . (3) $x_{(1)} approx tilde{x}_{(1)}, dots , x_{(1000)} approx tilde{x}_{(1000)}$ 이면 x는 정규분포일것 . - 그런데 $ tilde{x}_{(1)}, tilde{x}_{(2)}, dots, tilde{x}_{(1000)}$은 시뮬레이션을 할때마다 다른값이 나올테니까 불안정한 느낌이 든다. $ to$ 이론적인 값을 계산하자. . xx = (x-np.mean(x)) / np.std(x,ddof=1) xx[:2] . array([-3.05569305, -2.84275629]) . 실제우리가 관측한값 | . print(stats.norm.ppf(0.001)) print(stats.norm.ppf(0.002)) . -3.090232306167813 -2.878161739095483 . 이론적인 값 | . - 분위수 . m=[i/1000 for i in np.arange(1000)+1] . q=[] for i in range(len(m)): q=q+[stats.norm.ppf(m[i])] . q[:2] . [-3.090232306167813, -2.878161739095483] . - $xx approx q$ 을 확인하기 위해서 $(q,q)$그래프와 $(q,xx)$의 그래프를 그려서 겹쳐보자. . plt.plot(q,xx,&#39;o&#39;) plt.plot(q,q,&#39;-&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f8f0021a1c0&gt;] . 해석: 점들이 주황색선 근처에 모여있을수록 정규분포에 가깝다. | . - 아래와 같이 쉽게 그릴수도 있다. (우리가 그린그림과 조금 다르게 보인다) . _ = stats.probplot(x,plot=plt) . 자세히보면 조금 다르게 그려지긴 하는데 이는 $m=( frac{1}{1000}, dots, frac{999}{1000}, frac{1000}{1000})$와 같이 계산하지 않고 약간 보정한값을 계산하기 때문임 | stats.probplot? 을 통하여 확인한 결과 아래와 같은 코드로 구현됨### 보정하는방법1 n=len(xx) m=[((i+1)-0.3175)/(n+0.365) for i in range(n)] m[-n]=0.5**(1/n) m[0]=1-m[-n] . | 프로그램에 따라서 아래와 같이 보정하는 경우도 있음### 보정하는방법2 m=[(i-3/8)/(n+1/4) for i in np.arange(1000)+1] . | 또 자세히보면 stats.probplot은 y축에 표준화전의 x값이 있음을 알 수 있음. | . - 정규분포와 t분포의 qqplot을 그려서 비교해보자. . _ = stats.probplot(x,plot=plt) # 정규분포 . 정규분포 | . _ = stats.probplot(y,plot=plt) # t분포 . t분포: 푸른점들이 대체로 붉은선위에 놓여있는듯 하지만 양끝단에서는 그렇지 않다. (중앙부근은 정규분포와 비슷하지만, 꼬리부분은 정규분포와 확실히 다르다) | 왼쪽꼬리: 이론적으로 나와야 할 값보다 더 작은값이 실제로 관측됨 | 오른쪽꼬리: 이론적으로 나와야 할 값보다 더 큰값이 실제로 관측됨 | 해석: 이 분포는 정규분포보다 두꺼운 꼬리를 가진다. | . - 서브플랏팅: 두 분포를 양옆에 나란히 비교하고 싶음 . fig , (ax1,ax2) = plt.subplots(1,2) . _ = stats.probplot(x,plot=ax1) _ = stats.probplot(y,plot=ax2) . fig . fig.set_figwidth(8) . fig . ax1.set_title(&#39;normal dist&#39;) ax2.set_title(&#39;t dist&#39;) . Text(0.5, 1.0, &#39;t dist&#39;) . fig . &#50696;&#51228;4 (boxplot, histrogram, qqplot) . - 박스플랏, 히스토그램, qqplot을 그려보자. . fig, ax =plt.subplots(2,3) . (ax1,ax2,ax3), (ax4,ax5,ax6) = ax . sns.boxplot(x,ax=ax1) sns.histplot(x,kde=True,ax=ax2) _ = stats.probplot(x,plot=ax3) sns.boxplot(y,ax=ax4) sns.histplot(y,kde=True,ax=ax5) _ = stats.probplot(y,plot=ax6) . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. warnings.warn( /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. warnings.warn( . fig . fig.set_figwidth(10) fig.set_figheight(8) fig.tight_layout() . fig . Appendix: &#48516;&#50948;&#49688;&#47484; &#44396;&#54616;&#45716; &#45796;&#50577;&#54620;&#48169;&#48277; . m=[i/1000 for i in np.arange(1000)+1] . $m= big { frac{i}{1000}: i in {1,2,3, dots,1000 } big }= big { frac{1}{1000}, frac{2}{1000}, dots, frac{1000}{1000} big }$ | . - 방법1 . q=[] for i in range(len(m)): q=q+[stats.norm.ppf(m[i])] q[:5] . [-3.090232306167813, -2.878161739095483, -2.7477813854449926, -2.6520698079021954, -2.575829303548901] . - 방법2 . q=[stats.norm.ppf(m[i]) for i in range(len(m))] . q[:5] . [-3.090232306167813, -2.878161739095483, -2.7477813854449926, -2.6520698079021954, -2.575829303548901] . - 방법3 . q=list(map(stats.norm.ppf, m)) q[:5] . [-3.090232306167813, -2.878161739095483, -2.7477813854449926, -2.6520698079021954, -2.575829303548901] . - 방법4 . stats.norm.ppf(m)[:5] . array([-3.09023231, -2.87816174, -2.74778139, -2.65206981, -2.5758293 ]) . Appendix: lambda, map . lambda . - 예제1: 사용방법 . f = lambda x,y,z : x+y+z ## lambda 입력:출력 . f(2,3,4) . 9 . - 예제2: 디폴트입력값 . x= (lambda a=&#39;fee&#39;,b=&#39;fie&#39;,c=&#39;foe&#39;: a+b+c) . x(&#39;wee&#39;) . &#39;weefiefoe&#39; . - 예제3: 람다들의 리스트가능 . l=[lambda x: x**2, lambda x: x**3, lambda x: x**4] . for f in l: print(f(2)) . 4 8 16 . - 예제4: 람다들의 딕셔너리 가능 . dct={&#39;f1&#39;: (lambda x: x+1), &#39;f2&#39;: (lambda x: x+22), &#39;f3&#39;: (lambda x: x+333)} . dct[&#39;f1&#39;](1), dct[&#39;f2&#39;](1), dct[&#39;f3&#39;](1) . (2, 23, 334) . - 예제5: 조건부 출력 . (예비학습) 문자열의 대소비교 . &#39;a&#39; &lt; &#39;b&#39; . True . &#39;c&#39; &lt; &#39;b&#39; . False . (예제시작) . lower = lambda x,y : x if x&lt;y else y . lower(&#39;a&#39;,&#39;b&#39;) . &#39;a&#39; . lower(&#39;c&#39;,&#39;b&#39;) . &#39;b&#39; . - 예제6 : lambda expression 을 return력가능 . def action(x): return (lambda y: x+y) . act = action(99) ## act는 99+y를 수행하는 함수 act2 = action(98) ## act2는 98+y를 수행하는 함수 . action은 마치 함수를 만드는 함수같다.. | . print(act(2)) print(act2(2)) . 101 100 . - 예제7: 예제6의 발전 . action = lambda x: (lambda y: x+y) . act= action(99) act2=action(98) . print(act(2)) print(act2(2)) . 101 100 . 괄호를 생략하여 선언하면 . action = lambda x: lambda y: x+y act= action(99) act2=action(98) print(act(2)) print(act2(2)) . 101 100 . map . - 예제1: 사용방법 . def inc(x): return x+1 . list(map(inc,[1,2,3,4])) . [2, 3, 4, 5] . - 예제1의 변형(람다사용) . list(map(lambda x: x+1,[1,2,3,4])) . [2, 3, 4, 5] . list(map(def inc(x): return x+1,[1,2,3,4])) . Input In [57] list(map(def inc(x): return x+1,[1,2,3,4])) ^ SyntaxError: invalid syntax . 함수명을 쓰는 자리에 lambda로 표현한 오브젝트 자체를 전달할 수 있다. $ to$ 코드가 간단하다. | . - 예제2: map과 리스트컴프리헨션 비교 . (함수선언) . f = lambda x: &#39;X&#39; in x . f(&#39;X1&#39;),f(&#39;X2&#39;),f(&#39;Y1&#39;),f(&#39;Y2&#39;) . (map) . list(map(f,[&#39;X1&#39;,&#39;X2&#39;,&#39;Y3&#39;,&#39;Y4&#39;])) . (리스트컴프리헨션과 비교) . [f(x) for x in [&#39;X1&#39;,&#39;X2&#39;,&#39;Y3&#39;,&#39;Y4&#39;]] . - 예제3: 두개의 입력을 받는 함수(pow) map, 리스트컴프리헨션 비교 . (함수소개) . pow(2,4) . (map) . list(map(pow,[2,2,2,3,3,3],[0,1,2,0,1,2])) . (리스트컴프리헨션과 비교) . [pow(x,y) for x,y in zip([2,2,2,3,3,3],[0,1,2,0,1,2])] . - 예제4: map은 (하나의 함수,다양한 입력)인 경우 사용가능 . l=[lambda x: x+1, lambda x: x+2, lambda x: x+3 ] . list(map(l,[100,200,300])) . 리스트컴프리헨션은 (다양한함수,다양한입력)이 가능함 . [l[i](x) for i,x in zip([0,1,2],[100,200,300])] . - 종합: 리스트컴프리헨션과 비교하면 (1) 반복인덱스를 쓰지 않는 장점이 있는 반면 (2) 좀 더 제약적으로 사용할 수밖에 없다는 단점이 있음 . &#50528;&#46300;&#50892;&#46300; &#53552;&#54532;&#54000; . - 시각화계의 거장 . - 터프티의 이론중 백미: 엄격한 미니멀리즘 . 최소한의 잉크로 많은 정보를 전달할 수 있다면 그것이 바로 좋은 그래프이다. | 작은 지면 내에서 잉크를 최대한 적게 써서 짧은 시간 안에 많은 영감을 주어야 한다. | . - 데이터-잉크비: 데이터를 표현하는데 들아가는 잉크의 양 / 그래픽을 인쇄하는데 들어가는 잉크의 총량 . - 차트정크 (나이젤홈즈의 그래프) . . “Lurking behind chartjunk is contempt both for information and for the audience. Chartjunk promoters imagine that numbers and details are boring, dull, and tedious, requiring ornament to enliven. Cosmetic decoration, which frequently distorts the data, will never salvage an underlying lack of content. If the numbers are boring, then you’ve got the wrong numbers (...) Worse is contempt for our audience, designing as if readers were obtuse and uncaring. In fact, consumers of graphics are often more intelligent about the information at hand than those who fabricate the data decoration (...) The operating moral premise of information design should be that our readers are alert and caring; they may be busy, eager to get on with it, but they are not stupid.” . 차트정크 = 대중을 멸시 + 데이터에 대한 모독 | 차트정크 옹호가는 숫자와 데이터가 지루하여 활기가 필요하다고 생각하는 모양이다.. | . - 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽 . . - 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽 . . - 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽 . . - 글쎼... . &#52272;&#49828;&#48120;&#45208;&#46300;&#51032; &#46020;&#54364; (&#51064;&#47448;&#50669;&#49324;&#49345; &#44032;&#51109; &#54988;&#47469;&#54620; &#49884;&#44033;&#54868;) . . - 터프티의 평 . 지금까지 그려진 최고의 통계 그래픽일지도 모른다. | 여기에서는 군대의 크기, 2차원 평면상의 위치, 군대의 이동방향, 모스코바에서 퇴각하는 동안의 여러날짜, 온도 $ to$ 6차원의 변수 | 백만번에 한번 이런 그림을 그릴수는 있겠지만 이러한 멋진 그래픽을 만드는 방법에 대한 원칙은 없다. $ to$ 미니멀리즘.. | . - 왜 우수한 그래프일까? . 자료를 파악하는 기법은 최근까지도 산점도, 막대그래프, 라인플랏에 의존 | 이러한 플랏의 단점은 고차원의 자료를 분석하기 어렵다는 것임 | 미나드는 여러그램을 그리는 방법 대신에 한 그림에서 패널을 늘리는 방법을 선택함. | . &#50696;&#51228; . x=[44,48,49,58,62,68,69,70,76,79] ## 몸무게 y=[159,160,162,165,167,162,165,175,165,172] ## 키 g= &#39;f&#39;,&#39;f&#39;,&#39;f&#39;,&#39;f&#39;,&#39;m&#39;,&#39;f&#39;,&#39;m&#39;,&#39;m&#39;,&#39;m&#39;,&#39;m&#39; df=pd.DataFrame({&#39;w&#39;:x,&#39;h&#39;:y,&#39;g&#39;:g}) . df . - 미나드의 접근방법 . sns.scatterplot(data=df,x=&#39;w&#39;,y=&#39;h&#39;,hue=&#39;g&#39;) . - 일반적인 사람들 (보통 색깔을 사용할 생각을 못한다.) . figs = sns.FacetGrid(df,col=&#39;g&#39;) figs.map (sns.scatterplot,&#39;w&#39;,&#39;h&#39;) . - 생각보다 데이터가 정리된 형태에 따라서 시각화에 대한 사고방식이 달라진다. 아래와 같은 자료를 받았다고 하자. . df1=df.query(&quot;g ==&#39;f&#39;&quot;)[[&#39;w&#39;,&#39;h&#39;]] ## 여성.csv df2=df.query(&quot;g ==&#39;m&#39;&quot;)[[&#39;w&#39;,&#39;h&#39;]] ## 남성.csv . df1 . df2 . - 데이터프레임을 바꿀 생각을 하는게 쉽지 않다. . (방법1) . df1[&#39;g&#39;]= &#39;f&#39; . df1 . df2[&#39;g&#39;]= &#39;m&#39; . df2 . pd.concat([df1,df2]) . (방법2) . df1=df.query(&quot;g ==&#39;f&#39;&quot;)[[&#39;w&#39;,&#39;h&#39;]] ## 여성.csv df2=df.query(&quot;g ==&#39;m&#39;&quot;)[[&#39;w&#39;,&#39;h&#39;]] ## 남성.csv . pd.concat([df1,df2],keys=[&#39;f&#39;,&#39;m&#39;]).reset_index().iloc[:,[0,2,3]].rename(columns={&#39;level_0&#39;:&#39;g&#39;}) . - 어려운점: (1) 센스가 없어서 색깔을 넣어서 그룹을 구분할 생각을 못함 (2) 변형해야할 데이터를 생각못함 (3) 데이터를 변형할 생각을 한다고 해도 변형하는 실제적인 코드를 구현할 수 없음 (그래서 엑셀을 킨다..) . (1) 기획력부족 -&gt; 훌륭한 시각화를 많이 볼것 | (2) 데이터프레임에 대한 이해도가 부족 -&gt; tidydata에 대한 개념 | (3) 프로그래밍 능력 부족 -&gt; 코딩공부열심히.. | . - 목표: (2) 어떠한 데이터 형태로 변형해야하는가? (3) 그러한 데이터 형태로 바꾸기 위한 pandas 숙련도 . &#49689;&#51228; . x=np.random.chisquare(df=5, size=100) . sns.histplot(x,kde=True) . - 자유도가5인 카이제곱분포에서 100개의 랜덤변수를 만들고, boxplot / histogram / qqplot . _ = stats.probplot(x,plot=plt) . fig, ax = plt.subplots(1,3) . (ax1,ax2,ax3) = ax . sns.boxplot(x,ax=ax1) sns.histplot(x,kde=True,ax=ax2) _ = stats.probplot(x,plot=ax3) . fig . fig.set_figwidth(10) fig.set_figheight(4) fig.tight_layout() . fig .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_10_12_(5%EC%A3%BC%EC%B0%A8)_10%EC%9B%9412%EC%9D%BC.html",
            "relUrl": "/2022/04/29/_10_12_(5%E1%84%8C%E1%85%AE%E1%84%8E%E1%85%A1)_10%E1%84%8B%E1%85%AF%E1%86%AF12%E1%84%8B%E1%85%B5%E1%86%AF.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "(4주차) 10월5일",
            "content": "matplotlib&#47196; (&#51652;&#51676; &#50612;&#47157;&#44172;) &#44536;&#47548;&#51012; &#44536;&#47532;&#45716; &#48169;&#48277; . &#50640;&#51228;1: &#50529;&#49884;&#51592;&#47484; &#51060;&#50857;&#54620; &#54540;&#46991; . - 목표: plt.plot() 을 사용하지 않고 아래 그림을 그려보자. . import matplotlib.pyplot as plt plt.plot([1,2,3],&#39;or&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb28ed6a0&gt;] . - 구조: axis $ subset$ axes $ subset$ figure . https://matplotlib.org/stable/gallery/showcase/anatomy.html#sphx-glr-gallery-showcase-anatomy-py | . - 전략: 그림을 만들고 (도화지를 준비) $ to$ 액시즈를 만들고 (네모틀을 만든다) $ to$ 액시즈에 그림을 그린다. (.plot()을 이용) . - 우선 그림객체를 생성한다. . fig = plt.figure() # 도화지를 준비한다. . &lt;Figure size 432x288 with 0 Axes&gt; . fig # 현재 도화지상태를 체크 . &lt;Figure size 432x288 with 0 Axes&gt; . 그림객체를 출력해봐야 아무것도 나오지 않는다. (아무것도 없으니까..) | . fig.add_axes() ## 액시즈를 fig에 추가하라. fig.axes ## 현재 fig에 있는 액시즈 정보 . fig.axes # 현재 네모틀 상태를 체크 . [] . fig.add_axes([0,0,1,1]) # 도화지안에 (0,0) 위치에 길이가 (1,1) 인 네모틀을 만든다. . &lt;Axes:&gt; . fig.axes # 현재 네모틀 상태를 체크 --&gt; 네모틀이 하나 있음. . [&lt;Axes:&gt;] . fig # 현재도화지 상태 체크 --&gt; 도화지에 (하나의) 네모틀이 잘 들어가 있음 . axs1=fig.axes[0] ## 첫번째 액시즈 . axs1.plot([1,2,3],&#39;or&#39;) # 첫번쨰 액시즈에 접근하여 그림을 그림 . [&lt;matplotlib.lines.Line2D at 0x7fccb2a49a60&gt;] . fig #현재 도화지 상태 체크 --&gt; 그림이 잘 그려짐 . &#50696;&#51228;2: &#50529;&#49884;&#51592;&#47484; &#51060;&#50857;&#54620; &#49436;&#48652;&#54540;&#46991; (&#48169;&#48277;1) . - 목표: subplot . fig # 현재 도화지 출력 . - 액시즈추가 . fig.add_axes([1,0,1,1]) . &lt;Axes:&gt; . fig.axes . [&lt;Axes:&gt;, &lt;Axes:&gt;] . fig . axs2=fig.axes[1] ## 두번째 액시즈 . - 두번째 액시즈에 그림그림 . axs2.plot([1,2,3],&#39;ok&#39;) ## 두번째 액시즈에 그림그림 . [&lt;matplotlib.lines.Line2D at 0x7fccb2cfad60&gt;] . fig ## 현재 도화지 체크 . - 첫번째 액시즈에 그림추가 . axs1.plot([1,2,3],&#39;--&#39;) ### 액시즈1에 점선추가 . [&lt;matplotlib.lines.Line2D at 0x7fccb2e5b250&gt;] . fig ## 현재 도화지 체크 . &#50696;&#51228;3: &#50529;&#49884;&#51592;&#47484; &#51060;&#50857;&#54616;&#50668; &#49436;&#48652;&#54540;&#46991; (&#48169;&#48277;2) . - 예제2의 레이아웃이 좀 아쉽다. . - 다시 그려보자. . fig = plt.figure() . &lt;Figure size 432x288 with 0 Axes&gt; . fig.axes . [] . fig.subplots(1,2) . array([&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;], dtype=object) . fig.axes . [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;] . ax1,ax2 = fig.axes . ax1.plot([1,2,3],&#39;or&#39;) ax2.plot([1,2,3],&#39;ob&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb30098e0&gt;] . fig . 그림이 좀 좁은것 같다. (도화지를 늘려보자) | . fig.set_figwidth(10) . fig . ax1.plot([1,2,3],&#39;--&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb3009f10&gt;] . fig . &#50696;&#51228;4: &#50529;&#49884;&#51592;&#47484; &#51060;&#50857;&#54616;&#50668; 2$ times$2 &#49436;&#48652;&#54540;&#46991; &#44536;&#47532;&#44592; . fig = plt.figure() fig.axes . [] . &lt;Figure size 432x288 with 0 Axes&gt; . fig.subplots(2,2) fig.axes . [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;] . ax1,ax2,ax3,ax4=fig.axes . ax1.plot([1,2,3],&#39;ob&#39;) ax2.plot([1,2,3],&#39;or&#39;) ax3.plot([1,2,3],&#39;ok&#39;) ax4.plot([1,2,3],&#39;oy&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb316e550&gt;] . fig . &#50696;&#51228;5: plt.subplots()&#47484; &#51060;&#50857;&#54616;&#50668; 2$ times$2 &#49436;&#48652;&#54540;&#46991; (&#48373;&#49845;) . x=[1,2,3,4] y=[1,2,4,3] _, axs = plt.subplots(2,2) axs[0,0].plot(x,y,&#39;o:r&#39;) axs[0,1].plot(x,y,&#39;Xb&#39;) axs[1,0].plot(x,y,&#39;xm&#39;) axs[1,1].plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb3415220&gt;] . - 단계적으로 코드를 실행하고 싶을때 . x=[1,2,3,4] y=[1,2,4,3] . _, axs = plt.subplots(2,2) . axs[0,0].plot(x,y,&#39;o:r&#39;) axs[0,1].plot(x,y,&#39;Xb&#39;) axs[1,0].plot(x,y,&#39;xm&#39;) axs[1,1].plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb36b3eb0&gt;] . 어? 그림을 볼려면 어떻게 하지? | . _ . 이렇게 하면된다. | . - 단계적으로 그림을 그릴경우에는 도화지객체를 fig라는 변수로 명시하여 받는것이 가독성이 좋다. . x=[1,2,3,4] y=[1,2,4,3] . fig, axs = plt.subplots(2,2) . axs[0,0].plot(x,y,&#39;o:r&#39;) axs[0,1].plot(x,y,&#39;Xb&#39;) axs[1,0].plot(x,y,&#39;xm&#39;) axs[1,1].plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb38b4310&gt;] . fig # 현재 도화지 확인 . &#50696;&#51228;6: plt.subplots()&#47484; 2$ times$2 subplot &#44536;&#47532;&#44592; -- &#50529;&#49884;&#51592;&#47484; &#44033;&#44033; &#48320;&#49688;&#47749;&#51004;&#47196; &#51200;&#51109; . x=[1,2,3,4] y=[1,2,4,3] fig, axs = plt.subplots(2,2) . ax1,ax2,ax3,ax4 =axs . ValueError Traceback (most recent call last) Input In [46], in &lt;module&gt; -&gt; 1 ax1,ax2,ax3,ax4 =axs ValueError: not enough values to unpack (expected 4, got 2) . (ax1,ax2), (ax3,ax4) = axs . ax1.plot(x,y,&#39;o:r&#39;) ax2.plot(x,y,&#39;Xb&#39;) ax3.plot(x,y,&#39;xm&#39;) ax4.plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb3c5ca90&gt;] . fig . &#50696;&#51228;7: plt.subplots()&#47484; &#51060;&#50857;&#54616;&#50668; 2$ times$2 &#49436;&#48652;&#54540;&#46991; &#44536;&#47532;&#44592; -- fig.axes&#50640;&#49436; &#51217;&#44540;! . fig, _ = plt.subplots(2,2) . fig.axes . [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;] . ax1, ax2, ax3, ax4= fig.axes . ax1.plot(x,y,&#39;o:r&#39;) ax2.plot(x,y,&#39;Xb&#39;) ax3.plot(x,y,&#39;xm&#39;) ax4.plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb47098e0&gt;] . fig . - 예제7, 예제4와 비교해볼것: 거의 비슷함 . - matplotlib은 그래프를 쉽게 그릴수도 있지만 어렵게 그릴수도 있다. . - 오브젝트를 컨트르로 하기 어려우므로 여러가지 축약버전이 존재함. . 사실 그래서 서브플랏을 그리는 방법 1,2,3... 와 같은 식으로 정리하여 암기하기에는 무리가 있다. | . - 원리를 꺠우치면 다양한 방법을 자유자재로 쓸 수 있음. (자유도가 높음) . &#51228;&#47785;&#49444;&#51221; . &#50696;&#51228;1: plt.plot() . x=[1,2,3] y=[1,2,2] . plt.plot(x,y) plt.title(&#39;title&#39;) . Text(0.5, 1.0, &#39;title&#39;) . &#50696;&#51228;2: &#50529;&#49884;&#51592;&#47484; &#51060;&#50857; . fig = plt.figure() fig.subplots() . &lt;AxesSubplot:&gt; . ax1=fig.axes[0] . ax1.set_title(&#39;title&#39;) . Text(0.5, 1.0, &#39;title&#39;) . fig . - 문법을 잘 이해했으면 각 서브플랏의 제목을 설정하는 방법도 쉽게 알 수 있다. . &#50696;&#51228;3: subplot&#50640;&#49436; &#44033;&#44033;&#51032; &#51228;&#47785;&#49444;&#51221; . fig, ax = plt.subplots(2,2) . (ax1,ax2),(ax3,ax4) =ax . ax1.set_title(&#39;title1&#39;) ax2.set_title(&#39;title2&#39;) ax3.set_title(&#39;title3&#39;) ax4.set_title(&#39;title4&#39;) . Text(0.5, 1.0, &#39;title4&#39;) . fig . - 보기싫음 $ to$ 서브플랏의 레이아웃 재정렬 . fig.tight_layout() # 외우세요.. . &#50696;&#51228;4: &#50529;&#49884;&#51592;&#51032; &#51228;&#47785; + Figure&#51228;&#47785; . fig.suptitle(&#39;sup title&#39;) . Text(0.5, 0.98, &#39;sup title&#39;) . fig . fig.tight_layout() . fig . &#52629;&#48276;&#50948;&#49444;&#51221; . &#50696;&#51228;1 . x=[1,2,3] y=[4,5,6] . plt.plot(x,y,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb4ba2760&gt;] . plt.plot(x,y,&#39;o&#39;) plt.xlim(-1,5) plt.ylim(3,7) . (3.0, 7.0) . &#50696;&#51228;2 . fig = plt.figure() fig.subplots() . &lt;AxesSubplot:&gt; . ax1=fig.axes[0] . import numpy as np . ax1.plot(np.random.normal(size=100),&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb4e9fa00&gt;] . fig . ax1.set_xlim(-10,110) ax1.set_ylim(-5,5) . (-5.0, 5.0) . fig . &#53685;&#44228;&#50696;&#51228; . - 여러가지 경우의 산점도와 표본상관계수 . &#50696;&#51228;1 . np.random.seed(43052) x1=np.linspace(-1,1,100,endpoint=True) y1=x1**2+np.random.normal(scale=0.1,size=100) . plt.plot(x1,y1,&#39;o&#39;) plt.title(&#39;y=x**2&#39;) . Text(0.5, 1.0, &#39;y=x**2&#39;) . np.corrcoef(x1,y1) . array([[1. , 0.00688718], [0.00688718, 1. ]]) . - (표본)상관계수의 값이 0에 가까운 것은 두 변수의 직선관계가 약한것을 의미한 것이지 두 변수 사이에 아무런 함수관계가 없다는 것을 의미하는 것은 아니다. . &#50696;&#51228;2 . - 아래와 같은 자료를 고려하자. . np.random.seed(43052) x2=np.random.uniform(low=-1,high=1,size=100000) y2=np.random.uniform(low=-1,high=1,size=100000) . plt.plot(x2,y2,&#39;.&#39;) plt.title(&#39;rect&#39;) . Text(0.5, 1.0, &#39;rect&#39;) . np.corrcoef(x2,y2) . array([[1. , 0.00521001], [0.00521001, 1. ]]) . &#50696;&#51228;3 . np.random.seed(43052) _x3=np.random.uniform(low=-1,high=1,size=100000) _y3=np.random.uniform(low=-1,high=1,size=100000) . plt.plot(_x3,_y3,&#39;.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb58110d0&gt;] . radius = _x3**2+_y3**2 . x3=_x3[radius&lt;1] y3=_y3[radius&lt;1] plt.plot(_x3,_y3,&#39;.&#39;) plt.plot(x3,y3,&#39;.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb5f2da30&gt;] . plt.plot(x3,y3,&#39;.&#39;) plt.title(&#39;circ&#39;) . Text(0.5, 1.0, &#39;circ&#39;) . np.corrcoef(x3,y3) . array([[ 1. , -0.00362687], [-0.00362687, 1. ]]) . &#49689;&#51228; 1 . - 예제1,2,3 을 하나의 figure안에 subplot 으로 그려보기 (1$ times$3 행렬처럼 그릴것) . fig, _ = plt.subplots(1,3) . fig.axes . [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;] . ax1, ax2, ax3 = fig.axes . np.random.seed(43052) x1=np.linspace(-1,1,100,endpoint=True) y1=x1**2+np.random.normal(scale=0.1,size=100) . np.random.seed(43052) x2=np.random.uniform(low=-1,high=1,size=100000) y2=np.random.uniform(low=-1,high=1,size=100000) . np.random.seed(43052) _x3=np.random.uniform(low=-1,high=1,size=100000) _y3=np.random.uniform(low=-1,high=1,size=100000) . radius = _x3**2+_y3**2 . x3=_x3[radius&lt;1] y3=_y3[radius&lt;1] . ax1.plot(x1,y1,&#39;.&#39;) ax2.plot(x2,y2,&#39;.&#39;) ax3.plot(_x3,_y3,&#39;.&#39;) ax3.plot(x3,y3,&#39;.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb6d510a0&gt;] . ax1.set_title(&#39;y=x**2&#39;) ax2.set_title(&#39;rect&#39;) ax3.set_title(&#39;circ&#39;) . Text(0.5, 1.0, &#39;circ&#39;) . fig . fig.set_figwidth(14) . fig . &#50696;&#51228;2~3&#51004;&#47196; &#50508;&#50500;&#48372;&#45716; &#46160; &#48320;&#49688;&#51032; &#46021;&#47549;&#49457; . - 예제2,3에 대하여 아래와 같은 절차를 고려하여 보자. . (1) $X in [-h,h]$일 경우 $Y$의 분포를 생각해보자. 그리고 히스토그램을 그려보자. . (2) $X in [0.9-h,0.9+h]$일 경우 $Y$의 분포를 생각해보자. 그리고 히스토그램을 그려보자. . (3) (1)-(2)를 비교해보자. . - 그림으로 살펴보자. . h=0.05 plt.hist(y2[(x2&gt; -h )*(x2&lt; h )]) . (array([508., 527., 450., 512., 500., 521., 500., 515., 494., 506.]), array([-9.99973293e-01, -7.99983163e-01, -5.99993034e-01, -4.00002904e-01, -2.00012774e-01, -2.26437887e-05, 1.99967486e-01, 3.99957616e-01, 5.99947746e-01, 7.99937876e-01, 9.99928006e-01]), &lt;BarContainer object of 10 artists&gt;) . h=0.05 _,axs= plt.subplots(2,2) axs[0,0].hist(y2[(x2&gt; -h )*(x2&lt; h )]) axs[0,1].hist(y2[(x2&gt; 0.9-h )*(x2&lt; 0.9+h )]) axs[1,0].hist(y3[(x3&gt; -h )*(x3&lt; h )]) axs[1,1].hist(y3[(x3&gt; 0.9-h )*(x3&lt; 0.9+h )]) . (array([105., 194., 256., 259., 262., 270., 244., 245., 188., 64.]), array([-0.5171188 , -0.41349885, -0.30987891, -0.20625896, -0.10263902, 0.00098093, 0.10460087, 0.20822082, 0.31184076, 0.41546071, 0.51908066]), &lt;BarContainer object of 10 artists&gt;) . - 축의범위를 조절하여보자. . h=0.05 _,axs= plt.subplots(2,2) axs[0,0].hist(y2[(x2&gt; -h )*(x2&lt; h )]) axs[0,0].set_xlim(-1.1,1.1) axs[0,1].hist(y2[(x2&gt; 0.9-h )*(x2&lt; 0.9+h )]) axs[0,1].set_xlim(-1.1,1.1) axs[1,0].hist(y3[(x3&gt; -h )*(x3&lt; h )]) axs[1,0].set_xlim(-1.1,1.1) axs[1,1].hist(y3[(x3&gt; 0.9-h )*(x3&lt; 0.9+h )]) axs[1,1].set_xlim(-1.1,1.1) . (-1.1, 1.1) . &#50696;&#51228;4 . np.random.seed(43052) x4=np.random.normal(size=10000) y4=np.random.normal(size=10000) . plt.plot(x4,y4,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb81c7880&gt;] . plt.plot(x4,y4,&#39;.&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fccb8331d60&gt;] . - 디자인적인 측면에서 보면 올바른 시각화라 볼 수 없다. (이 그림이 밀도를 왜곡시킨다) . - 아래와 같은 그림이 더 우수하다. (밀도를 표현하기 위해 투명도라는 개념을 도입) . plt.scatter(x4,y4,alpha=0.01) . &lt;matplotlib.collections.PathCollection at 0x7fccb82766d0&gt; . np.corrcoef(x4,y4) . array([[ 1. , -0.01007718], [-0.01007718, 1. ]]) . h=0.05 fig, _ = plt.subplots(3,3) . fig.tight_layout() . fig . fig.set_figwidth(10) fig.set_figheight(10) fig . fig.axes . [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;] . k=np.linspace(-2,2,9) k . array([-2. , -1.5, -1. , -0.5, 0. , 0.5, 1. , 1.5, 2. ]) . h . 0.05 . h=0.2 for i in range(9): fig.axes[i].hist(y4[(x4&gt;k[i]-h) * (x4&lt;k[i]+h)]) . fig . &#49689;&#51228; 2 . plt.scatter(x4,y4,alpha=0.01) . &lt;matplotlib.collections.PathCollection at 0x7fccb913c580&gt; . - 이 그림의 색깔을 붉은색으로 바꿔서 그려보자. (주의: 수업시간에 알려주지 않은 방법임) . plt.scatter(x4,y4,alpha=0.01, color = &#39;r&#39;) . &lt;matplotlib.collections.PathCollection at 0x7fccb99f0940&gt; . maplotlib + seaborn . import matplotlib.pyplot as plt import numpy as np import seaborn as sns . x=[44,48,49,58,62,68,69,70,76,79] # 몸무게 y=[159,160,162,165,167,162,165,175,165,172] #키 g=&#39;F&#39;,&#39;F&#39;,&#39;F&#39;,&#39;F&#39;,&#39;F&#39;,&#39;M&#39;,&#39;M&#39;,&#39;M&#39;,&#39;M&#39;,&#39;M&#39; . plt.plot(x,y,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fcc9b514100&gt;] . sns.scatterplot(x=x,y=y,hue=g) . &lt;AxesSubplot:&gt; . - 두 그림을 나란히 겹쳐 그릴수 있을까? . fig, (ax1,ax2) = plt.subplots(1,2) ax1.plot(x,y,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fcc9b74e160&gt;] . sns.scatterplot(x=x,y=y,hue=g,ax=ax2) . &lt;AxesSubplot:&gt; . fig . fig.set_figwidth(8) . fig . ax1.set_title(&#39;matplotlib&#39;) ax2.set_title(&#39;seaborn&#39;) . Text(0.5, 1.0, &#39;seaborn&#39;) . fig . - 마치 matplotlib에 seaborn을 plugin하듯이 사용할 수 있다. . matplotlib vs seaborn . - 디자인이 예쁜 패키지를 선택하여 하나만 공부하는 것은 그렇게 좋은 전략이 아니다. . sns.set_theme() . plt.plot([1,2,3],[3,4,5],&#39;or&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fcc9c0f57c0&gt;] . &#50696;&#51228; . - 아래와 같은 자료가 있다고 하자. . np.random.seed(43052) x=np.random.normal(size=1000,loc=2,scale=1.5) . - 이 자료가 정규분포를 따르는지 어떻게 체크할 수 있을까? . plt.hist(x) . (array([ 10., 24., 99., 176., 232., 222., 165., 53., 16., 3.]), array([-2.44398446, -1.53832428, -0.6326641 , 0.27299608, 1.17865626, 2.08431645, 2.98997663, 3.89563681, 4.80129699, 5.70695718, 6.61261736]), &lt;BarContainer object of 10 artists&gt;) . - 종모양이므로 정규분포인듯 하다. . - 밀도추정곡선이 있었으면 좋겠다. (KDE로 추정) $ to$ seaborn을 활용하여 그려보자. . sns.histplot(x,kde=True) . &lt;AxesSubplot:ylabel=&#39;Count&#39;&gt; . - 종모양인것 같다. . - 그렇다면 아래는 어떤가? . np.random.seed(43052) from scipy import stats . y=stats.t.rvs(10,size=1000) . sns.histplot(y,kde=True) . &lt;AxesSubplot:ylabel=&#39;Count&#39;&gt; . - 종모양이다..? . - 비교 . fig, (ax1,ax2) = plt.subplots(1,2) sns.histplot(x,kde=True,ax=ax1) sns.histplot(y,kde=True,ax=ax2) . &lt;AxesSubplot:ylabel=&#39;Count&#39;&gt; . xx= (x-np.mean(x)) / np.std(x,ddof=1) yy= (y-np.mean(y)) / np.std(y,ddof=1) fig, (ax1,ax2) = plt.subplots(1,2) sns.histplot(xx,kde=True,ax=ax1) sns.histplot(yy,kde=True,ax=ax2) . &lt;AxesSubplot:ylabel=&#39;Count&#39;&gt; . xx= (x-np.mean(x)) / np.std(x,ddof=1) yy= (y-np.mean(y)) / np.std(y,ddof=1) fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2) ax1.boxplot(xx) sns.histplot(xx,kde=True,ax=ax2) ax3.boxplot(yy) sns.histplot(yy,kde=True,ax=ax4) . &lt;AxesSubplot:ylabel=&#39;Count&#39;&gt; . fig.tight_layout() . fig . - 주의: 아래와 같이 해석하면 잘못된 해석이다. . $y$ 히스토그램을 그려보니 모양이 종모양이다. $ to$ $y$는 정규분포이다 | . - 관찰: boxplot을 그려보니 $y$의 꼬리가 정규분포보다 두꺼워 보인다. . &#49689;&#51228;3 . sns.set_theme(style=&quot;whitegrid&quot;, palette=&quot;pastel&quot;) plt.plot([1,2,3],[3,4,5],&#39;or&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fcc9d6ac520&gt;] . xx= (x-np.mean(x)) / np.std(x,ddof=1) yy= (y-np.mean(y)) / np.std(y,ddof=1) fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2) ax1.boxplot(xx) sns.histplot(xx,kde=True,ax=ax2) ax3.boxplot(yy) sns.histplot(yy,kde=True,ax=ax4) . &lt;AxesSubplot:ylabel=&#39;Count&#39;&gt; . fig.tight_layout() . fig .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_10_05_(4%EC%A3%BC%EC%B0%A8)_10%EC%9B%945%EC%9D%BC.html",
            "relUrl": "/2022/04/29/_10_05_(4%EC%A3%BC%EC%B0%A8)_10%EC%9B%945%EC%9D%BC.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "(3주차) 9월27일",
            "content": "(&#51648;&#45212;&#44053;&#51032;&#45432;&#53944; &#48372;&#52649;) &#51060;&#48120;&#51648; &#51088;&#47308;&#50640; &#45824;&#54620; &#51060;&#54644; . - 흑백이미지 . 차원: 세로픽셀수 $ times$ 가로픽셀수 | 값: 0~255 (값이 클수록 흰색) | . - 칼라이미지 . 차원: 세로픽셀수 $ times$ 가로픽셀수 $ times$ 3 | 값: 0~255 (값이 클수록 진한빨강, 진한파랑, 진한녹색) | . import cv2 as cv . hani=cv.imread(&#39;2021-08-25-Hani01.jpeg&#39;) . import matplotlib.pyplot as plt plt.imshow(hani) . &lt;matplotlib.image.AxesImage at 0x7fc40c2001c0&gt; . hani.shape . (218, 165, 3) . import numpy as np hani_red=np.zeros_like(hani) hani_green=np.zeros_like(hani) hani_blue=np.zeros_like(hani) hani_red[:,:,0]=hani[:,:,0] hani_green[:,:,1]=hani[:,:,1] hani_blue[:,:,2]=hani[:,:,2] . plt.imshow(hani_red) . &lt;matplotlib.image.AxesImage at 0x7fc40c3b6760&gt; . plt.imshow(hani_green) . &lt;matplotlib.image.AxesImage at 0x7fc40c4cdcd0&gt; . plt.imshow(hani_blue) . &lt;matplotlib.image.AxesImage at 0x7fc409669e50&gt; . plt.imshow(hani_blue+hani_red) . &lt;matplotlib.image.AxesImage at 0x7fc4096cce20&gt; . plt.imshow(hani_blue+hani_green) . &lt;matplotlib.image.AxesImage at 0x7fc40c60ef10&gt; . plt.imshow(hani_red+hani_green) . &lt;matplotlib.image.AxesImage at 0x7fc40c701e80&gt; . plt.imshow(hani_red+hani_green+hani_blue) . &lt;matplotlib.image.AxesImage at 0x7fc40c8422b0&gt; . &#49328;&#51216;&#46020; (scatter plot) . import matplotlib.pyplot as plt . - 산점도: 산점도는 직교 좌표계(도표)를 이용해 좌표상의 점들을 표시함으로써 두 개 변수 간의 관계를 나타내는 그래프 방법 . ref: https://ko.wikipedia.org/wiki/%EC%82%B0%EC%A0%90%EB%8F%84 | . x=[1,2,3,4] y=[2,3,5,5] plt.plot(x,y,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc40c917b20&gt;] . - 산점도는 보통 $X$와 $Y$의 관계를 알고 싶을 경우 그린다. . &#50696;&#51228;: &#47800;&#47924;&#44172;&#50752; &#53412; . - 아래와 같은 자료를 수집하였다고 하자. . 몸무게=[44,48,49,58,62,68,69,70,76,79] | 키=[159,160,162,165,167,162,165,175,165,172] | . x=[44,48,49,58,62,68,69,70,76,79] y=[159,160,162,165,167,162,165,175,165,172] . plt.plot(x,y,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc40c9e8580&gt;] . 키가 큰 사람일수록 몸무게도 많이 나간다. (반대도 성립) | 키와 몸무게는 관계가 있어보인다. (정비례관계) | . - 얼만큼 정비례 인지? . 이 질문에 대답하기 위해서는 상관계수의 개념을 알아야 한다. | 상관계수에 대한 개념은 산점도를 이해함에 있어서 핵심개념이다. | . &#49345;&#44288;&#44228;&#49688; (&#44036;&#45800;&#54620; &#47532;&#48624;) . - (표본)상관계수 . $$r= frac{ sum_{i=1}^{n}(x_i- bar{x})(y_i- bar{y})}{ sqrt{ sum_{i=1}^{n}(x_i- bar{x})^2 sum_{i=1}^{n}(y_i- bar{y})^2}}$$ . - 복잡해보이지만 아무튼 (1) 분자를 계산하고 (2) 분모를 계산하고 (3) 분자를 분모로 나누면 된다. . - 분모를 계산했다고 치자. 계산한 값을 상수 $c$라고 생각하자. 이 값을 분자의 sum안에 넣으면... . $$r= sum_{i=1}^{n} frac{1}{c}(x_i- bar{x})(y_i- bar{y})$$ . - 이 식을 정리하면 . $$r= sum_{i=1}^{n} Bigg( frac{(x_i- bar{x})}{ sqrt{ sum_{i=1}^{n}(x_i- bar{x})^2}} frac{(y_i- bar{y})}{ sqrt{ sum_{i=1}^{n}(y_i- bar{y})^2}} Bigg)$$ . - 편의상 다음과 같이 정의하자. $ tilde{x}_i = frac{(x_i- bar{x})}{ sqrt{ sum_{i=1}^{n}(x_i- bar{x})^2}}$, $ tilde{y}_i = frac{(y_i- bar{y})}{ sqrt{ sum_{i=1}^{n}(y_i- bar{y})^2}}$ . - 결국 $r$은 아래와 같은 모양이다. . $$r= sum_{i=1}^{n} tilde{x}_i tilde{y}_i$$ . - 의미? . import numpy as np x=np.array(x) y=np.array(y) . plt.plot(x,y,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc40cacf460&gt;] . plt.plot(x-np.mean(x), y-np.mean(y),&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc40cb50df0&gt;] . - $a= sqrt{ sum_{i=1}^{n}(x_i- bar{x})^2}, b= sqrt{ sum_{i=1}^{n}(y_i- bar{y})^2}$ . a=np.sqrt(np.sum((x-np.mean(x))**2)) b=np.sqrt(np.sum((y-np.mean(y))**2)) a,b . (36.58004920718396, 15.218409903797438) . $a&gt;b$ 이므로 $ {x_i }$들이 $ {y_i }$들 보다 좀 더 퍼져있다. (=평균근처에 몰려있지 않다) | . - 사실 $a,b$는 아래와 같이 계산할 수 있다. . $a= sqrt{n} times{ tt np.std(x)}$ . $b= sqrt{n} times{ tt np.std(y)}$ . n=len(x) np.sqrt(n)*np.std(x), np.sqrt(n)*np.std(y) . (36.58004920718397, 15.21840990379744) . ${ tt np.std(x)}= sqrt{ frac{1}{n} sum_{i=1}^{n}(x_i- bar{x})^2}$ | ${ tt np.std(y)}= sqrt{ frac{1}{n} sum_{i=1}^{n}(y_i- bar{y})^2}$ | . . Note: ${ tt np.std(x,ddof=1)}= sqrt{ frac{1}{n-1} sum_{i=1}^{n}(x_i- bar{x})^2}$ . - 이제 $( tilde{x}_i, tilde{y}_i)$를 그려보자. . xx= (x-np.mean(x))/a yy= (y-np.mean(y))/b plt.plot(xx,yy,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc40cc9a730&gt;] . 평균도 비슷하고 퍼진정도도 비슷하다. | . - 질문1: $r$의 값이 양수인가? 음수인가? . plotly 사용하여 그려보자. . import plotly.express as px from IPython.display import HTML fig=px.scatter(x=xx, y=yy) HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False)) . . . $ tilde{x}_i$, $ tilde{y}_i$ 를 곱한값이 양수인것과 음수인것을 체크해보자. | 양수인쪽이 많은지 음수인쪽이 많은지 생각해보자. | $r= sum_{i=1}^{n} tilde{x}_i tilde{y}_i$ 의 부호는? | . - 질문2: 아래와 같은 두개의 데이터set이 있다고 하자. . x1=np.arange(0,10,0.1) y1=x1+np.random.normal(loc=0,scale=1.0,size=len(x1)) . plt.plot(x1,y1,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc40f2353d0&gt;] . x2=np.arange(0,10,0.1) y2=x2+np.random.normal(loc=0,scale=7.0,size=len(x2)) plt.plot(x2,y2,&#39;x&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc40f2f8430&gt;] . plt.plot(x1,y1,&#39;o&#39;) plt.plot(x2,y2,&#39;x&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc40f36aa00&gt;] . 각 데이터셋의 표준상관계수를 각각 $r_1$(파란색), $r_2$(주황색)라고 하자. . (1) $r_1$, $r_2$의 부호는 양수인가? 음수인가? . (2) $r_1,r_2$의 값중 어떠한 값이 더 절대값이 큰가? . n=len(x1) xx1= (x1-np.mean(x1)) / (np.std(x1) * np.sqrt(n)) yy1= (y1-np.mean(y1)) / (np.std(y1) * np.sqrt(n)) xx2= (x2-np.mean(x2)) / (np.std(x2) * np.sqrt(n)) yy2= (y2-np.mean(y2)) / (np.std(y2) * np.sqrt(n)) . plt.plot(xx1,yy1,&#39;o&#39;) ## 파란색 plt.plot(xx2,yy2,&#39;x&#39;) ## 주황색 . [&lt;matplotlib.lines.Line2D at 0x7fc40f4a55e0&gt;] . sum(xx1*yy1), sum(xx2*yy2) . (0.9398346679700766, 0.4703010623963018) . &#49689;&#51228;1 . - 임의의 이미지를 cv.imread() 로 불러온뒤에 아래와 같이 blue+green의 조합으로 이미지를 변경해볼것 . plt.imshow(hani_blue+hani_green) . &lt;matplotlib.image.AxesImage at 0x7fc40f52f0a0&gt; . maru=cv.imread(&#39;maru_img.jpeg&#39;) maru=cv.cvtColor(maru, cv.COLOR_BGR2RGB) . import matplotlib.pyplot as plt plt.imshow(maru) . &lt;matplotlib.image.AxesImage at 0x7fc40f6a9fd0&gt; . import numpy as np maru_red=np.zeros_like(maru) maru_green=np.zeros_like(maru) maru_blue=np.zeros_like(maru) maru_red[:,:,0]=maru[:,:,0] maru_green[:,:,1]=maru[:,:,1] maru_blue[:,:,2]=maru[:,:,2] . plt.imshow(maru_green) . &lt;matplotlib.image.AxesImage at 0x7fc40f752ee0&gt; . plt.imshow(maru_blue) . &lt;matplotlib.image.AxesImage at 0x7fc41021e9d0&gt; . plt.imshow(maru_blue+maru_green) . &lt;matplotlib.image.AxesImage at 0x7fc4111c7460&gt; . &#46972;&#51064;&#54540;&#46991;&#51012; &#44536;&#47532;&#45716; &#48169;&#48277; . import matplotlib.pyplot as plt x=[1,2,3,4] y=[1,2,4,3] plt.plot(x,y) . [&lt;matplotlib.lines.Line2D at 0x7fc41164d160&gt;] . matplotlib&#50640;&#49436; &#49328;&#51216;&#46020;&#50752; &#46972;&#51064;&#54540;&#46991; &#44536;&#47532;&#44592; (&#51333;&#54633;) . - plt.plot()를 사용하면 산점도와 라인플랏을 다양한 조합으로 쉽고 편리하게 그릴수 있음 . x=[1,2,3,4] y=[1,2,4,3] plt.plot(x,y,&#39;o:r&#39;) # 20정도의 점의 모양, 4개의 선의모양, 8개의 색깔 . [&lt;matplotlib.lines.Line2D at 0x7fc41176b400&gt;] . &#50668;&#47084;&#44536;&#47548;&#51012; &#44536;&#47532;&#44592; . (1) &#44217;&#52432;&#44536;&#47532;&#44592; . import numpy as np x=np.arange(-5,5,0.1) y=2*x+np.random.normal(loc=0,scale=1,size=100) plt.plot(x,y,&#39;.b&#39;) plt.plot(x,2*x,&#39;--r&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc41184f070&gt;] . (2) &#46384;&#47196;&#44536;&#47532;&#44592; - subplots . x=[1,2,3,4] y=[1,2,4,3] _, axs = plt.subplots(2,2) axs[0,0].plot(x,y,&#39;o:r&#39;) axs[0,1].plot(x,y,&#39;Xb&#39;) axs[1,0].plot(x,y,&#39;xm&#39;) axs[1,1].plot(x,y,&#39;.--k&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc4119fe3d0&gt;] . plt.subplots?? . Signature: plt.subplots( nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw, ) Source: def subplots(nrows=1, ncols=1, *, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw): &#34;&#34;&#34; Create a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call. Parameters - nrows, ncols : int, default: 1 Number of rows/columns of the subplot grid. sharex, sharey : bool or {&#39;none&#39;, &#39;all&#39;, &#39;row&#39;, &#39;col&#39;}, default: False Controls sharing of properties among x (*sharex*) or y (*sharey*) axes: - True or &#39;all&#39;: x- or y-axis will be shared among all subplots. - False or &#39;none&#39;: each subplot x- or y-axis will be independent. - &#39;row&#39;: each subplot row will share an x- or y-axis. - &#39;col&#39;: each subplot column will share an x- or y-axis. When subplots have a shared x-axis along a column, only the x tick labels of the bottom subplot are created. Similarly, when subplots have a shared y-axis along a row, only the y tick labels of the first column subplot are created. To later turn other subplots&#39; ticklabels on, use `~matplotlib.axes.Axes.tick_params`. When subplots have a shared axis that has units, calling `~matplotlib.axis.Axis.set_units` will update each axis with the new units. squeeze : bool, default: True - If True, extra dimensions are squeezed out from the returned array of `~matplotlib.axes.Axes`: - if only one subplot is constructed (nrows=ncols=1), the resulting single Axes object is returned as a scalar. - for Nx1 or 1xM subplots, the returned object is a 1D numpy object array of Axes objects. - for NxM, subplots with N&gt;1 and M&gt;1 are returned as a 2D array. - If False, no squeezing at all is done: the returned Axes object is always a 2D array containing Axes instances, even if it ends up being 1x1. subplot_kw : dict, optional Dict with keywords passed to the `~matplotlib.figure.Figure.add_subplot` call used to create each subplot. gridspec_kw : dict, optional Dict with keywords passed to the `~matplotlib.gridspec.GridSpec` constructor used to create the grid the subplots are placed on. **fig_kw All additional keyword arguments are passed to the `.pyplot.figure` call. Returns - fig : `~.figure.Figure` ax : `.axes.Axes` or array of Axes *ax* can be either a single `~matplotlib.axes.Axes` object or an array of Axes objects if more than one subplot was created. The dimensions of the resulting array can be controlled with the squeeze keyword, see above. Typical idioms for handling the return value are:: # using the variable ax for single a Axes fig, ax = plt.subplots() # using the variable axs for multiple Axes fig, axs = plt.subplots(2, 2) # using tuple unpacking for multiple Axes fig, (ax1, ax2) = plt.subplots(1, 2) fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2) The names ``ax`` and pluralized ``axs`` are preferred over ``axes`` because for the latter it&#39;s not clear if it refers to a single `~.axes.Axes` instance or a collection of these. See Also -- .pyplot.figure .pyplot.subplot .pyplot.axes .Figure.subplots .Figure.add_subplot Examples -- :: # First create some toy data: x = np.linspace(0, 2*np.pi, 400) y = np.sin(x**2) # Create just a figure and only one subplot fig, ax = plt.subplots() ax.plot(x, y) ax.set_title(&#39;Simple plot&#39;) # Create two subplots and unpack the output array immediately f, (ax1, ax2) = plt.subplots(1, 2, sharey=True) ax1.plot(x, y) ax1.set_title(&#39;Sharing Y axis&#39;) ax2.scatter(x, y) # Create four polar axes and access them through the returned array fig, axs = plt.subplots(2, 2, subplot_kw=dict(projection=&#34;polar&#34;)) axs[0, 0].plot(x, y) axs[1, 1].scatter(x, y) # Share a X axis with each column of subplots plt.subplots(2, 2, sharex=&#39;col&#39;) # Share a Y axis with each row of subplots plt.subplots(2, 2, sharey=&#39;row&#39;) # Share both X and Y axes with all subplots plt.subplots(2, 2, sharex=&#39;all&#39;, sharey=&#39;all&#39;) # Note that this is the same as plt.subplots(2, 2, sharex=True, sharey=True) # Create figure number 10 with a single subplot # and clears it if it already exists. fig, ax = plt.subplots(num=10, clear=True) &#34;&#34;&#34; fig = figure(**fig_kw) axs = fig.subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey, squeeze=squeeze, subplot_kw=subplot_kw, gridspec_kw=gridspec_kw) return fig, axs File: ~/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/matplotlib/pyplot.py Type: function . subplots의 리턴값이 (fig,axs) 이 나오게된다. 우리는 뒤의 axs만 관심이 있으므로 앞의 fig는 _로 처리한다. | . Anscombe&#39;s quartet . - 교과서에 나오는 그림임. . - 교훈: 데이터를 분석하기 전에 항상 시각화를 하라. . x = [10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5] y1 = [8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68] y2 = [9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74] y3 = [7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73] x4 = [8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8] y4 = [6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.50, 5.56, 7.91, 6.89] . _, axs = plt.subplots(2,2) axs[0,0].plot(x,y1,&#39;o&#39;) axs[0,1].plot(x,y2,&#39;o&#39;) axs[1,0].plot(x,y3,&#39;o&#39;) axs[1,1].plot(x4,y4,&#39;o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc411d21c40&gt;] . - 상관계수를 잠깐 복습해보자. . 상관계수는 -1 ~ 1 사이의 값을 가진다. (코쉬슈바르츠 부등식을 사용하여 증명가능) | 완전한 직선이라면 상관계수가 1 또는 -1이다. | 상관계수가 1에 가까우면 양의 상관관계에 있다고 말하고 -1에 가까우면 음의 상관관계에 있다고 말한다. | . - 의문: 자료의 모양이 직선모양에 가까우면 상관계수가 큰것이 맞나? . $x,y$ 값이 모두 큰 하나의 관측치가 상관계수값을 키울 수 있지 않나? | . - 상관계수가 좋은것은 맞나? (=상관계수는 두 변수의 관계를 설명하기에 충분히 적절한 통계량인가?) . n=len(x) # xtilde = (x-np.mean(x)) / (np.std(x)*np.sqrt(n)) y1tilde = (y1-np.mean(y1)) / (np.std(y1)*np.sqrt(n)) . sum(xtilde*y1tilde) . 0.81642051634484 . np.corrcoef(x,y1) . array([[1. , 0.81642052], [0.81642052, 1. ]]) . np.corrcoef([x,y1,y2,y3]) . array([[1. , 0.81642052, 0.81623651, 0.81628674], [0.81642052, 1. , 0.7500054 , 0.46871668], [0.81623651, 0.7500054 , 1. , 0.58791933], [0.81628674, 0.46871668, 0.58791933, 1. ]]) . np.corrcoef([x4,y4]) . array([[1. , 0.81652144], [0.81652144, 1. ]]) . - 위의 4개의 그림에 대한 상관계수는 모두 같다. (0.81652) . - 상관계수는 두 변수의 관계를 설명하기에 부적절하다. . 상관계수는 1번그림과 같이 두 변수가 선형관계에 있을때 그 정도를 나타내는 통계량일뿐이다. | 선형관계가 아닌것처럼 보이는 자료에서는 상관계수를 계산할수는 있겠으나 의미가 없다. | . - 교훈2: 기본적인 통계량들은 실제자료를 분석하기에 부적절할수 있다. (=통계량은 적절한 가정이 동반되어야 의미가 있다) . . Note: 통계학자는 (1) 적절한 가정을 수학적인 언어로 정의하고 (2) 그 가정하에서 통계량이 의미있다는 것을 증명해야 한다. (3) 그리고 그 결과를 시각화하여 설득한다. . &#49689;&#51228;2 . - 앤스콤의 플랏을 붉은색을 사용하여 그려보기! . x = [10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5] y1 = [8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68] y2 = [9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74] y3 = [7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73] x4 = [8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8] y4 = [6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.50, 5.56, 7.91, 6.89] . _, axs = plt.subplots(2,2) axs[0,0].plot(x,y1,&#39;or&#39;) axs[0,1].plot(x,y2,&#39;or&#39;) axs[1,0].plot(x,y3,&#39;or&#39;) axs[1,1].plot(x4,y4,&#39;or&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fc4113081f0&gt;] .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_09_27_(3%EC%A3%BC%EC%B0%A8)_9%EC%9B%9427%EC%9D%BC.html",
            "relUrl": "/2022/04/29/_09_27_(3%EC%A3%BC%EC%B0%A8)_9%EC%9B%9427%EC%9D%BC.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "(2주차) 9월13일",
            "content": "Histogram Equalization, HE . - ref: https://en.wikipedia.org/wiki/Histogram_equalization . - 히스토그램 평활화: 이미지의 명암대비 개선 . !pip install opencv-python . import cv2 as cv import matplotlib.pyplot as plt import pandas as pd . img = cv.imread(&#39;Unequalized_Hawkes_Bay_NZ.jpg&#39;,0) . plt.imshow(img,cmap=&#39;gray&#39;,vmin=0,vmax=255) plt.colorbar() . &lt;matplotlib.colorbar.Colorbar at 0x7fe0ade287f0&gt; . - 이미지자료는 사실 0~255 사이의 어떠한 숫자들이 포함된 매트릭스일 뿐이다. . img . array([[127, 145, 149, ..., 168, 167, 166], [165, 152, 143, ..., 168, 169, 168], [171, 145, 140, ..., 156, 154, 151], ..., [147, 132, 134, ..., 146, 145, 144], [146, 130, 132, ..., 146, 145, 144], [145, 128, 129, ..., 146, 145, 144]], dtype=uint8) . 확인: 이미지가 있다고 믿었던 img는 그냥 넘파이 매트릭스 | 위의 매트릭스에 있는 숫자들을 색깔로 표현하여 값이 클수록 하얗게, 값이 작을수록 검게 그린다. 극단적으로 0은 검은색, 255는 흰색이다. | . - 이미지가 넘파이 매트릭스일 뿐이라는 것을 판다스를 활용하면 더 잘 시각화하여 이해할 수 있다. . plt.imshow(img[200:300,400:500],cmap=&#39;gray&#39;,vmin=0,vmax=255) . &lt;matplotlib.image.AxesImage at 0x7fe0ae2e6e20&gt; . df=pd.DataFrame(img) df.iloc[200:300,400:500].style.set_properties(**{&#39;font-size&#39;:&#39;10pt&#39;}).background_gradient(&#39;gray&#39;,vmin=0,vmax=255) . &nbsp; 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 . 200 155 | 155 | 151 | 149 | 152 | 152 | 151 | 152 | 152 | 152 | 152 | 153 | 154 | 155 | 157 | 158 | 164 | 157 | 150 | 148 | 146 | 143 | 139 | 138 | 138 | 140 | 142 | 140 | 138 | 137 | 137 | 137 | 131 | 142 | 147 | 143 | 143 | 150 | 153 | 151 | 149 | 148 | 146 | 143 | 141 | 141 | 142 | 143 | 143 | 143 | 140 | 138 | 137 | 138 | 136 | 133 | 133 | 134 | 133 | 131 | 128 | 127 | 129 | 131 | 128 | 129 | 132 | 129 | 130 | 129 | 125 | 131 | 128 | 128 | 128 | 130 | 132 | 133 | 132 | 131 | 137 | 136 | 135 | 138 | 140 | 133 | 127 | 129 | 132 | 130 | 130 | 132 | 135 | 135 | 134 | 134 | 137 | 138 | 137 | 134 | . 201 139 | 148 | 152 | 149 | 145 | 142 | 147 | 156 | 150 | 152 | 154 | 154 | 153 | 153 | 155 | 157 | 158 | 159 | 155 | 149 | 144 | 142 | 139 | 136 | 138 | 139 | 140 | 139 | 137 | 136 | 136 | 137 | 141 | 140 | 139 | 141 | 147 | 152 | 152 | 150 | 151 | 150 | 149 | 147 | 145 | 143 | 143 | 143 | 141 | 142 | 142 | 141 | 141 | 141 | 138 | 134 | 133 | 132 | 132 | 131 | 130 | 131 | 133 | 135 | 128 | 128 | 132 | 130 | 132 | 131 | 126 | 132 | 129 | 129 | 128 | 129 | 130 | 132 | 132 | 133 | 137 | 135 | 132 | 133 | 134 | 129 | 126 | 130 | 129 | 129 | 131 | 133 | 134 | 133 | 134 | 136 | 136 | 137 | 137 | 135 | . 202 138 | 145 | 149 | 149 | 149 | 144 | 138 | 139 | 144 | 148 | 153 | 155 | 153 | 152 | 153 | 155 | 153 | 158 | 157 | 147 | 140 | 140 | 139 | 136 | 137 | 135 | 135 | 137 | 137 | 135 | 134 | 136 | 142 | 138 | 139 | 145 | 147 | 144 | 145 | 151 | 150 | 150 | 151 | 150 | 149 | 147 | 145 | 143 | 140 | 140 | 140 | 140 | 140 | 141 | 139 | 135 | 133 | 131 | 129 | 128 | 129 | 130 | 132 | 133 | 128 | 128 | 131 | 131 | 134 | 133 | 128 | 133 | 132 | 132 | 131 | 130 | 129 | 131 | 133 | 135 | 133 | 132 | 129 | 129 | 132 | 131 | 133 | 140 | 135 | 136 | 137 | 137 | 134 | 131 | 131 | 134 | 135 | 136 | 136 | 136 | . 203 152 | 151 | 148 | 150 | 156 | 152 | 141 | 134 | 137 | 141 | 147 | 151 | 152 | 152 | 153 | 154 | 152 | 155 | 153 | 144 | 137 | 138 | 139 | 139 | 134 | 130 | 130 | 134 | 135 | 133 | 133 | 136 | 133 | 132 | 137 | 146 | 147 | 141 | 141 | 147 | 146 | 147 | 148 | 149 | 150 | 149 | 147 | 145 | 143 | 142 | 140 | 137 | 137 | 139 | 139 | 137 | 136 | 133 | 129 | 127 | 127 | 128 | 128 | 128 | 129 | 127 | 130 | 129 | 133 | 134 | 130 | 136 | 136 | 136 | 134 | 132 | 130 | 131 | 133 | 135 | 132 | 133 | 132 | 133 | 137 | 137 | 140 | 147 | 144 | 143 | 142 | 140 | 137 | 133 | 134 | 136 | 136 | 136 | 135 | 135 | . 204 155 | 156 | 153 | 151 | 153 | 153 | 152 | 155 | 141 | 141 | 142 | 144 | 147 | 149 | 151 | 151 | 153 | 152 | 149 | 145 | 140 | 137 | 138 | 140 | 133 | 130 | 129 | 131 | 132 | 131 | 132 | 134 | 130 | 127 | 130 | 139 | 147 | 147 | 144 | 141 | 144 | 144 | 144 | 146 | 147 | 147 | 147 | 146 | 147 | 146 | 143 | 140 | 139 | 140 | 139 | 137 | 138 | 134 | 130 | 127 | 128 | 129 | 129 | 128 | 129 | 127 | 129 | 127 | 131 | 134 | 131 | 139 | 139 | 138 | 136 | 133 | 131 | 130 | 132 | 134 | 137 | 140 | 141 | 141 | 143 | 140 | 139 | 143 | 145 | 141 | 138 | 139 | 140 | 141 | 142 | 144 | 138 | 136 | 134 | 133 | . 205 145 | 151 | 152 | 153 | 154 | 152 | 152 | 156 | 151 | 147 | 141 | 139 | 141 | 144 | 147 | 148 | 151 | 149 | 149 | 148 | 145 | 138 | 135 | 136 | 134 | 133 | 131 | 130 | 130 | 130 | 131 | 132 | 134 | 133 | 134 | 136 | 139 | 142 | 143 | 143 | 145 | 144 | 142 | 143 | 144 | 145 | 144 | 144 | 146 | 146 | 145 | 143 | 141 | 140 | 137 | 133 | 134 | 131 | 127 | 126 | 128 | 129 | 130 | 129 | 129 | 128 | 130 | 127 | 130 | 133 | 132 | 141 | 140 | 138 | 136 | 133 | 130 | 130 | 132 | 133 | 139 | 143 | 143 | 143 | 145 | 141 | 137 | 139 | 144 | 138 | 134 | 136 | 141 | 144 | 145 | 145 | 141 | 137 | 134 | 134 | . 206 143 | 147 | 149 | 151 | 155 | 152 | 146 | 145 | 154 | 151 | 146 | 143 | 142 | 143 | 144 | 145 | 144 | 146 | 147 | 146 | 142 | 138 | 136 | 134 | 133 | 135 | 134 | 130 | 129 | 132 | 134 | 134 | 135 | 136 | 137 | 136 | 133 | 135 | 142 | 150 | 147 | 145 | 143 | 143 | 144 | 145 | 144 | 143 | 145 | 145 | 144 | 142 | 141 | 140 | 136 | 132 | 130 | 128 | 126 | 126 | 127 | 128 | 129 | 129 | 129 | 129 | 131 | 129 | 130 | 133 | 133 | 143 | 143 | 139 | 135 | 132 | 131 | 132 | 134 | 136 | 138 | 141 | 140 | 139 | 142 | 141 | 139 | 140 | 143 | 137 | 133 | 136 | 141 | 143 | 143 | 142 | 143 | 139 | 136 | 136 | . 207 148 | 151 | 150 | 149 | 151 | 150 | 149 | 151 | 150 | 150 | 151 | 150 | 148 | 145 | 144 | 144 | 137 | 144 | 145 | 139 | 135 | 137 | 138 | 135 | 131 | 136 | 136 | 130 | 129 | 135 | 138 | 137 | 134 | 129 | 128 | 132 | 137 | 140 | 146 | 153 | 147 | 145 | 144 | 144 | 145 | 146 | 145 | 143 | 147 | 147 | 144 | 142 | 141 | 141 | 139 | 136 | 132 | 131 | 129 | 128 | 128 | 128 | 128 | 129 | 128 | 130 | 133 | 131 | 131 | 133 | 133 | 144 | 145 | 141 | 135 | 132 | 132 | 135 | 138 | 140 | 141 | 141 | 137 | 135 | 139 | 140 | 139 | 140 | 139 | 135 | 133 | 136 | 141 | 143 | 143 | 143 | 144 | 140 | 137 | 138 | . 208 150 | 148 | 151 | 145 | 143 | 147 | 148 | 153 | 158 | 153 | 150 | 152 | 149 | 143 | 141 | 144 | 145 | 145 | 144 | 142 | 140 | 137 | 133 | 131 | 130 | 133 | 131 | 130 | 137 | 143 | 140 | 135 | 141 | 139 | 130 | 134 | 147 | 142 | 135 | 144 | 147 | 143 | 146 | 148 | 144 | 146 | 149 | 144 | 148 | 144 | 140 | 141 | 143 | 144 | 141 | 137 | 132 | 128 | 126 | 127 | 128 | 127 | 125 | 125 | 128 | 127 | 129 | 135 | 138 | 138 | 138 | 139 | 138 | 133 | 129 | 130 | 133 | 135 | 138 | 140 | 140 | 136 | 135 | 137 | 138 | 136 | 136 | 139 | 139 | 137 | 137 | 138 | 139 | 140 | 141 | 143 | 141 | 144 | 143 | 143 | . 209 153 | 147 | 147 | 143 | 144 | 147 | 144 | 146 | 150 | 149 | 150 | 152 | 153 | 151 | 146 | 143 | 142 | 142 | 141 | 139 | 137 | 135 | 134 | 134 | 133 | 131 | 130 | 129 | 130 | 132 | 134 | 133 | 136 | 139 | 137 | 130 | 132 | 146 | 151 | 142 | 145 | 146 | 153 | 156 | 154 | 156 | 156 | 149 | 145 | 148 | 149 | 148 | 143 | 140 | 139 | 140 | 143 | 137 | 130 | 125 | 122 | 122 | 126 | 129 | 128 | 128 | 129 | 132 | 137 | 139 | 139 | 137 | 133 | 130 | 129 | 133 | 138 | 139 | 137 | 135 | 140 | 136 | 134 | 136 | 136 | 133 | 132 | 135 | 137 | 136 | 136 | 137 | 136 | 136 | 137 | 140 | 137 | 140 | 139 | 139 | . 210 154 | 147 | 147 | 145 | 145 | 145 | 141 | 145 | 143 | 145 | 147 | 149 | 153 | 155 | 151 | 144 | 144 | 143 | 141 | 139 | 137 | 136 | 137 | 137 | 136 | 130 | 132 | 135 | 129 | 129 | 133 | 133 | 137 | 128 | 138 | 144 | 135 | 141 | 149 | 139 | 141 | 142 | 146 | 146 | 145 | 152 | 155 | 150 | 145 | 145 | 144 | 144 | 144 | 143 | 141 | 140 | 142 | 139 | 135 | 132 | 127 | 124 | 125 | 127 | 126 | 126 | 127 | 128 | 133 | 137 | 136 | 133 | 132 | 130 | 131 | 137 | 143 | 142 | 138 | 134 | 138 | 135 | 134 | 136 | 136 | 134 | 134 | 135 | 135 | 135 | 136 | 137 | 135 | 134 | 136 | 140 | 137 | 140 | 139 | 138 | . 211 153 | 149 | 152 | 151 | 148 | 146 | 143 | 150 | 143 | 143 | 143 | 145 | 148 | 150 | 150 | 148 | 149 | 146 | 142 | 140 | 139 | 139 | 138 | 137 | 137 | 131 | 137 | 143 | 137 | 139 | 141 | 134 | 145 | 129 | 145 | 167 | 157 | 144 | 144 | 140 | 139 | 142 | 143 | 140 | 141 | 149 | 153 | 151 | 148 | 145 | 141 | 141 | 142 | 143 | 142 | 141 | 139 | 138 | 139 | 139 | 135 | 129 | 124 | 122 | 125 | 124 | 124 | 127 | 130 | 132 | 133 | 134 | 133 | 131 | 132 | 137 | 140 | 140 | 137 | 135 | 138 | 135 | 133 | 134 | 134 | 133 | 134 | 135 | 133 | 134 | 136 | 136 | 135 | 134 | 136 | 140 | 139 | 141 | 139 | 139 | . 212 156 | 151 | 153 | 151 | 150 | 149 | 145 | 149 | 147 | 144 | 144 | 146 | 146 | 143 | 144 | 149 | 149 | 144 | 139 | 138 | 139 | 139 | 136 | 132 | 136 | 132 | 138 | 142 | 141 | 147 | 147 | 132 | 137 | 136 | 145 | 155 | 154 | 147 | 141 | 135 | 133 | 140 | 142 | 141 | 144 | 148 | 148 | 147 | 149 | 151 | 152 | 149 | 143 | 140 | 141 | 144 | 146 | 142 | 140 | 139 | 137 | 133 | 129 | 127 | 127 | 123 | 124 | 128 | 130 | 127 | 130 | 135 | 130 | 131 | 133 | 136 | 136 | 134 | 134 | 134 | 138 | 135 | 132 | 131 | 131 | 131 | 131 | 133 | 131 | 132 | 134 | 135 | 133 | 131 | 134 | 137 | 135 | 139 | 137 | 136 | . 213 160 | 152 | 151 | 149 | 151 | 153 | 145 | 142 | 148 | 145 | 146 | 150 | 148 | 141 | 141 | 147 | 146 | 142 | 137 | 137 | 139 | 139 | 135 | 131 | 134 | 132 | 134 | 134 | 136 | 144 | 143 | 131 | 128 | 132 | 130 | 129 | 134 | 138 | 137 | 137 | 132 | 138 | 138 | 137 | 141 | 143 | 144 | 147 | 148 | 150 | 151 | 152 | 150 | 148 | 145 | 144 | 145 | 142 | 140 | 142 | 143 | 141 | 139 | 137 | 129 | 125 | 123 | 126 | 127 | 125 | 127 | 131 | 129 | 131 | 135 | 138 | 137 | 134 | 133 | 134 | 135 | 133 | 132 | 132 | 133 | 135 | 136 | 138 | 135 | 135 | 136 | 136 | 134 | 132 | 132 | 135 | 133 | 137 | 136 | 134 | . 214 160 | 157 | 157 | 150 | 150 | 153 | 146 | 143 | 146 | 146 | 147 | 149 | 147 | 144 | 143 | 144 | 144 | 142 | 138 | 137 | 138 | 137 | 136 | 134 | 132 | 133 | 133 | 132 | 132 | 135 | 136 | 133 | 131 | 130 | 129 | 131 | 133 | 135 | 139 | 146 | 140 | 142 | 138 | 137 | 141 | 141 | 142 | 152 | 147 | 144 | 143 | 147 | 153 | 155 | 151 | 147 | 142 | 142 | 143 | 146 | 148 | 146 | 143 | 142 | 134 | 132 | 127 | 124 | 126 | 129 | 128 | 124 | 130 | 131 | 134 | 137 | 137 | 134 | 133 | 134 | 135 | 134 | 134 | 135 | 137 | 140 | 141 | 142 | 138 | 137 | 138 | 138 | 136 | 134 | 133 | 135 | 134 | 140 | 139 | 135 | . 215 157 | 162 | 167 | 156 | 148 | 151 | 149 | 151 | 145 | 145 | 145 | 143 | 144 | 146 | 146 | 143 | 143 | 142 | 139 | 137 | 135 | 134 | 134 | 135 | 130 | 134 | 136 | 136 | 134 | 130 | 131 | 138 | 128 | 130 | 138 | 141 | 136 | 138 | 143 | 140 | 137 | 140 | 138 | 140 | 143 | 137 | 134 | 143 | 147 | 147 | 146 | 147 | 148 | 150 | 153 | 155 | 149 | 147 | 146 | 146 | 143 | 141 | 141 | 143 | 141 | 141 | 133 | 124 | 128 | 137 | 134 | 122 | 129 | 128 | 129 | 131 | 132 | 132 | 132 | 133 | 138 | 138 | 138 | 138 | 138 | 139 | 138 | 137 | 137 | 136 | 136 | 137 | 136 | 134 | 133 | 134 | 136 | 142 | 141 | 136 | . 216 156 | 146 | 149 | 163 | 166 | 153 | 146 | 152 | 145 | 144 | 143 | 144 | 145 | 145 | 143 | 141 | 139 | 141 | 136 | 133 | 138 | 136 | 130 | 131 | 131 | 132 | 136 | 137 | 134 | 130 | 130 | 132 | 132 | 135 | 126 | 136 | 141 | 137 | 146 | 141 | 135 | 137 | 138 | 141 | 143 | 138 | 137 | 143 | 146 | 146 | 146 | 148 | 149 | 145 | 143 | 148 | 147 | 147 | 146 | 144 | 142 | 141 | 140 | 140 | 142 | 143 | 143 | 144 | 144 | 143 | 140 | 138 | 123 | 126 | 137 | 137 | 141 | 131 | 133 | 132 | 138 | 141 | 137 | 135 | 138 | 135 | 132 | 137 | 137 | 135 | 135 | 137 | 136 | 132 | 131 | 134 | 134 | 137 | 139 | 137 | . 217 155 | 156 | 158 | 158 | 159 | 158 | 154 | 148 | 150 | 146 | 142 | 143 | 145 | 145 | 142 | 138 | 136 | 135 | 131 | 132 | 137 | 138 | 135 | 133 | 136 | 131 | 129 | 130 | 132 | 131 | 128 | 127 | 143 | 144 | 130 | 132 | 134 | 132 | 144 | 141 | 134 | 138 | 138 | 136 | 137 | 136 | 135 | 138 | 132 | 144 | 151 | 146 | 144 | 150 | 152 | 147 | 142 | 143 | 143 | 143 | 143 | 142 | 142 | 142 | 144 | 144 | 144 | 145 | 146 | 146 | 146 | 145 | 136 | 133 | 132 | 135 | 136 | 136 | 133 | 133 | 133 | 134 | 133 | 135 | 139 | 138 | 135 | 135 | 134 | 133 | 134 | 136 | 134 | 129 | 129 | 132 | 133 | 134 | 135 | 135 | . 218 153 | 161 | 162 | 156 | 157 | 164 | 164 | 156 | 152 | 150 | 148 | 145 | 142 | 141 | 141 | 141 | 141 | 135 | 132 | 133 | 135 | 136 | 135 | 130 | 135 | 130 | 127 | 128 | 130 | 129 | 127 | 124 | 139 | 145 | 136 | 135 | 134 | 132 | 139 | 132 | 132 | 139 | 137 | 132 | 134 | 136 | 137 | 137 | 135 | 141 | 154 | 158 | 153 | 152 | 151 | 144 | 142 | 142 | 143 | 142 | 142 | 140 | 139 | 138 | 144 | 143 | 142 | 142 | 142 | 143 | 144 | 145 | 144 | 138 | 127 | 134 | 132 | 138 | 129 | 127 | 131 | 127 | 129 | 135 | 138 | 137 | 135 | 130 | 130 | 131 | 132 | 134 | 131 | 127 | 127 | 131 | 134 | 134 | 134 | 135 | . 219 153 | 155 | 157 | 158 | 159 | 161 | 164 | 165 | 157 | 155 | 151 | 147 | 144 | 142 | 142 | 142 | 148 | 139 | 137 | 136 | 132 | 131 | 132 | 126 | 129 | 130 | 131 | 131 | 130 | 128 | 126 | 126 | 127 | 137 | 136 | 136 | 135 | 134 | 136 | 127 | 131 | 136 | 136 | 134 | 137 | 139 | 138 | 140 | 133 | 133 | 146 | 155 | 150 | 150 | 152 | 145 | 143 | 142 | 141 | 140 | 139 | 138 | 136 | 135 | 142 | 141 | 140 | 138 | 137 | 137 | 137 | 138 | 152 | 147 | 139 | 143 | 142 | 144 | 135 | 130 | 131 | 125 | 128 | 135 | 134 | 134 | 134 | 129 | 131 | 132 | 134 | 134 | 131 | 128 | 130 | 135 | 133 | 133 | 134 | 136 | . 220 151 | 151 | 153 | 157 | 157 | 156 | 158 | 162 | 164 | 159 | 153 | 150 | 150 | 148 | 144 | 140 | 145 | 137 | 137 | 137 | 130 | 129 | 131 | 129 | 127 | 129 | 131 | 131 | 130 | 129 | 128 | 128 | 125 | 134 | 133 | 130 | 129 | 132 | 136 | 130 | 130 | 133 | 134 | 137 | 140 | 136 | 134 | 137 | 137 | 146 | 156 | 151 | 140 | 147 | 154 | 144 | 141 | 139 | 138 | 137 | 137 | 137 | 137 | 136 | 138 | 138 | 139 | 138 | 137 | 136 | 136 | 137 | 147 | 146 | 149 | 145 | 148 | 142 | 141 | 136 | 136 | 130 | 133 | 138 | 133 | 131 | 134 | 133 | 133 | 135 | 136 | 136 | 133 | 132 | 135 | 140 | 131 | 132 | 133 | 134 | . 221 147 | 151 | 154 | 154 | 155 | 158 | 160 | 159 | 161 | 164 | 164 | 160 | 152 | 146 | 144 | 145 | 142 | 137 | 137 | 136 | 130 | 127 | 129 | 131 | 131 | 129 | 127 | 126 | 128 | 130 | 130 | 127 | 126 | 132 | 133 | 129 | 128 | 132 | 134 | 130 | 131 | 131 | 131 | 135 | 137 | 131 | 127 | 131 | 136 | 148 | 162 | 161 | 146 | 141 | 144 | 142 | 142 | 140 | 136 | 135 | 135 | 135 | 134 | 134 | 131 | 134 | 137 | 138 | 138 | 138 | 139 | 139 | 139 | 140 | 147 | 140 | 143 | 137 | 142 | 141 | 147 | 143 | 144 | 144 | 136 | 129 | 128 | 131 | 131 | 133 | 135 | 135 | 134 | 134 | 137 | 140 | 134 | 134 | 134 | 132 | . 222 146 | 151 | 153 | 152 | 154 | 159 | 160 | 158 | 156 | 162 | 168 | 166 | 157 | 150 | 148 | 150 | 145 | 142 | 138 | 136 | 133 | 127 | 125 | 129 | 131 | 131 | 129 | 126 | 126 | 128 | 128 | 127 | 125 | 129 | 134 | 132 | 132 | 134 | 130 | 127 | 130 | 132 | 131 | 131 | 133 | 132 | 129 | 131 | 130 | 133 | 144 | 155 | 152 | 140 | 138 | 145 | 143 | 140 | 137 | 135 | 134 | 134 | 132 | 130 | 129 | 132 | 137 | 139 | 139 | 140 | 140 | 141 | 141 | 144 | 147 | 143 | 142 | 142 | 145 | 147 | 149 | 149 | 149 | 148 | 142 | 130 | 124 | 129 | 129 | 132 | 135 | 137 | 138 | 138 | 139 | 140 | 138 | 136 | 133 | 131 | . 223 151 | 149 | 149 | 151 | 152 | 151 | 152 | 153 | 159 | 157 | 157 | 162 | 167 | 165 | 155 | 145 | 147 | 146 | 139 | 136 | 137 | 130 | 124 | 130 | 128 | 134 | 136 | 132 | 126 | 124 | 126 | 127 | 125 | 126 | 131 | 129 | 131 | 134 | 131 | 130 | 129 | 133 | 131 | 128 | 132 | 136 | 136 | 136 | 154 | 150 | 143 | 141 | 145 | 146 | 142 | 140 | 138 | 136 | 135 | 134 | 135 | 136 | 134 | 133 | 133 | 136 | 140 | 142 | 141 | 141 | 142 | 142 | 141 | 146 | 143 | 145 | 138 | 144 | 141 | 143 | 140 | 144 | 145 | 148 | 147 | 135 | 127 | 133 | 131 | 134 | 139 | 142 | 144 | 145 | 144 | 142 | 139 | 135 | 130 | 129 | . 224 152 | 151 | 150 | 150 | 150 | 151 | 152 | 152 | 151 | 155 | 160 | 161 | 161 | 161 | 164 | 167 | 146 | 149 | 145 | 136 | 131 | 132 | 131 | 126 | 128 | 126 | 126 | 128 | 130 | 130 | 127 | 124 | 125 | 126 | 127 | 128 | 130 | 133 | 133 | 131 | 128 | 129 | 130 | 133 | 135 | 132 | 131 | 137 | 144 | 143 | 151 | 151 | 146 | 139 | 133 | 137 | 137 | 135 | 136 | 136 | 132 | 131 | 134 | 133 | 133 | 138 | 140 | 139 | 138 | 134 | 133 | 139 | 141 | 142 | 143 | 144 | 142 | 140 | 139 | 141 | 139 | 146 | 146 | 140 | 139 | 138 | 132 | 127 | 129 | 137 | 145 | 145 | 144 | 145 | 147 | 149 | 141 | 127 | 124 | 130 | . 225 151 | 149 | 147 | 146 | 146 | 147 | 149 | 149 | 151 | 153 | 155 | 156 | 157 | 159 | 161 | 164 | 162 | 151 | 144 | 143 | 140 | 132 | 128 | 129 | 132 | 129 | 127 | 127 | 128 | 129 | 128 | 127 | 126 | 128 | 129 | 130 | 131 | 132 | 130 | 127 | 131 | 131 | 130 | 132 | 134 | 130 | 129 | 134 | 130 | 134 | 146 | 147 | 143 | 138 | 132 | 136 | 133 | 132 | 134 | 135 | 130 | 130 | 132 | 130 | 133 | 136 | 136 | 136 | 138 | 136 | 136 | 142 | 144 | 143 | 143 | 143 | 141 | 139 | 138 | 139 | 142 | 143 | 141 | 141 | 142 | 136 | 128 | 127 | 137 | 145 | 148 | 143 | 141 | 143 | 144 | 140 | 141 | 132 | 128 | 128 | . 226 148 | 147 | 146 | 146 | 148 | 150 | 151 | 151 | 152 | 151 | 150 | 151 | 153 | 156 | 159 | 160 | 164 | 162 | 155 | 147 | 142 | 140 | 135 | 130 | 125 | 125 | 126 | 127 | 129 | 129 | 128 | 127 | 131 | 132 | 131 | 131 | 132 | 132 | 130 | 127 | 132 | 132 | 129 | 129 | 131 | 128 | 127 | 132 | 131 | 138 | 149 | 146 | 140 | 137 | 132 | 133 | 131 | 131 | 134 | 135 | 131 | 131 | 132 | 130 | 131 | 134 | 133 | 133 | 135 | 135 | 139 | 147 | 147 | 144 | 142 | 142 | 141 | 138 | 137 | 138 | 144 | 141 | 138 | 140 | 139 | 130 | 127 | 135 | 139 | 146 | 146 | 139 | 138 | 144 | 143 | 136 | 141 | 137 | 132 | 126 | . 227 148 | 149 | 149 | 150 | 151 | 151 | 150 | 149 | 150 | 150 | 150 | 151 | 153 | 155 | 156 | 157 | 157 | 165 | 166 | 156 | 148 | 146 | 143 | 137 | 126 | 126 | 126 | 126 | 126 | 126 | 127 | 128 | 133 | 133 | 131 | 129 | 130 | 131 | 131 | 129 | 129 | 130 | 128 | 127 | 128 | 126 | 128 | 134 | 144 | 148 | 153 | 145 | 139 | 140 | 136 | 135 | 133 | 132 | 135 | 136 | 132 | 132 | 134 | 132 | 129 | 132 | 133 | 132 | 133 | 133 | 137 | 147 | 147 | 144 | 140 | 140 | 139 | 138 | 136 | 136 | 143 | 141 | 139 | 137 | 132 | 125 | 131 | 147 | 142 | 144 | 142 | 138 | 140 | 145 | 145 | 140 | 141 | 139 | 135 | 130 | . 228 153 | 152 | 150 | 149 | 148 | 146 | 145 | 143 | 147 | 149 | 151 | 153 | 153 | 153 | 154 | 155 | 154 | 157 | 163 | 166 | 160 | 150 | 146 | 148 | 140 | 136 | 130 | 125 | 122 | 124 | 127 | 130 | 130 | 130 | 129 | 129 | 130 | 131 | 130 | 128 | 126 | 129 | 129 | 127 | 127 | 127 | 132 | 140 | 146 | 147 | 150 | 143 | 142 | 147 | 142 | 139 | 134 | 133 | 135 | 135 | 131 | 131 | 133 | 132 | 131 | 131 | 130 | 131 | 136 | 136 | 135 | 138 | 143 | 139 | 137 | 137 | 137 | 136 | 135 | 135 | 140 | 141 | 138 | 134 | 132 | 131 | 138 | 150 | 148 | 144 | 141 | 142 | 144 | 143 | 142 | 142 | 143 | 140 | 141 | 141 | . 229 155 | 152 | 149 | 147 | 146 | 146 | 147 | 147 | 144 | 146 | 149 | 151 | 150 | 150 | 151 | 153 | 153 | 155 | 158 | 162 | 163 | 161 | 154 | 149 | 141 | 138 | 134 | 131 | 129 | 128 | 127 | 127 | 127 | 129 | 131 | 133 | 134 | 135 | 132 | 128 | 127 | 131 | 130 | 128 | 128 | 130 | 134 | 143 | 142 | 144 | 148 | 146 | 148 | 151 | 143 | 137 | 132 | 131 | 132 | 132 | 128 | 128 | 131 | 130 | 135 | 132 | 128 | 132 | 142 | 142 | 134 | 130 | 137 | 135 | 135 | 136 | 136 | 135 | 134 | 135 | 137 | 138 | 134 | 132 | 136 | 140 | 140 | 143 | 145 | 140 | 139 | 143 | 143 | 138 | 137 | 140 | 143 | 141 | 144 | 148 | . 230 154 | 153 | 151 | 149 | 149 | 149 | 149 | 149 | 145 | 145 | 145 | 145 | 147 | 149 | 151 | 152 | 151 | 157 | 157 | 153 | 157 | 166 | 163 | 154 | 141 | 139 | 137 | 136 | 136 | 134 | 131 | 128 | 129 | 131 | 132 | 133 | 134 | 135 | 133 | 129 | 131 | 132 | 129 | 126 | 128 | 130 | 132 | 137 | 139 | 140 | 147 | 147 | 148 | 148 | 138 | 133 | 131 | 130 | 132 | 132 | 128 | 129 | 131 | 129 | 134 | 134 | 134 | 139 | 145 | 142 | 134 | 132 | 135 | 135 | 137 | 139 | 139 | 137 | 137 | 138 | 134 | 136 | 134 | 133 | 137 | 138 | 138 | 140 | 138 | 137 | 139 | 141 | 140 | 136 | 134 | 136 | 138 | 138 | 142 | 144 | . 231 156 | 155 | 155 | 154 | 152 | 148 | 145 | 142 | 148 | 144 | 141 | 141 | 145 | 149 | 152 | 153 | 155 | 153 | 152 | 154 | 156 | 158 | 163 | 168 | 154 | 147 | 139 | 135 | 134 | 136 | 136 | 136 | 130 | 130 | 128 | 127 | 129 | 131 | 131 | 129 | 134 | 133 | 127 | 123 | 127 | 128 | 128 | 130 | 135 | 135 | 143 | 143 | 143 | 142 | 133 | 130 | 131 | 130 | 134 | 135 | 131 | 131 | 133 | 131 | 129 | 137 | 144 | 146 | 144 | 138 | 135 | 140 | 136 | 137 | 141 | 143 | 143 | 140 | 140 | 141 | 131 | 136 | 136 | 135 | 132 | 130 | 133 | 143 | 139 | 143 | 145 | 143 | 139 | 135 | 133 | 131 | 131 | 134 | 138 | 137 | . 232 156 | 156 | 155 | 153 | 153 | 152 | 150 | 146 | 147 | 146 | 146 | 147 | 147 | 147 | 146 | 145 | 150 | 152 | 153 | 153 | 154 | 156 | 159 | 161 | 170 | 158 | 142 | 133 | 134 | 137 | 136 | 132 | 132 | 134 | 135 | 132 | 129 | 127 | 129 | 131 | 136 | 135 | 134 | 132 | 132 | 133 | 134 | 135 | 135 | 135 | 136 | 139 | 141 | 139 | 136 | 135 | 134 | 131 | 129 | 134 | 140 | 136 | 130 | 132 | 132 | 135 | 142 | 144 | 141 | 143 | 146 | 143 | 147 | 138 | 138 | 142 | 140 | 136 | 135 | 135 | 132 | 129 | 129 | 131 | 131 | 130 | 134 | 140 | 143 | 139 | 136 | 137 | 137 | 135 | 132 | 132 | 133 | 134 | 134 | 133 | . 233 153 | 157 | 160 | 158 | 153 | 151 | 150 | 149 | 146 | 148 | 149 | 149 | 147 | 145 | 143 | 142 | 144 | 146 | 148 | 150 | 151 | 154 | 156 | 158 | 163 | 165 | 161 | 150 | 139 | 134 | 136 | 139 | 137 | 136 | 135 | 136 | 135 | 133 | 129 | 126 | 129 | 132 | 135 | 139 | 142 | 143 | 144 | 143 | 144 | 141 | 139 | 137 | 134 | 131 | 131 | 133 | 130 | 137 | 140 | 138 | 132 | 126 | 130 | 142 | 131 | 130 | 134 | 139 | 137 | 137 | 140 | 141 | 140 | 134 | 136 | 141 | 140 | 139 | 138 | 137 | 133 | 130 | 129 | 130 | 129 | 127 | 130 | 135 | 141 | 140 | 141 | 142 | 140 | 136 | 134 | 134 | 129 | 130 | 132 | 133 | . 234 157 | 155 | 154 | 153 | 155 | 156 | 152 | 147 | 144 | 147 | 149 | 148 | 145 | 144 | 144 | 145 | 144 | 145 | 146 | 149 | 152 | 154 | 155 | 155 | 156 | 161 | 166 | 163 | 156 | 148 | 141 | 136 | 137 | 135 | 135 | 136 | 138 | 137 | 134 | 131 | 128 | 128 | 129 | 130 | 133 | 135 | 138 | 140 | 146 | 146 | 148 | 148 | 145 | 141 | 140 | 141 | 131 | 137 | 139 | 137 | 134 | 130 | 130 | 136 | 137 | 131 | 134 | 140 | 139 | 136 | 140 | 144 | 143 | 139 | 139 | 138 | 135 | 135 | 134 | 130 | 132 | 130 | 129 | 131 | 130 | 129 | 131 | 135 | 135 | 138 | 141 | 142 | 138 | 133 | 132 | 134 | 132 | 133 | 133 | 133 | . 235 159 | 156 | 151 | 151 | 155 | 158 | 155 | 150 | 148 | 149 | 148 | 146 | 144 | 144 | 145 | 147 | 147 | 147 | 146 | 148 | 151 | 153 | 153 | 153 | 154 | 155 | 157 | 161 | 165 | 163 | 153 | 143 | 140 | 139 | 137 | 136 | 135 | 136 | 138 | 139 | 137 | 135 | 132 | 130 | 130 | 131 | 133 | 135 | 135 | 136 | 139 | 142 | 143 | 141 | 141 | 142 | 137 | 136 | 131 | 129 | 135 | 136 | 132 | 129 | 134 | 129 | 130 | 135 | 133 | 132 | 135 | 137 | 140 | 138 | 138 | 135 | 133 | 138 | 141 | 137 | 131 | 129 | 129 | 130 | 130 | 129 | 130 | 132 | 132 | 135 | 138 | 137 | 133 | 130 | 131 | 133 | 137 | 137 | 135 | 134 | . 236 155 | 159 | 161 | 159 | 155 | 156 | 158 | 160 | 156 | 155 | 153 | 150 | 148 | 147 | 145 | 144 | 144 | 143 | 142 | 143 | 145 | 148 | 150 | 150 | 155 | 156 | 156 | 155 | 157 | 160 | 163 | 164 | 154 | 149 | 143 | 139 | 139 | 140 | 141 | 141 | 138 | 139 | 139 | 139 | 137 | 135 | 133 | 132 | 134 | 129 | 125 | 126 | 128 | 130 | 132 | 134 | 137 | 137 | 131 | 126 | 128 | 131 | 133 | 136 | 130 | 129 | 132 | 132 | 129 | 130 | 132 | 129 | 139 | 139 | 139 | 137 | 135 | 140 | 142 | 137 | 131 | 129 | 128 | 128 | 127 | 125 | 125 | 125 | 136 | 137 | 135 | 133 | 131 | 131 | 132 | 133 | 133 | 134 | 135 | 136 | . 237 154 | 158 | 162 | 161 | 160 | 159 | 158 | 157 | 157 | 157 | 156 | 156 | 156 | 154 | 150 | 147 | 141 | 140 | 139 | 140 | 143 | 146 | 149 | 150 | 151 | 154 | 155 | 153 | 153 | 156 | 160 | 162 | 162 | 154 | 147 | 146 | 149 | 151 | 148 | 143 | 140 | 140 | 139 | 138 | 136 | 134 | 132 | 131 | 137 | 131 | 126 | 127 | 129 | 130 | 130 | 130 | 133 | 135 | 132 | 131 | 133 | 133 | 131 | 134 | 131 | 134 | 138 | 137 | 133 | 134 | 135 | 131 | 137 | 137 | 139 | 138 | 134 | 135 | 134 | 128 | 131 | 129 | 128 | 128 | 128 | 129 | 129 | 129 | 139 | 138 | 135 | 131 | 130 | 132 | 133 | 132 | 128 | 132 | 135 | 138 | . 238 160 | 158 | 157 | 157 | 161 | 162 | 158 | 153 | 154 | 155 | 156 | 157 | 157 | 157 | 156 | 156 | 146 | 146 | 145 | 144 | 144 | 146 | 148 | 149 | 148 | 150 | 152 | 153 | 155 | 156 | 154 | 151 | 159 | 156 | 152 | 151 | 151 | 152 | 151 | 150 | 150 | 148 | 145 | 142 | 140 | 138 | 138 | 138 | 132 | 130 | 130 | 132 | 134 | 133 | 131 | 130 | 132 | 130 | 129 | 134 | 139 | 135 | 129 | 128 | 128 | 130 | 136 | 137 | 132 | 129 | 131 | 130 | 130 | 130 | 134 | 136 | 135 | 136 | 137 | 134 | 130 | 130 | 129 | 130 | 133 | 135 | 136 | 136 | 139 | 139 | 136 | 132 | 131 | 131 | 131 | 130 | 129 | 132 | 135 | 136 | . 239 163 | 163 | 161 | 158 | 157 | 158 | 159 | 159 | 155 | 156 | 156 | 154 | 153 | 154 | 157 | 161 | 153 | 153 | 152 | 149 | 146 | 144 | 144 | 145 | 149 | 152 | 153 | 151 | 150 | 152 | 155 | 157 | 156 | 159 | 159 | 152 | 145 | 142 | 147 | 153 | 147 | 148 | 150 | 150 | 149 | 146 | 142 | 140 | 137 | 135 | 133 | 134 | 135 | 135 | 136 | 138 | 135 | 131 | 127 | 129 | 132 | 128 | 128 | 134 | 128 | 127 | 134 | 139 | 133 | 126 | 129 | 133 | 140 | 137 | 138 | 138 | 135 | 135 | 137 | 137 | 132 | 131 | 130 | 131 | 133 | 136 | 137 | 137 | 139 | 140 | 139 | 135 | 133 | 132 | 131 | 129 | 129 | 130 | 131 | 132 | . 240 158 | 159 | 162 | 165 | 165 | 163 | 158 | 155 | 166 | 156 | 150 | 153 | 155 | 153 | 153 | 157 | 156 | 153 | 150 | 149 | 150 | 150 | 148 | 146 | 144 | 148 | 151 | 151 | 150 | 150 | 153 | 157 | 162 | 154 | 153 | 158 | 156 | 146 | 141 | 143 | 148 | 147 | 148 | 150 | 150 | 147 | 145 | 146 | 140 | 134 | 131 | 133 | 136 | 136 | 135 | 135 | 141 | 133 | 128 | 129 | 130 | 129 | 128 | 129 | 124 | 132 | 136 | 140 | 132 | 123 | 132 | 140 | 142 | 135 | 140 | 142 | 145 | 131 | 134 | 139 | 133 | 132 | 130 | 129 | 130 | 132 | 133 | 133 | 141 | 140 | 139 | 137 | 135 | 133 | 131 | 130 | 126 | 130 | 131 | 129 | . 241 156 | 157 | 159 | 161 | 163 | 163 | 161 | 160 | 158 | 162 | 161 | 154 | 151 | 155 | 157 | 156 | 152 | 155 | 157 | 154 | 149 | 147 | 148 | 150 | 147 | 146 | 146 | 148 | 152 | 155 | 156 | 156 | 152 | 160 | 162 | 157 | 157 | 159 | 152 | 141 | 135 | 143 | 146 | 142 | 144 | 149 | 146 | 136 | 140 | 134 | 130 | 130 | 131 | 131 | 132 | 133 | 136 | 130 | 127 | 130 | 133 | 131 | 130 | 130 | 130 | 129 | 126 | 133 | 135 | 132 | 137 | 139 | 127 | 135 | 142 | 137 | 135 | 132 | 134 | 132 | 130 | 130 | 129 | 130 | 132 | 133 | 132 | 132 | 136 | 135 | 134 | 133 | 131 | 130 | 129 | 128 | 131 | 131 | 129 | 128 | . 242 155 | 155 | 155 | 157 | 160 | 162 | 164 | 164 | 160 | 160 | 161 | 161 | 157 | 152 | 154 | 158 | 155 | 155 | 154 | 154 | 154 | 152 | 150 | 148 | 148 | 146 | 145 | 147 | 151 | 155 | 155 | 153 | 155 | 156 | 156 | 155 | 156 | 157 | 155 | 151 | 135 | 133 | 131 | 131 | 133 | 137 | 140 | 141 | 145 | 140 | 135 | 132 | 131 | 131 | 133 | 135 | 135 | 131 | 130 | 133 | 135 | 132 | 128 | 127 | 130 | 130 | 127 | 130 | 130 | 128 | 137 | 140 | 137 | 135 | 133 | 137 | 135 | 134 | 129 | 127 | 131 | 130 | 129 | 129 | 130 | 130 | 130 | 130 | 135 | 135 | 133 | 132 | 130 | 130 | 129 | 129 | 128 | 129 | 128 | 127 | . 243 155 | 154 | 153 | 154 | 157 | 160 | 162 | 164 | 164 | 157 | 157 | 162 | 162 | 155 | 153 | 156 | 156 | 153 | 152 | 153 | 156 | 156 | 153 | 150 | 149 | 149 | 149 | 148 | 147 | 147 | 149 | 151 | 157 | 153 | 151 | 154 | 156 | 155 | 157 | 161 | 161 | 152 | 143 | 138 | 134 | 131 | 135 | 142 | 145 | 143 | 140 | 136 | 134 | 132 | 133 | 134 | 134 | 132 | 131 | 134 | 135 | 132 | 128 | 127 | 130 | 133 | 130 | 129 | 126 | 123 | 132 | 135 | 147 | 139 | 130 | 136 | 133 | 135 | 127 | 128 | 131 | 129 | 127 | 126 | 127 | 128 | 130 | 131 | 135 | 135 | 134 | 133 | 132 | 131 | 130 | 130 | 125 | 130 | 131 | 129 | . 244 155 | 154 | 153 | 154 | 155 | 157 | 159 | 159 | 159 | 163 | 162 | 158 | 158 | 163 | 160 | 153 | 151 | 153 | 155 | 154 | 152 | 151 | 155 | 158 | 153 | 152 | 151 | 149 | 147 | 146 | 147 | 148 | 148 | 152 | 153 | 153 | 156 | 161 | 161 | 159 | 159 | 164 | 161 | 149 | 142 | 143 | 142 | 136 | 140 | 141 | 140 | 138 | 135 | 132 | 131 | 131 | 130 | 128 | 128 | 130 | 132 | 131 | 130 | 129 | 132 | 133 | 128 | 128 | 129 | 128 | 132 | 128 | 134 | 143 | 139 | 133 | 123 | 132 | 132 | 131 | 129 | 128 | 128 | 127 | 127 | 128 | 130 | 131 | 130 | 130 | 130 | 130 | 130 | 129 | 128 | 128 | 129 | 133 | 134 | 130 | . 245 154 | 153 | 153 | 153 | 154 | 155 | 155 | 155 | 158 | 162 | 164 | 162 | 160 | 161 | 161 | 160 | 154 | 154 | 153 | 152 | 152 | 153 | 155 | 157 | 157 | 154 | 150 | 150 | 151 | 152 | 150 | 148 | 146 | 143 | 143 | 146 | 149 | 150 | 154 | 159 | 152 | 157 | 160 | 157 | 152 | 149 | 146 | 142 | 141 | 143 | 144 | 143 | 141 | 139 | 136 | 134 | 133 | 130 | 128 | 127 | 127 | 127 | 127 | 126 | 126 | 132 | 131 | 131 | 131 | 131 | 137 | 136 | 135 | 139 | 137 | 136 | 130 | 130 | 130 | 131 | 133 | 133 | 133 | 131 | 129 | 127 | 126 | 125 | 127 | 128 | 128 | 128 | 128 | 128 | 128 | 128 | 131 | 131 | 130 | 130 | . 246 152 | 152 | 152 | 153 | 154 | 154 | 154 | 154 | 159 | 156 | 158 | 164 | 165 | 160 | 159 | 162 | 161 | 156 | 151 | 151 | 154 | 156 | 155 | 152 | 156 | 154 | 152 | 152 | 153 | 154 | 152 | 151 | 152 | 143 | 138 | 141 | 142 | 140 | 146 | 157 | 163 | 159 | 159 | 163 | 160 | 152 | 147 | 149 | 148 | 149 | 149 | 147 | 146 | 145 | 143 | 141 | 140 | 137 | 132 | 128 | 126 | 126 | 125 | 124 | 121 | 132 | 133 | 132 | 129 | 131 | 142 | 144 | 143 | 132 | 131 | 136 | 139 | 129 | 129 | 134 | 138 | 137 | 136 | 133 | 129 | 128 | 127 | 128 | 134 | 133 | 131 | 129 | 128 | 128 | 128 | 128 | 128 | 128 | 129 | 132 | . 247 150 | 150 | 150 | 152 | 153 | 155 | 155 | 155 | 154 | 156 | 156 | 156 | 162 | 168 | 163 | 152 | 159 | 159 | 158 | 155 | 151 | 150 | 152 | 154 | 152 | 155 | 157 | 155 | 151 | 149 | 152 | 155 | 152 | 156 | 153 | 144 | 142 | 149 | 151 | 147 | 145 | 151 | 154 | 156 | 160 | 164 | 159 | 150 | 149 | 149 | 147 | 145 | 144 | 145 | 144 | 142 | 142 | 139 | 135 | 131 | 129 | 129 | 128 | 128 | 127 | 131 | 127 | 127 | 131 | 137 | 145 | 141 | 133 | 131 | 135 | 129 | 133 | 128 | 136 | 139 | 136 | 135 | 132 | 130 | 129 | 131 | 136 | 140 | 141 | 138 | 134 | 131 | 128 | 127 | 127 | 128 | 127 | 130 | 134 | 135 | . 248 150 | 151 | 150 | 149 | 150 | 152 | 154 | 153 | 154 | 152 | 152 | 154 | 157 | 160 | 164 | 168 | 159 | 159 | 163 | 164 | 157 | 148 | 147 | 151 | 152 | 154 | 155 | 157 | 157 | 156 | 154 | 153 | 155 | 153 | 153 | 155 | 154 | 149 | 146 | 144 | 147 | 154 | 156 | 154 | 155 | 162 | 166 | 165 | 158 | 152 | 147 | 147 | 149 | 148 | 146 | 145 | 146 | 145 | 141 | 136 | 135 | 135 | 132 | 128 | 130 | 128 | 126 | 126 | 129 | 132 | 132 | 129 | 132 | 133 | 132 | 134 | 136 | 133 | 134 | 140 | 138 | 130 | 128 | 137 | 144 | 142 | 137 | 136 | 133 | 131 | 130 | 129 | 128 | 126 | 127 | 129 | 129 | 130 | 130 | 129 | . 249 149 | 150 | 150 | 149 | 149 | 151 | 153 | 152 | 154 | 152 | 152 | 153 | 154 | 155 | 158 | 161 | 162 | 161 | 162 | 164 | 166 | 164 | 157 | 150 | 153 | 153 | 153 | 153 | 153 | 153 | 153 | 152 | 155 | 154 | 154 | 154 | 152 | 149 | 151 | 154 | 152 | 144 | 142 | 148 | 151 | 151 | 157 | 165 | 165 | 161 | 157 | 153 | 151 | 150 | 147 | 145 | 146 | 145 | 143 | 141 | 140 | 139 | 136 | 131 | 133 | 132 | 129 | 127 | 129 | 132 | 133 | 132 | 134 | 133 | 131 | 131 | 132 | 130 | 130 | 137 | 138 | 134 | 131 | 133 | 137 | 141 | 144 | 146 | 146 | 137 | 131 | 133 | 135 | 132 | 129 | 129 | 129 | 128 | 128 | 128 | . 250 147 | 148 | 149 | 148 | 148 | 151 | 151 | 151 | 155 | 154 | 153 | 155 | 155 | 154 | 155 | 156 | 156 | 160 | 160 | 157 | 159 | 164 | 166 | 163 | 155 | 155 | 153 | 152 | 151 | 151 | 151 | 151 | 147 | 152 | 158 | 160 | 157 | 154 | 154 | 156 | 146 | 137 | 135 | 140 | 139 | 135 | 143 | 158 | 161 | 163 | 163 | 159 | 157 | 156 | 154 | 151 | 149 | 150 | 149 | 148 | 147 | 144 | 139 | 135 | 137 | 136 | 134 | 130 | 130 | 132 | 133 | 133 | 133 | 132 | 128 | 128 | 129 | 127 | 128 | 135 | 135 | 135 | 132 | 126 | 126 | 135 | 145 | 150 | 143 | 135 | 129 | 131 | 134 | 131 | 129 | 129 | 129 | 127 | 125 | 126 | . 251 144 | 146 | 147 | 146 | 148 | 150 | 150 | 150 | 153 | 152 | 153 | 155 | 155 | 154 | 154 | 156 | 153 | 157 | 157 | 153 | 152 | 158 | 164 | 166 | 157 | 158 | 158 | 156 | 152 | 150 | 151 | 152 | 151 | 152 | 153 | 154 | 154 | 155 | 158 | 161 | 154 | 149 | 143 | 141 | 146 | 151 | 150 | 145 | 150 | 158 | 162 | 160 | 159 | 160 | 159 | 155 | 153 | 153 | 154 | 154 | 153 | 150 | 146 | 142 | 139 | 140 | 139 | 136 | 133 | 133 | 133 | 133 | 131 | 130 | 126 | 127 | 129 | 127 | 128 | 135 | 133 | 134 | 132 | 126 | 125 | 131 | 140 | 146 | 138 | 138 | 135 | 133 | 130 | 129 | 129 | 129 | 130 | 128 | 126 | 125 | . 252 143 | 145 | 145 | 145 | 146 | 149 | 149 | 149 | 149 | 148 | 150 | 152 | 154 | 153 | 153 | 154 | 157 | 156 | 156 | 157 | 159 | 159 | 157 | 156 | 155 | 159 | 162 | 160 | 156 | 153 | 153 | 154 | 149 | 149 | 151 | 154 | 158 | 159 | 156 | 152 | 148 | 158 | 162 | 156 | 152 | 155 | 153 | 148 | 147 | 154 | 157 | 154 | 153 | 156 | 157 | 155 | 153 | 154 | 155 | 157 | 157 | 155 | 153 | 152 | 140 | 143 | 144 | 142 | 138 | 136 | 134 | 132 | 131 | 130 | 127 | 128 | 131 | 129 | 129 | 134 | 133 | 132 | 133 | 135 | 136 | 137 | 141 | 145 | 144 | 148 | 145 | 137 | 133 | 135 | 133 | 128 | 128 | 129 | 129 | 128 | . 253 143 | 145 | 145 | 144 | 145 | 147 | 148 | 147 | 149 | 148 | 149 | 151 | 152 | 152 | 152 | 154 | 155 | 155 | 156 | 157 | 157 | 155 | 157 | 160 | 153 | 156 | 160 | 160 | 159 | 157 | 156 | 157 | 150 | 150 | 150 | 153 | 156 | 157 | 153 | 147 | 142 | 152 | 161 | 160 | 153 | 148 | 149 | 151 | 148 | 150 | 150 | 147 | 148 | 153 | 156 | 156 | 157 | 156 | 156 | 157 | 156 | 154 | 153 | 153 | 143 | 146 | 148 | 146 | 143 | 140 | 136 | 133 | 133 | 132 | 129 | 131 | 133 | 130 | 127 | 132 | 130 | 128 | 131 | 139 | 145 | 145 | 143 | 143 | 140 | 141 | 137 | 131 | 133 | 139 | 134 | 125 | 126 | 129 | 132 | 132 | . 254 145 | 146 | 145 | 144 | 144 | 145 | 146 | 146 | 150 | 148 | 148 | 150 | 151 | 151 | 152 | 154 | 150 | 155 | 156 | 152 | 149 | 153 | 160 | 165 | 156 | 155 | 155 | 157 | 160 | 160 | 159 | 157 | 159 | 156 | 150 | 143 | 142 | 148 | 154 | 158 | 160 | 152 | 148 | 153 | 160 | 161 | 156 | 150 | 151 | 149 | 147 | 148 | 151 | 154 | 156 | 156 | 157 | 156 | 156 | 156 | 154 | 151 | 150 | 151 | 148 | 150 | 150 | 148 | 145 | 143 | 140 | 138 | 135 | 133 | 130 | 131 | 133 | 129 | 126 | 130 | 128 | 127 | 129 | 135 | 143 | 146 | 142 | 136 | 132 | 129 | 125 | 125 | 130 | 134 | 133 | 129 | 130 | 131 | 131 | 131 | . 255 147 | 147 | 146 | 143 | 143 | 144 | 145 | 144 | 147 | 146 | 145 | 147 | 148 | 148 | 150 | 153 | 153 | 156 | 154 | 150 | 153 | 161 | 159 | 151 | 162 | 157 | 153 | 154 | 160 | 163 | 160 | 156 | 147 | 154 | 159 | 156 | 150 | 148 | 148 | 149 | 158 | 160 | 159 | 153 | 150 | 154 | 160 | 163 | 155 | 151 | 150 | 154 | 157 | 155 | 152 | 150 | 151 | 151 | 152 | 154 | 154 | 152 | 151 | 153 | 152 | 152 | 151 | 148 | 146 | 145 | 144 | 142 | 135 | 133 | 129 | 130 | 132 | 129 | 126 | 130 | 129 | 131 | 130 | 130 | 137 | 143 | 139 | 129 | 133 | 129 | 127 | 131 | 131 | 130 | 133 | 140 | 137 | 133 | 128 | 126 | . 256 146 | 147 | 148 | 147 | 146 | 146 | 148 | 151 | 143 | 146 | 147 | 147 | 147 | 148 | 149 | 148 | 149 | 151 | 149 | 146 | 146 | 149 | 151 | 149 | 157 | 157 | 158 | 156 | 149 | 145 | 156 | 171 | 161 | 151 | 150 | 157 | 161 | 160 | 155 | 148 | 154 | 150 | 151 | 154 | 153 | 150 | 155 | 163 | 163 | 158 | 156 | 159 | 158 | 153 | 150 | 151 | 151 | 152 | 151 | 150 | 152 | 156 | 156 | 154 | 152 | 152 | 152 | 151 | 150 | 148 | 147 | 146 | 138 | 139 | 137 | 132 | 128 | 127 | 127 | 126 | 130 | 130 | 132 | 136 | 138 | 138 | 141 | 144 | 142 | 138 | 133 | 130 | 129 | 129 | 129 | 129 | 140 | 127 | 127 | 128 | . 257 144 | 145 | 146 | 146 | 145 | 145 | 146 | 148 | 149 | 148 | 146 | 142 | 141 | 143 | 146 | 146 | 146 | 147 | 146 | 145 | 146 | 148 | 150 | 150 | 148 | 153 | 157 | 156 | 151 | 150 | 153 | 156 | 166 | 163 | 159 | 150 | 145 | 152 | 159 | 159 | 143 | 142 | 145 | 152 | 158 | 159 | 154 | 150 | 157 | 161 | 163 | 160 | 160 | 163 | 162 | 158 | 150 | 152 | 153 | 152 | 153 | 153 | 151 | 147 | 154 | 153 | 152 | 150 | 149 | 148 | 148 | 148 | 145 | 143 | 138 | 133 | 130 | 130 | 129 | 128 | 131 | 129 | 129 | 131 | 134 | 136 | 141 | 146 | 144 | 141 | 137 | 133 | 131 | 130 | 129 | 128 | 131 | 124 | 129 | 131 | . 258 143 | 144 | 146 | 146 | 145 | 145 | 146 | 147 | 149 | 148 | 144 | 139 | 138 | 140 | 142 | 143 | 146 | 144 | 144 | 146 | 147 | 147 | 149 | 151 | 146 | 154 | 157 | 153 | 153 | 158 | 156 | 150 | 158 | 160 | 162 | 158 | 150 | 151 | 155 | 156 | 169 | 157 | 142 | 135 | 143 | 155 | 159 | 156 | 156 | 161 | 162 | 158 | 157 | 160 | 162 | 161 | 162 | 160 | 155 | 149 | 146 | 148 | 151 | 152 | 153 | 153 | 152 | 152 | 151 | 151 | 150 | 150 | 147 | 144 | 138 | 132 | 131 | 132 | 131 | 129 | 130 | 128 | 128 | 129 | 131 | 133 | 138 | 142 | 139 | 137 | 134 | 132 | 130 | 128 | 126 | 124 | 128 | 123 | 132 | 136 | . 259 143 | 145 | 146 | 146 | 145 | 145 | 145 | 144 | 145 | 146 | 145 | 143 | 142 | 143 | 144 | 143 | 147 | 145 | 145 | 148 | 149 | 147 | 149 | 152 | 151 | 155 | 153 | 148 | 151 | 159 | 161 | 156 | 151 | 146 | 153 | 166 | 165 | 156 | 150 | 149 | 149 | 161 | 170 | 165 | 154 | 148 | 148 | 151 | 154 | 153 | 155 | 160 | 159 | 154 | 153 | 156 | 157 | 159 | 161 | 160 | 158 | 155 | 154 | 153 | 150 | 151 | 153 | 154 | 154 | 153 | 151 | 150 | 144 | 143 | 139 | 135 | 133 | 133 | 132 | 130 | 128 | 128 | 129 | 130 | 130 | 130 | 131 | 133 | 130 | 129 | 128 | 127 | 126 | 125 | 124 | 123 | 128 | 124 | 131 | 139 | . 260 143 | 146 | 146 | 145 | 144 | 145 | 144 | 142 | 145 | 147 | 149 | 148 | 147 | 148 | 148 | 147 | 149 | 146 | 147 | 149 | 150 | 147 | 147 | 150 | 153 | 153 | 150 | 147 | 149 | 154 | 158 | 158 | 156 | 145 | 145 | 155 | 158 | 157 | 157 | 157 | 159 | 153 | 149 | 155 | 163 | 163 | 157 | 151 | 149 | 148 | 152 | 160 | 162 | 158 | 154 | 154 | 153 | 155 | 159 | 161 | 161 | 160 | 160 | 161 | 152 | 153 | 153 | 154 | 153 | 153 | 152 | 151 | 145 | 147 | 146 | 142 | 138 | 135 | 133 | 131 | 128 | 129 | 130 | 130 | 129 | 128 | 128 | 127 | 127 | 127 | 126 | 125 | 125 | 125 | 126 | 126 | 127 | 123 | 128 | 134 | . 261 147 | 149 | 148 | 145 | 145 | 147 | 147 | 145 | 146 | 148 | 148 | 146 | 146 | 147 | 148 | 148 | 147 | 147 | 147 | 148 | 148 | 147 | 147 | 147 | 149 | 150 | 152 | 153 | 153 | 152 | 153 | 155 | 159 | 155 | 150 | 144 | 144 | 155 | 163 | 162 | 155 | 154 | 156 | 158 | 156 | 153 | 156 | 161 | 154 | 156 | 153 | 150 | 152 | 158 | 160 | 156 | 161 | 158 | 154 | 153 | 153 | 155 | 160 | 164 | 158 | 157 | 155 | 153 | 151 | 151 | 152 | 153 | 151 | 154 | 155 | 151 | 145 | 141 | 137 | 134 | 134 | 134 | 133 | 130 | 128 | 129 | 130 | 130 | 128 | 128 | 127 | 125 | 124 | 124 | 126 | 127 | 127 | 128 | 129 | 127 | . 262 147 | 149 | 148 | 144 | 144 | 148 | 149 | 147 | 145 | 146 | 146 | 145 | 144 | 145 | 146 | 145 | 144 | 146 | 147 | 147 | 147 | 148 | 148 | 147 | 146 | 149 | 152 | 155 | 155 | 153 | 153 | 154 | 154 | 159 | 160 | 153 | 148 | 154 | 158 | 152 | 162 | 162 | 159 | 155 | 154 | 155 | 157 | 158 | 161 | 161 | 156 | 148 | 148 | 154 | 157 | 156 | 156 | 155 | 156 | 159 | 159 | 156 | 154 | 154 | 160 | 159 | 157 | 155 | 154 | 153 | 153 | 153 | 153 | 155 | 155 | 152 | 149 | 147 | 144 | 142 | 141 | 141 | 138 | 133 | 130 | 131 | 132 | 132 | 130 | 130 | 129 | 127 | 125 | 124 | 125 | 126 | 128 | 131 | 130 | 124 | . 263 144 | 145 | 143 | 140 | 141 | 146 | 147 | 145 | 143 | 146 | 148 | 148 | 147 | 147 | 147 | 145 | 142 | 146 | 147 | 146 | 147 | 150 | 150 | 147 | 144 | 148 | 150 | 150 | 151 | 154 | 156 | 156 | 150 | 154 | 162 | 165 | 160 | 154 | 149 | 141 | 148 | 160 | 166 | 162 | 157 | 158 | 159 | 156 | 155 | 155 | 158 | 163 | 160 | 153 | 151 | 153 | 156 | 154 | 153 | 156 | 159 | 159 | 160 | 161 | 157 | 158 | 159 | 159 | 159 | 157 | 154 | 152 | 150 | 150 | 149 | 149 | 150 | 152 | 151 | 149 | 147 | 147 | 144 | 138 | 134 | 134 | 133 | 132 | 132 | 133 | 132 | 131 | 128 | 127 | 127 | 127 | 125 | 128 | 128 | 125 | . 264 149 | 142 | 139 | 143 | 147 | 147 | 146 | 146 | 146 | 147 | 147 | 146 | 145 | 145 | 147 | 148 | 148 | 146 | 146 | 146 | 146 | 146 | 148 | 151 | 149 | 148 | 148 | 149 | 149 | 149 | 151 | 155 | 155 | 155 | 156 | 159 | 163 | 161 | 152 | 142 | 149 | 150 | 159 | 167 | 163 | 156 | 156 | 158 | 157 | 160 | 159 | 156 | 158 | 162 | 160 | 153 | 155 | 155 | 156 | 156 | 156 | 156 | 156 | 155 | 162 | 160 | 158 | 157 | 158 | 159 | 159 | 158 | 152 | 151 | 151 | 152 | 153 | 154 | 153 | 152 | 150 | 150 | 148 | 144 | 140 | 138 | 137 | 138 | 135 | 135 | 135 | 134 | 131 | 129 | 127 | 127 | 128 | 129 | 130 | 131 | . 265 145 | 145 | 146 | 146 | 144 | 142 | 144 | 146 | 143 | 144 | 146 | 147 | 146 | 145 | 145 | 145 | 149 | 147 | 146 | 146 | 145 | 144 | 145 | 148 | 148 | 148 | 149 | 151 | 151 | 150 | 151 | 154 | 153 | 153 | 155 | 158 | 163 | 165 | 161 | 155 | 152 | 143 | 144 | 154 | 163 | 165 | 162 | 156 | 156 | 157 | 158 | 158 | 158 | 159 | 159 | 158 | 155 | 155 | 154 | 154 | 154 | 155 | 155 | 155 | 158 | 158 | 158 | 157 | 157 | 157 | 158 | 158 | 162 | 160 | 157 | 154 | 152 | 153 | 155 | 157 | 151 | 152 | 152 | 150 | 146 | 143 | 141 | 141 | 138 | 137 | 137 | 137 | 137 | 134 | 130 | 127 | 129 | 132 | 133 | 131 | . 266 141 | 144 | 144 | 140 | 137 | 137 | 140 | 142 | 144 | 145 | 146 | 147 | 146 | 146 | 146 | 147 | 148 | 146 | 146 | 145 | 144 | 143 | 144 | 146 | 147 | 147 | 149 | 152 | 152 | 150 | 150 | 152 | 150 | 151 | 151 | 153 | 158 | 163 | 164 | 162 | 160 | 152 | 147 | 146 | 150 | 158 | 165 | 165 | 160 | 157 | 155 | 157 | 158 | 157 | 158 | 162 | 158 | 157 | 156 | 155 | 155 | 154 | 154 | 154 | 156 | 157 | 159 | 158 | 157 | 156 | 157 | 159 | 159 | 157 | 154 | 150 | 146 | 146 | 149 | 152 | 151 | 153 | 154 | 153 | 151 | 148 | 146 | 145 | 145 | 142 | 139 | 139 | 141 | 140 | 135 | 131 | 131 | 130 | 133 | 142 | . 267 151 | 151 | 147 | 142 | 142 | 146 | 147 | 145 | 146 | 146 | 144 | 143 | 144 | 145 | 147 | 149 | 145 | 144 | 144 | 145 | 145 | 144 | 145 | 148 | 146 | 147 | 149 | 150 | 151 | 150 | 150 | 150 | 150 | 151 | 150 | 149 | 152 | 156 | 159 | 160 | 166 | 166 | 163 | 153 | 144 | 148 | 159 | 163 | 166 | 160 | 155 | 155 | 157 | 158 | 159 | 160 | 161 | 160 | 159 | 158 | 156 | 154 | 152 | 151 | 154 | 156 | 157 | 158 | 158 | 157 | 158 | 159 | 155 | 156 | 156 | 154 | 152 | 150 | 150 | 150 | 150 | 151 | 152 | 152 | 152 | 150 | 149 | 149 | 151 | 147 | 142 | 140 | 141 | 141 | 139 | 137 | 131 | 132 | 132 | 134 | . 268 146 | 147 | 144 | 139 | 139 | 142 | 141 | 138 | 144 | 143 | 142 | 141 | 142 | 143 | 145 | 145 | 144 | 143 | 143 | 145 | 145 | 145 | 146 | 148 | 146 | 147 | 147 | 147 | 148 | 149 | 149 | 148 | 151 | 152 | 151 | 150 | 150 | 154 | 157 | 158 | 163 | 165 | 168 | 164 | 157 | 155 | 153 | 147 | 161 | 162 | 161 | 157 | 156 | 157 | 158 | 158 | 160 | 160 | 160 | 159 | 157 | 155 | 152 | 150 | 152 | 152 | 153 | 155 | 158 | 159 | 159 | 159 | 155 | 155 | 157 | 158 | 159 | 157 | 154 | 151 | 151 | 150 | 149 | 149 | 150 | 151 | 152 | 152 | 152 | 150 | 146 | 144 | 142 | 142 | 141 | 141 | 140 | 137 | 133 | 128 | . 269 145 | 149 | 152 | 150 | 146 | 143 | 142 | 141 | 141 | 142 | 143 | 145 | 146 | 145 | 143 | 141 | 144 | 143 | 143 | 145 | 145 | 144 | 145 | 147 | 146 | 147 | 146 | 145 | 146 | 148 | 148 | 147 | 147 | 149 | 149 | 149 | 150 | 153 | 156 | 156 | 156 | 159 | 166 | 168 | 165 | 164 | 160 | 152 | 151 | 160 | 165 | 162 | 157 | 156 | 156 | 157 | 159 | 160 | 161 | 161 | 161 | 159 | 157 | 156 | 151 | 150 | 150 | 152 | 156 | 158 | 159 | 158 | 155 | 155 | 154 | 156 | 157 | 157 | 154 | 152 | 154 | 152 | 150 | 149 | 150 | 152 | 153 | 154 | 149 | 150 | 151 | 150 | 147 | 144 | 143 | 142 | 146 | 143 | 140 | 139 | . 270 140 | 143 | 146 | 148 | 146 | 141 | 139 | 139 | 143 | 144 | 146 | 148 | 149 | 147 | 143 | 140 | 143 | 142 | 143 | 144 | 144 | 143 | 144 | 146 | 146 | 147 | 146 | 145 | 146 | 148 | 148 | 146 | 145 | 146 | 147 | 147 | 148 | 152 | 154 | 154 | 154 | 156 | 162 | 165 | 162 | 164 | 167 | 166 | 154 | 155 | 157 | 159 | 160 | 157 | 155 | 154 | 159 | 159 | 160 | 160 | 161 | 161 | 161 | 161 | 156 | 155 | 153 | 153 | 153 | 155 | 156 | 157 | 159 | 158 | 158 | 157 | 158 | 158 | 157 | 157 | 157 | 155 | 153 | 152 | 153 | 153 | 153 | 152 | 149 | 151 | 153 | 153 | 151 | 148 | 147 | 146 | 145 | 148 | 149 | 143 | . 271 147 | 142 | 141 | 146 | 150 | 149 | 145 | 144 | 144 | 144 | 145 | 146 | 147 | 146 | 143 | 140 | 141 | 141 | 142 | 143 | 143 | 143 | 143 | 145 | 146 | 147 | 146 | 145 | 146 | 149 | 148 | 145 | 146 | 147 | 147 | 147 | 148 | 151 | 152 | 151 | 154 | 151 | 155 | 161 | 162 | 164 | 165 | 162 | 166 | 152 | 144 | 152 | 162 | 161 | 155 | 151 | 157 | 157 | 156 | 156 | 156 | 157 | 158 | 159 | 162 | 161 | 159 | 155 | 152 | 151 | 153 | 155 | 154 | 156 | 157 | 156 | 155 | 155 | 156 | 157 | 158 | 157 | 156 | 155 | 155 | 153 | 151 | 149 | 151 | 152 | 152 | 153 | 152 | 151 | 151 | 151 | 151 | 149 | 148 | 148 | . 272 148 | 147 | 145 | 144 | 145 | 146 | 148 | 149 | 146 | 144 | 142 | 142 | 143 | 145 | 146 | 146 | 143 | 144 | 145 | 145 | 148 | 149 | 147 | 143 | 146 | 145 | 146 | 146 | 143 | 141 | 143 | 147 | 148 | 147 | 147 | 148 | 149 | 150 | 150 | 150 | 152 | 152 | 154 | 158 | 160 | 160 | 161 | 162 | 168 | 167 | 157 | 150 | 155 | 157 | 155 | 158 | 150 | 154 | 157 | 157 | 157 | 157 | 157 | 155 | 159 | 159 | 161 | 162 | 161 | 158 | 155 | 152 | 153 | 154 | 155 | 155 | 154 | 154 | 155 | 155 | 154 | 155 | 155 | 154 | 153 | 153 | 155 | 156 | 153 | 152 | 151 | 151 | 151 | 151 | 151 | 151 | 151 | 150 | 148 | 147 | . 273 147 | 147 | 146 | 145 | 145 | 146 | 147 | 148 | 144 | 143 | 143 | 144 | 145 | 146 | 145 | 145 | 143 | 144 | 144 | 144 | 145 | 146 | 144 | 141 | 144 | 142 | 141 | 142 | 142 | 141 | 141 | 143 | 144 | 144 | 145 | 147 | 149 | 151 | 152 | 152 | 152 | 151 | 152 | 156 | 159 | 159 | 159 | 159 | 157 | 166 | 170 | 164 | 157 | 152 | 153 | 158 | 151 | 153 | 155 | 156 | 156 | 155 | 156 | 157 | 156 | 156 | 157 | 158 | 159 | 158 | 157 | 156 | 156 | 156 | 156 | 155 | 154 | 154 | 156 | 157 | 155 | 155 | 156 | 156 | 155 | 154 | 155 | 156 | 154 | 153 | 151 | 150 | 149 | 148 | 147 | 145 | 151 | 150 | 149 | 149 | . 274 145 | 146 | 146 | 146 | 146 | 145 | 145 | 145 | 146 | 145 | 144 | 144 | 143 | 142 | 141 | 140 | 143 | 144 | 143 | 142 | 143 | 144 | 143 | 140 | 146 | 143 | 141 | 143 | 145 | 145 | 144 | 143 | 144 | 144 | 145 | 147 | 147 | 148 | 148 | 148 | 151 | 150 | 151 | 155 | 157 | 158 | 157 | 158 | 160 | 164 | 169 | 169 | 164 | 160 | 157 | 152 | 153 | 151 | 152 | 154 | 155 | 153 | 155 | 158 | 155 | 155 | 154 | 155 | 157 | 158 | 159 | 160 | 157 | 157 | 157 | 156 | 155 | 155 | 155 | 156 | 154 | 154 | 155 | 155 | 154 | 154 | 154 | 154 | 154 | 152 | 151 | 151 | 153 | 153 | 151 | 150 | 150 | 150 | 149 | 149 | . 275 143 | 144 | 145 | 145 | 145 | 144 | 143 | 143 | 148 | 147 | 145 | 143 | 142 | 142 | 142 | 142 | 143 | 144 | 143 | 142 | 142 | 144 | 143 | 141 | 147 | 145 | 144 | 146 | 148 | 148 | 147 | 146 | 145 | 146 | 147 | 148 | 147 | 147 | 146 | 146 | 150 | 150 | 151 | 154 | 156 | 156 | 157 | 159 | 164 | 157 | 159 | 163 | 166 | 171 | 168 | 157 | 160 | 153 | 150 | 154 | 155 | 153 | 154 | 157 | 157 | 156 | 155 | 156 | 157 | 159 | 160 | 160 | 156 | 158 | 159 | 159 | 158 | 156 | 154 | 154 | 154 | 154 | 154 | 154 | 154 | 154 | 155 | 155 | 152 | 151 | 150 | 152 | 155 | 156 | 154 | 152 | 151 | 151 | 151 | 150 | . 276 143 | 144 | 145 | 146 | 146 | 145 | 144 | 143 | 145 | 145 | 146 | 146 | 145 | 145 | 145 | 146 | 143 | 144 | 144 | 142 | 143 | 145 | 145 | 144 | 143 | 144 | 144 | 144 | 144 | 144 | 145 | 145 | 142 | 144 | 146 | 148 | 149 | 149 | 150 | 151 | 147 | 148 | 151 | 153 | 153 | 153 | 155 | 159 | 157 | 154 | 158 | 160 | 159 | 166 | 174 | 172 | 167 | 159 | 153 | 156 | 159 | 156 | 155 | 157 | 158 | 157 | 156 | 157 | 158 | 158 | 159 | 159 | 159 | 159 | 160 | 160 | 159 | 157 | 157 | 156 | 157 | 156 | 155 | 155 | 155 | 156 | 157 | 157 | 154 | 152 | 151 | 152 | 153 | 152 | 150 | 148 | 151 | 151 | 152 | 153 | . 277 144 | 145 | 146 | 147 | 147 | 146 | 146 | 145 | 143 | 145 | 147 | 148 | 146 | 144 | 141 | 140 | 142 | 144 | 144 | 143 | 144 | 146 | 147 | 146 | 140 | 143 | 144 | 143 | 140 | 141 | 142 | 144 | 140 | 142 | 144 | 146 | 146 | 146 | 147 | 149 | 145 | 146 | 149 | 151 | 150 | 150 | 152 | 156 | 156 | 158 | 160 | 159 | 156 | 159 | 166 | 168 | 170 | 164 | 160 | 161 | 162 | 160 | 158 | 158 | 157 | 156 | 156 | 157 | 158 | 158 | 158 | 157 | 162 | 162 | 161 | 159 | 159 | 159 | 160 | 162 | 158 | 156 | 155 | 155 | 155 | 155 | 155 | 155 | 157 | 156 | 155 | 155 | 155 | 154 | 153 | 152 | 153 | 152 | 151 | 151 | . 278 144 | 145 | 145 | 145 | 146 | 146 | 146 | 146 | 146 | 147 | 148 | 147 | 144 | 141 | 139 | 138 | 141 | 143 | 144 | 143 | 143 | 145 | 146 | 145 | 141 | 145 | 146 | 143 | 140 | 141 | 143 | 144 | 143 | 144 | 145 | 144 | 141 | 140 | 141 | 142 | 147 | 146 | 146 | 149 | 150 | 150 | 150 | 152 | 157 | 159 | 157 | 155 | 157 | 158 | 158 | 158 | 165 | 165 | 164 | 163 | 161 | 159 | 159 | 160 | 158 | 158 | 158 | 158 | 158 | 158 | 157 | 156 | 160 | 160 | 160 | 160 | 160 | 160 | 161 | 162 | 159 | 158 | 157 | 157 | 157 | 156 | 153 | 152 | 155 | 156 | 157 | 157 | 156 | 157 | 158 | 159 | 156 | 154 | 152 | 151 | . 279 143 | 143 | 143 | 143 | 144 | 145 | 146 | 146 | 149 | 149 | 148 | 146 | 144 | 144 | 146 | 148 | 140 | 142 | 143 | 143 | 143 | 144 | 145 | 144 | 143 | 146 | 146 | 143 | 141 | 143 | 144 | 144 | 146 | 146 | 147 | 145 | 142 | 140 | 141 | 142 | 151 | 147 | 145 | 148 | 151 | 151 | 150 | 149 | 148 | 155 | 154 | 152 | 157 | 158 | 157 | 163 | 158 | 163 | 166 | 163 | 159 | 157 | 159 | 160 | 162 | 161 | 160 | 159 | 159 | 158 | 157 | 156 | 154 | 157 | 160 | 162 | 162 | 160 | 159 | 158 | 164 | 163 | 163 | 162 | 162 | 159 | 155 | 152 | 152 | 153 | 154 | 153 | 151 | 151 | 153 | 155 | 159 | 158 | 157 | 156 | . 280 148 | 145 | 140 | 138 | 140 | 143 | 143 | 141 | 142 | 143 | 144 | 146 | 147 | 147 | 147 | 146 | 143 | 141 | 142 | 145 | 146 | 145 | 146 | 147 | 143 | 145 | 146 | 145 | 145 | 146 | 144 | 142 | 140 | 142 | 145 | 146 | 146 | 146 | 146 | 146 | 146 | 147 | 148 | 148 | 147 | 148 | 150 | 152 | 152 | 150 | 152 | 156 | 156 | 154 | 155 | 158 | 162 | 158 | 162 | 166 | 164 | 165 | 160 | 146 | 152 | 159 | 162 | 159 | 160 | 164 | 161 | 153 | 151 | 157 | 159 | 159 | 160 | 157 | 155 | 157 | 161 | 159 | 157 | 158 | 160 | 161 | 160 | 159 | 156 | 154 | 152 | 152 | 153 | 155 | 154 | 152 | 154 | 154 | 153 | 154 | . 281 144 | 144 | 142 | 139 | 138 | 141 | 143 | 144 | 141 | 143 | 144 | 145 | 146 | 146 | 147 | 148 | 147 | 145 | 145 | 146 | 147 | 145 | 146 | 147 | 143 | 144 | 145 | 144 | 144 | 146 | 145 | 144 | 140 | 141 | 142 | 142 | 144 | 145 | 147 | 148 | 144 | 146 | 149 | 149 | 148 | 147 | 147 | 148 | 145 | 146 | 148 | 150 | 152 | 152 | 154 | 156 | 159 | 158 | 162 | 163 | 160 | 165 | 171 | 168 | 145 | 147 | 151 | 155 | 158 | 158 | 158 | 158 | 160 | 158 | 153 | 152 | 158 | 161 | 161 | 162 | 158 | 158 | 158 | 159 | 161 | 161 | 161 | 161 | 161 | 159 | 156 | 154 | 153 | 153 | 154 | 154 | 155 | 153 | 152 | 152 | . 282 143 | 146 | 146 | 142 | 138 | 139 | 143 | 145 | 143 | 144 | 145 | 146 | 145 | 146 | 147 | 148 | 148 | 147 | 146 | 146 | 145 | 144 | 143 | 144 | 143 | 144 | 144 | 143 | 143 | 145 | 147 | 146 | 146 | 145 | 143 | 143 | 143 | 143 | 143 | 143 | 142 | 144 | 147 | 149 | 148 | 147 | 146 | 146 | 144 | 146 | 148 | 148 | 150 | 153 | 155 | 155 | 153 | 155 | 161 | 163 | 160 | 163 | 167 | 166 | 175 | 158 | 148 | 152 | 154 | 150 | 152 | 160 | 162 | 164 | 161 | 158 | 157 | 156 | 157 | 162 | 159 | 160 | 160 | 160 | 159 | 158 | 158 | 158 | 162 | 162 | 161 | 157 | 153 | 151 | 150 | 150 | 155 | 153 | 152 | 152 | . 283 148 | 150 | 150 | 146 | 142 | 141 | 142 | 142 | 143 | 145 | 147 | 147 | 145 | 145 | 145 | 147 | 146 | 146 | 147 | 146 | 145 | 144 | 143 | 143 | 144 | 144 | 143 | 142 | 142 | 145 | 147 | 147 | 149 | 148 | 147 | 147 | 146 | 144 | 141 | 139 | 141 | 143 | 145 | 147 | 147 | 147 | 147 | 148 | 147 | 151 | 151 | 149 | 149 | 153 | 154 | 153 | 151 | 153 | 157 | 161 | 162 | 161 | 158 | 154 | 167 | 171 | 159 | 137 | 132 | 147 | 154 | 148 | 154 | 159 | 162 | 163 | 162 | 158 | 156 | 160 | 159 | 160 | 161 | 159 | 157 | 156 | 156 | 157 | 158 | 159 | 160 | 160 | 158 | 155 | 152 | 151 | 152 | 152 | 153 | 153 | . 284 149 | 149 | 148 | 146 | 147 | 147 | 143 | 139 | 141 | 143 | 145 | 145 | 145 | 144 | 144 | 144 | 144 | 146 | 148 | 149 | 148 | 147 | 146 | 145 | 145 | 146 | 144 | 142 | 142 | 145 | 146 | 147 | 146 | 147 | 147 | 148 | 149 | 148 | 147 | 146 | 144 | 144 | 144 | 144 | 145 | 146 | 148 | 149 | 148 | 151 | 151 | 148 | 147 | 150 | 151 | 150 | 154 | 154 | 154 | 155 | 159 | 160 | 160 | 161 | 155 | 162 | 165 | 155 | 142 | 138 | 143 | 149 | 150 | 148 | 145 | 152 | 163 | 166 | 163 | 164 | 159 | 160 | 161 | 160 | 158 | 157 | 159 | 162 | 156 | 156 | 157 | 159 | 162 | 162 | 161 | 159 | 153 | 154 | 154 | 154 | . 285 147 | 146 | 144 | 145 | 148 | 149 | 146 | 141 | 139 | 139 | 141 | 142 | 143 | 144 | 143 | 143 | 140 | 144 | 147 | 148 | 147 | 147 | 146 | 145 | 146 | 147 | 145 | 143 | 143 | 145 | 146 | 146 | 146 | 147 | 146 | 146 | 146 | 148 | 150 | 152 | 148 | 146 | 145 | 143 | 143 | 145 | 147 | 148 | 147 | 148 | 149 | 148 | 148 | 149 | 150 | 150 | 150 | 155 | 156 | 156 | 157 | 156 | 158 | 166 | 164 | 156 | 161 | 173 | 168 | 151 | 148 | 161 | 159 | 152 | 144 | 143 | 151 | 155 | 159 | 166 | 163 | 164 | 164 | 163 | 160 | 159 | 160 | 161 | 163 | 160 | 157 | 157 | 159 | 160 | 160 | 158 | 158 | 159 | 158 | 156 | . 286 147 | 147 | 146 | 145 | 145 | 147 | 146 | 144 | 142 | 141 | 140 | 141 | 143 | 144 | 144 | 143 | 140 | 143 | 146 | 145 | 144 | 145 | 146 | 145 | 146 | 147 | 146 | 144 | 144 | 146 | 146 | 145 | 145 | 146 | 147 | 145 | 143 | 144 | 147 | 150 | 147 | 146 | 145 | 144 | 144 | 145 | 145 | 145 | 145 | 146 | 147 | 149 | 149 | 149 | 150 | 152 | 147 | 154 | 155 | 157 | 160 | 155 | 153 | 159 | 150 | 156 | 158 | 155 | 161 | 171 | 170 | 160 | 165 | 163 | 157 | 152 | 148 | 144 | 148 | 159 | 164 | 165 | 166 | 165 | 163 | 161 | 160 | 160 | 166 | 163 | 160 | 158 | 157 | 156 | 154 | 153 | 160 | 159 | 158 | 158 | . 287 150 | 152 | 152 | 147 | 142 | 142 | 144 | 146 | 149 | 145 | 142 | 141 | 143 | 145 | 145 | 143 | 142 | 146 | 147 | 145 | 144 | 145 | 147 | 147 | 146 | 147 | 147 | 145 | 145 | 147 | 147 | 145 | 140 | 143 | 146 | 146 | 143 | 143 | 145 | 148 | 144 | 144 | 145 | 145 | 146 | 145 | 144 | 144 | 144 | 142 | 144 | 148 | 149 | 147 | 147 | 151 | 150 | 152 | 149 | 152 | 160 | 158 | 153 | 157 | 152 | 153 | 159 | 162 | 158 | 152 | 155 | 163 | 161 | 162 | 161 | 162 | 161 | 152 | 147 | 150 | 157 | 159 | 162 | 164 | 165 | 164 | 163 | 163 | 161 | 162 | 164 | 163 | 161 | 158 | 156 | 155 | 156 | 154 | 154 | 157 | . 288 144 | 147 | 151 | 151 | 147 | 143 | 145 | 150 | 144 | 148 | 148 | 144 | 142 | 144 | 144 | 142 | 144 | 144 | 144 | 143 | 143 | 145 | 145 | 144 | 146 | 148 | 147 | 144 | 143 | 147 | 148 | 147 | 144 | 147 | 147 | 145 | 146 | 148 | 147 | 144 | 145 | 144 | 143 | 140 | 137 | 140 | 144 | 141 | 142 | 144 | 146 | 146 | 146 | 146 | 147 | 149 | 148 | 149 | 149 | 149 | 150 | 154 | 156 | 156 | 158 | 152 | 148 | 151 | 155 | 156 | 155 | 155 | 163 | 159 | 155 | 157 | 163 | 165 | 159 | 151 | 149 | 158 | 161 | 161 | 164 | 165 | 164 | 164 | 161 | 164 | 162 | 158 | 159 | 164 | 165 | 161 | 159 | 157 | 156 | 157 | . 289 148 | 141 | 136 | 140 | 147 | 150 | 148 | 146 | 146 | 150 | 151 | 145 | 140 | 141 | 144 | 144 | 143 | 145 | 144 | 142 | 141 | 143 | 144 | 143 | 141 | 143 | 145 | 144 | 144 | 145 | 145 | 144 | 146 | 146 | 144 | 142 | 143 | 145 | 146 | 145 | 144 | 144 | 146 | 145 | 141 | 142 | 143 | 140 | 143 | 144 | 145 | 145 | 145 | 146 | 148 | 150 | 148 | 149 | 148 | 147 | 148 | 151 | 152 | 152 | 155 | 160 | 156 | 143 | 138 | 147 | 156 | 156 | 154 | 157 | 159 | 158 | 157 | 160 | 163 | 165 | 169 | 159 | 149 | 153 | 162 | 162 | 160 | 163 | 165 | 163 | 165 | 169 | 166 | 158 | 159 | 166 | 165 | 162 | 159 | 158 | . 290 173 | 165 | 155 | 148 | 145 | 145 | 146 | 148 | 140 | 144 | 147 | 148 | 149 | 150 | 146 | 140 | 146 | 147 | 147 | 144 | 143 | 143 | 144 | 144 | 143 | 143 | 144 | 145 | 145 | 143 | 142 | 143 | 145 | 144 | 145 | 148 | 148 | 147 | 147 | 147 | 145 | 145 | 147 | 147 | 144 | 144 | 145 | 141 | 142 | 142 | 142 | 142 | 143 | 144 | 145 | 146 | 148 | 149 | 148 | 147 | 147 | 149 | 150 | 149 | 150 | 155 | 157 | 152 | 144 | 141 | 145 | 150 | 152 | 155 | 156 | 155 | 155 | 157 | 160 | 161 | 154 | 163 | 163 | 158 | 159 | 160 | 158 | 156 | 161 | 164 | 165 | 164 | 162 | 162 | 163 | 164 | 165 | 162 | 159 | 159 | . 291 174 | 174 | 171 | 161 | 149 | 142 | 143 | 147 | 151 | 150 | 148 | 145 | 145 | 146 | 146 | 143 | 146 | 148 | 149 | 146 | 144 | 143 | 144 | 143 | 147 | 144 | 143 | 145 | 146 | 145 | 145 | 148 | 143 | 142 | 143 | 146 | 146 | 142 | 142 | 144 | 146 | 145 | 147 | 147 | 144 | 145 | 148 | 146 | 142 | 141 | 141 | 142 | 142 | 142 | 142 | 141 | 148 | 149 | 150 | 149 | 149 | 150 | 149 | 148 | 146 | 147 | 152 | 159 | 158 | 149 | 141 | 139 | 148 | 150 | 152 | 153 | 154 | 156 | 155 | 154 | 160 | 151 | 150 | 164 | 171 | 159 | 152 | 159 | 159 | 158 | 154 | 151 | 156 | 165 | 166 | 162 | 164 | 160 | 158 | 160 | . 292 168 | 170 | 173 | 173 | 169 | 160 | 148 | 140 | 142 | 146 | 149 | 149 | 147 | 147 | 148 | 150 | 144 | 146 | 147 | 145 | 143 | 142 | 142 | 140 | 145 | 142 | 142 | 145 | 147 | 146 | 147 | 149 | 150 | 146 | 144 | 145 | 143 | 141 | 143 | 148 | 146 | 144 | 147 | 148 | 145 | 145 | 147 | 145 | 141 | 142 | 143 | 144 | 144 | 144 | 143 | 143 | 145 | 148 | 150 | 150 | 150 | 150 | 149 | 147 | 145 | 150 | 151 | 149 | 154 | 159 | 153 | 141 | 139 | 146 | 151 | 151 | 149 | 151 | 155 | 157 | 158 | 161 | 155 | 147 | 151 | 161 | 164 | 163 | 165 | 153 | 147 | 153 | 158 | 157 | 158 | 163 | 167 | 164 | 161 | 162 | . 293 168 | 170 | 173 | 176 | 178 | 176 | 169 | 161 | 147 | 144 | 142 | 144 | 149 | 152 | 150 | 146 | 145 | 146 | 146 | 144 | 144 | 144 | 143 | 141 | 146 | 144 | 144 | 146 | 146 | 144 | 140 | 139 | 142 | 143 | 146 | 148 | 148 | 147 | 147 | 149 | 145 | 144 | 148 | 151 | 147 | 145 | 144 | 142 | 139 | 141 | 144 | 144 | 144 | 143 | 144 | 144 | 143 | 145 | 147 | 148 | 149 | 150 | 149 | 147 | 147 | 148 | 148 | 148 | 151 | 156 | 156 | 153 | 144 | 144 | 143 | 142 | 144 | 149 | 151 | 152 | 154 | 154 | 155 | 157 | 154 | 147 | 153 | 169 | 163 | 159 | 158 | 159 | 158 | 154 | 154 | 158 | 166 | 163 | 162 | 164 | . 294 156 | 160 | 162 | 163 | 167 | 174 | 180 | 183 | 181 | 167 | 151 | 143 | 144 | 146 | 146 | 143 | 148 | 147 | 145 | 143 | 144 | 147 | 147 | 145 | 148 | 148 | 147 | 146 | 145 | 144 | 140 | 135 | 132 | 137 | 141 | 143 | 143 | 143 | 144 | 143 | 145 | 143 | 147 | 151 | 148 | 145 | 145 | 143 | 139 | 142 | 144 | 143 | 141 | 140 | 142 | 145 | 143 | 145 | 145 | 145 | 146 | 148 | 149 | 148 | 148 | 145 | 146 | 152 | 153 | 150 | 152 | 157 | 154 | 148 | 141 | 139 | 144 | 149 | 147 | 142 | 143 | 151 | 152 | 149 | 156 | 163 | 156 | 146 | 157 | 162 | 163 | 160 | 158 | 158 | 157 | 154 | 160 | 159 | 159 | 161 | . 295 158 | 159 | 159 | 158 | 160 | 165 | 169 | 170 | 173 | 177 | 179 | 173 | 161 | 150 | 147 | 148 | 149 | 147 | 142 | 140 | 142 | 147 | 148 | 146 | 146 | 147 | 146 | 144 | 146 | 149 | 148 | 144 | 148 | 149 | 145 | 138 | 136 | 140 | 145 | 146 | 145 | 142 | 145 | 148 | 146 | 145 | 148 | 148 | 143 | 146 | 147 | 144 | 140 | 138 | 142 | 145 | 145 | 145 | 145 | 144 | 145 | 148 | 150 | 149 | 147 | 150 | 149 | 145 | 146 | 152 | 154 | 150 | 154 | 154 | 152 | 148 | 147 | 147 | 148 | 147 | 142 | 147 | 146 | 143 | 148 | 153 | 156 | 159 | 158 | 151 | 152 | 161 | 164 | 159 | 157 | 161 | 157 | 156 | 157 | 158 | . 296 154 | 156 | 156 | 156 | 155 | 156 | 158 | 161 | 164 | 166 | 169 | 174 | 179 | 179 | 171 | 162 | 147 | 148 | 150 | 149 | 144 | 140 | 143 | 148 | 146 | 145 | 145 | 147 | 147 | 146 | 143 | 141 | 147 | 146 | 145 | 145 | 143 | 140 | 134 | 129 | 140 | 143 | 146 | 146 | 144 | 144 | 147 | 150 | 143 | 144 | 143 | 141 | 139 | 139 | 137 | 135 | 140 | 145 | 147 | 142 | 139 | 142 | 147 | 149 | 144 | 147 | 150 | 150 | 149 | 148 | 149 | 151 | 149 | 153 | 154 | 152 | 149 | 148 | 147 | 146 | 144 | 144 | 146 | 148 | 148 | 146 | 147 | 150 | 169 | 159 | 149 | 148 | 154 | 161 | 161 | 159 | 161 | 159 | 160 | 163 | . 297 155 | 157 | 158 | 157 | 156 | 157 | 159 | 161 | 164 | 164 | 163 | 164 | 169 | 175 | 178 | 178 | 164 | 152 | 142 | 142 | 148 | 151 | 147 | 143 | 146 | 148 | 146 | 141 | 141 | 145 | 147 | 146 | 146 | 145 | 145 | 146 | 147 | 146 | 145 | 143 | 135 | 138 | 140 | 141 | 142 | 145 | 149 | 153 | 146 | 145 | 142 | 138 | 137 | 139 | 141 | 141 | 144 | 141 | 140 | 141 | 144 | 145 | 145 | 144 | 144 | 145 | 147 | 147 | 147 | 146 | 146 | 147 | 150 | 150 | 149 | 149 | 152 | 154 | 152 | 147 | 146 | 145 | 145 | 147 | 146 | 145 | 147 | 150 | 146 | 152 | 156 | 155 | 151 | 150 | 154 | 158 | 157 | 162 | 163 | 160 | . 298 161 | 162 | 162 | 162 | 161 | 161 | 163 | 164 | 162 | 163 | 163 | 161 | 160 | 163 | 166 | 167 | 180 | 177 | 171 | 160 | 148 | 141 | 144 | 150 | 142 | 143 | 143 | 142 | 140 | 140 | 143 | 146 | 148 | 148 | 147 | 147 | 147 | 147 | 147 | 148 | 141 | 141 | 141 | 141 | 141 | 143 | 146 | 148 | 147 | 146 | 142 | 138 | 137 | 139 | 142 | 142 | 147 | 140 | 138 | 143 | 147 | 145 | 142 | 141 | 145 | 145 | 146 | 146 | 146 | 146 | 146 | 146 | 148 | 148 | 147 | 148 | 152 | 155 | 154 | 151 | 148 | 147 | 147 | 147 | 147 | 147 | 150 | 154 | 145 | 149 | 155 | 157 | 156 | 155 | 155 | 156 | 154 | 158 | 159 | 156 | . 299 157 | 158 | 158 | 158 | 157 | 156 | 157 | 158 | 157 | 161 | 163 | 163 | 162 | 164 | 165 | 165 | 157 | 162 | 168 | 171 | 167 | 158 | 150 | 145 | 137 | 139 | 145 | 149 | 142 | 131 | 133 | 142 | 145 | 146 | 146 | 145 | 144 | 144 | 144 | 144 | 149 | 147 | 145 | 144 | 143 | 143 | 144 | 144 | 147 | 148 | 147 | 144 | 143 | 143 | 142 | 140 | 143 | 143 | 144 | 146 | 144 | 141 | 140 | 141 | 144 | 144 | 144 | 145 | 146 | 147 | 147 | 147 | 145 | 148 | 150 | 149 | 147 | 148 | 151 | 154 | 151 | 151 | 150 | 149 | 148 | 148 | 150 | 152 | 156 | 152 | 150 | 153 | 159 | 163 | 161 | 158 | 155 | 151 | 150 | 155 | . - 결국 이 이미지는 683 $ times$ 1024 개의 숫자의 모임 . - 이 이미지를 벡터로 만든다음 히스토그램을 그려보자. . img.flatten().shape . (699392,) . fig1=plt.hist(img.flatten(),256,[0,256]) . - 히스토그램을 그려보니 120~200 사이에 너무 값들이 모여있음 . - 원래 0~255까지의 색을 표현할 수 있는데 컴퓨터가 표현가능한 색상보다 적은 조합만을 사용하고 있음. . - 아이디어: 좀 더 많은 색상을 표현할 수 없을까? $ to$ 위의 히스토그램은 좀 평평하게 만들면 되지 않을까? . img2=cv.equalizeHist(img) . fig2_1=plt.hist(img2.flatten(),256,[0,256]) . fig2_2=plt.hist(img2.flatten(),10,[0,256]) . plt.imshow(img2,cmap=&#39;gray&#39;,vmin=0,vmax=255) plt.colorbar() . &lt;matplotlib.colorbar.Colorbar at 0x7fe0ae980190&gt; . - 변환전과 변환후를 나란히 보게 되면? . import numpy as np . _img=np.hstack((img,img2)) . plt.imshow(_img,cmap=&#39;gray&#39;) . &lt;matplotlib.image.AxesImage at 0x7fe0ae82ad90&gt; . &#49689;&#51228;2 . - 아래 이미지를 HE(histogram equalization)로 보정하고 스샷제출 . ref: https://ukdevguy.com/histogram-equalization-in-python/ | . hw_img=cv.imread(&#39;hw_img.png&#39;,0) plt.imshow(hw_img,cmap=&#39;gray&#39;) . &lt;matplotlib.image.AxesImage at 0x7fe0b2c6c100&gt; . - 이미지는 https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/hw_img.png 에서 다운받을 수 있다. . hw_img2=cv.equalizeHist(hw_img) . plt.imshow(hw_img2,cmap=&#39;gray&#39;,vmin=0,vmax=255) plt.colorbar() . &lt;matplotlib.colorbar.Colorbar at 0x7fe0b2ab8040&gt; . import numpy as np . _img=np.hstack((hw_img,hw_img2)) . plt.imshow(_img,cmap=&#39;gray&#39;) . &lt;matplotlib.image.AxesImage at 0x7fe0b2b941f0&gt; .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_09_13_(2%EC%A3%BC%EC%B0%A8)_9%EC%9B%9413%EC%9D%BC(2).html",
            "relUrl": "/2022/04/29/_09_13_(2%EC%A3%BC%EC%B0%A8)_9%EC%9B%9413%EC%9D%BC(2).html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "(2주차) 9월13일",
            "content": "import . import matplotlib.pyplot as plt import numpy as np . boxplot . &#51204;&#48513;&#44256;&#50696;&#51228;: &#54217;&#44512;&#51008; &#44316;&#52270;&#51008; &#52769;&#51221;&#44050;&#51064;&#44032;? . - 전북고등학교에서 통계학을 수업하는 두 선생님이 있다. 편의상 A선생님과 B선생님이라고 하자. A선생님이 강의한 반의 통계학 점수는 79.1점이고, B선생님이 강의한 반의 통계학 점수는 78.3점 이라고 하자. . - 의사결정: A선생님에게 배운 학생들의 실력이 평균적으로 좋을 것이다. . y1=[75,75,76,76,77,77,79,79,79,98] # A선생님에게 통계학을 배운 학생의 점수들 y2=[76,76,77,77,78,78,80,80,80,81] # B선생님에게 통계학을 배운 학생의 점수들 . np.mean(y1), np.mean(y2) . (79.1, 78.3) . - 평균은 A반(=A선생님에게 통계학을 배운 반)이 더 높다. 그런데 98점을 받은 학생때문에 전체평균이 올라간 것이고, 나머지 학생들은 전체적으로 B반 학생들이 점수가 더 높다고 해석할 수 있다. . - 단순한 평균비교보다 분포를 비교해보는 것이 중요하다. 분포를 살펴보는 방법 중 유용한 방법이 박스플랏이다. . plt.boxplot(y1) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940f8f9be0&gt;, &lt;matplotlib.lines.Line2D at 0x7f940f8f9eb0&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940f91b280&gt;, &lt;matplotlib.lines.Line2D at 0x7f940f91b490&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940f8f9910&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940f91b760&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940f91ba30&gt;], &#39;means&#39;: []} . A반의 boxplot | 뚝 떨어진 하나의 점은 98점 | 붉은 선은 중앙값 (평균이 아니라 중앙값) | 나머지 점들은 7~80점에 분포되어있다. | . plt.boxplot(y2) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940fa09670&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fa098e0&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940fa09ac0&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fa09d90&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940fa093a0&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940fa150a0&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940fa15370&gt;], &#39;means&#39;: []} . B반의 boxplot | . - 아래와 같이 하면 박스플랏을 나란히 그릴 수 있다. . plt.boxplot([y1,y2]) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940fb1bd90&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fb2a0a0&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fb3b1c0&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fb3b490&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940fb2a370&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fb2a640&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fb3b760&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fb3ba30&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940fb1bac0&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fb2aeb0&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940fb2a910&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fb3bd00&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940fb2abe0&gt;, &lt;matplotlib.lines.Line2D at 0x7f940fb3bfd0&gt;], &#39;means&#39;: []} . - 미적인 그래프는 아니지만 이정도는 괜찮은것 같다. . boxplot&#51060;&#46976;? . - ref: https://github.com/mGalarnyk/Python_Tutorials/blob/master/Statistics/boxplot/box_plot.ipynb . np.random.seed(916170) # connection path is here: https://stackoverflow.com/questions/6146290/plotting-a-line-over-several-graphs mu, sigma = 0, 1 # mean and standard deviation s = np.random.normal(mu, sigma, 1000) fig, axes = plt.subplots(nrows = 1, ncols = 1, figsize=(10, 5)) # rectangular box plot bplot = axes.boxplot(s, vert=False, patch_artist=True, showfliers=True, # This would show outliers (the remaining .7% of the data) positions = [0], boxprops = dict(linestyle=&#39;--&#39;, linewidth=2, color=&#39;Black&#39;, facecolor = &#39;red&#39;, alpha = .4), medianprops = dict(linestyle=&#39;-&#39;, linewidth=2, color=&#39;Yellow&#39;), whiskerprops = dict(linestyle=&#39;-&#39;, linewidth=2, color=&#39;Blue&#39;, alpha = .4), capprops = dict(linestyle=&#39;-&#39;, linewidth=2, color=&#39;Black&#39;), flierprops = dict(marker=&#39;o&#39;, markerfacecolor=&#39;green&#39;, markersize=10, linestyle=&#39;none&#39;, alpha = .4), widths = .3, zorder = 1) axes.set_xlim(-4, 4) plt.xticks(fontsize = 14) axes.set_yticks([]) axes.annotate(r&#39;&#39;, xy=(-.73, .205), xycoords=&#39;data&#39;, xytext=(.66, .205), textcoords=&#39;data&#39;, arrowprops=dict(arrowstyle=&quot;|-|&quot;, connectionstyle=&quot;arc3&quot;) ); axes.text(0, .25, &quot;Interquartile Range n(IQR)&quot;, horizontalalignment=&#39;center&#39;, fontsize=18) axes.text(0, -.21, r&quot;Median&quot;, horizontalalignment=&#39;center&#39;, fontsize=16); axes.text(2.65, -.15, &quot; &quot;Maximum &quot;&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(-2.65, -.15, &quot; &quot;Minimum &quot;&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(-.68, -.24, r&quot;Q1&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(-2.65, -.21, r&quot;(Q1 - 1.5*IQR)&quot;, horizontalalignment=&#39;center&#39;, fontsize=16); axes.text(.6745, -.24, r&quot;Q3&quot;, horizontalalignment=&#39;center&#39;, fontsize=18); axes.text(.6745, -.30, r&quot;(75th Percentile)&quot;, horizontalalignment=&#39;center&#39;, fontsize=12); axes.text(-.68, -.30, r&quot;(25th Percentile)&quot;, horizontalalignment=&#39;center&#39;, fontsize=12); axes.text(2.65, -.21, r&quot;(Q3 + 1.5*IQR)&quot;, horizontalalignment=&#39;center&#39;, fontsize=16); axes.annotate(&#39;Outliers&#39;, xy=(2.93,0.015), xytext=(2.52,0.20), fontsize = 18, arrowprops={&#39;arrowstyle&#39;: &#39;-&gt;&#39;, &#39;color&#39;: &#39;black&#39;, &#39;lw&#39;: 2}, va=&#39;center&#39;); axes.annotate(&#39;Outliers&#39;, xy=(-3.01,0.015), xytext=(-3.41,0.20), fontsize = 18, arrowprops={&#39;arrowstyle&#39;: &#39;-&gt;&#39;, &#39;color&#39;: &#39;black&#39;, &#39;lw&#39;: 2}, va=&#39;center&#39;); fig.tight_layout() . . plotly . !pip install plotly !pip install ipywidgets !pip install jupyter-dash !pip install dash !pip install pandas . import plotly.express as px import pandas as pd from IPython.display import HTML . A=pd.DataFrame({&#39;score&#39;:y1,&#39;class&#39;:[&#39;A&#39;]*len(y1)}) B=pd.DataFrame({&#39;score&#39;:y2,&#39;class&#39;:[&#39;B&#39;]*len(y2)}) . df=pd.concat([A,B],ignore_index=True) . df . score class . 0 75 | A | . 1 75 | A | . 2 76 | A | . 3 76 | A | . 4 77 | A | . 5 77 | A | . 6 79 | A | . 7 79 | A | . 8 79 | A | . 9 98 | A | . 10 76 | B | . 11 76 | B | . 12 77 | B | . 13 77 | B | . 14 78 | B | . 15 78 | B | . 16 80 | B | . 17 80 | B | . 18 80 | B | . 19 81 | B | . fig=px.box(data_frame=df, x=&#39;class&#39;,y=&#39;score&#39;) HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False)) . . . histogram . &#55176;&#49828;&#53664;&#44536;&#47016;&#51060;&#46976;? . - X축이 변수의 구간, Y축은 그 구간에 포함된 빈도를 의미하는 그림 . - 예를들면 아래와 같음 . plt.hist(np.random.normal(loc=0, scale=1, size=1000000)) . (array([2.40000e+01, 1.21000e+03, 2.13380e+04, 1.39948e+05, 3.51614e+05, 3.39662e+05, 1.27147e+05, 1.80510e+04, 9.87000e+02, 1.90000e+01]), array([-5.05590169, -4.03792348, -3.01994528, -2.00196708, -0.98398887, 0.03398933, 1.05196753, 2.06994573, 3.08792394, 4.10590214, 5.12388034]), &lt;BarContainer object of 10 artists&gt;) . &#51204;&#48513;&#44256;&#50696;&#51228; . - 중심경향값, 집중경향치 (Measure of central tendency): 분포의 중심성을 나타내기 위한 값, 예시로는 평균, 중앙값. . https://en.wikipedia.org/wiki/Central_tendency | . - &#39;평균이 항상 좋은 중심경향값은 아니다.&#39;라는 사실은 이해했음. . - 하지만 특수한 상황을 가정하면 평균이 좋은 중심경향값임 . np.random.seed(43052) y1=np.random.normal(loc=0,scale=1,size=10000) #전북고 A반의 통계학 성적이라 생각하자. y2=np.random.normal(loc=0.5,scale=1,size=10000) #전북고 B반의 통계학 성적이라 생각하자. . np.mean(y1), np.mean(y2) . (-0.011790879905079434, 0.4979147460611458) . (np.mean(y2)-np.mean(y1)).round(3) . 0.51 . plt.boxplot([y1,y2]) . {&#39;whiskers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940ce6f730&gt;, &lt;matplotlib.lines.Line2D at 0x7f940ce6fa00&gt;, &lt;matplotlib.lines.Line2D at 0x7f940ce7fb20&gt;, &lt;matplotlib.lines.Line2D at 0x7f940ce7fdf0&gt;], &#39;caps&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940ce6fcd0&gt;, &lt;matplotlib.lines.Line2D at 0x7f940ce6ffa0&gt;, &lt;matplotlib.lines.Line2D at 0x7f940ce8d100&gt;, &lt;matplotlib.lines.Line2D at 0x7f940ce8d3d0&gt;], &#39;boxes&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940ce6f460&gt;, &lt;matplotlib.lines.Line2D at 0x7f940ce7f850&gt;], &#39;medians&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940ce7f2b0&gt;, &lt;matplotlib.lines.Line2D at 0x7f940ce8d6a0&gt;], &#39;fliers&#39;: [&lt;matplotlib.lines.Line2D at 0x7f940ce7f580&gt;, &lt;matplotlib.lines.Line2D at 0x7f940ce8d970&gt;], &#39;means&#39;: []} . 분포의 모양이 거의 비슷하고, 왼쪽그림을 거의 컨트롤+C,V 오른쪽에 붙인다음 위치조정을 한 느낌 | 이런상황에서는 $B반의 성적 approx A반의 성적 + 0.51$ 라고 주장해도 큰 무리가 없음. | . - 정규분포인것은 어떻게 아는가? $ to$ 히스토그램을 그려보아서 종 모양이 나오는지 살펴보자. . plt.hist(y1,bins=50) . (array([ 1., 1., 3., 0., 1., 4., 5., 12., 14., 26., 32., 52., 67., 89., 144., 171., 238., 282., 325., 378., 489., 492., 561., 635., 652., 636., 626., 606., 573., 539., 475., 444., 350., 250., 232., 172., 137., 80., 58., 47., 30., 23., 17., 12., 9., 4., 4., 0., 1., 1.]), array([-4.12186916, -3.96068404, -3.79949892, -3.6383138 , -3.47712868, -3.31594356, -3.15475844, -2.99357332, -2.8323882 , -2.67120308, -2.51001796, -2.34883284, -2.18764772, -2.0264626 , -1.86527748, -1.70409236, -1.54290724, -1.38172212, -1.220537 , -1.05935188, -0.89816676, -0.73698164, -0.57579652, -0.4146114 , -0.25342628, -0.09224116, 0.06894396, 0.23012908, 0.3913142 , 0.55249932, 0.71368444, 0.87486956, 1.03605468, 1.1972398 , 1.35842492, 1.51961004, 1.68079516, 1.84198028, 2.0031654 , 2.16435052, 2.32553564, 2.48672076, 2.64790588, 2.809091 , 2.97027612, 3.13146124, 3.29264636, 3.45383148, 3.6150166 , 3.77620172, 3.93738684]), &lt;BarContainer object of 50 artists&gt;) . plt.hist(y2,bins=50) . (array([ 1., 0., 3., 2., 4., 5., 5., 10., 16., 25., 33., 56., 74., 116., 119., 152., 244., 272., 351., 362., 438., 509., 531., 621., 624., 690., 636., 571., 564., 514., 462., 402., 356., 297., 233., 184., 144., 113., 80., 55., 38., 34., 21., 18., 4., 3., 2., 4., 1., 1.]), array([-3.5752867 , -3.4164866 , -3.2576865 , -3.0988864 , -2.9400863 , -2.7812862 , -2.6224861 , -2.463686 , -2.3048859 , -2.1460858 , -1.9872857 , -1.8284856 , -1.6696855 , -1.5108854 , -1.3520853 , -1.1932852 , -1.0344851 , -0.875685 , -0.7168849 , -0.5580848 , -0.3992847 , -0.2404846 , -0.0816845 , 0.0771156 , 0.2359157 , 0.3947158 , 0.5535159 , 0.712316 , 0.87111611, 1.02991621, 1.18871631, 1.34751641, 1.50631651, 1.66511661, 1.82391671, 1.98271681, 2.14151691, 2.30031701, 2.45911711, 2.61791721, 2.77671731, 2.93551741, 3.09431751, 3.25311761, 3.41191771, 3.57071781, 3.72951791, 3.88831801, 4.04711811, 4.20591821, 4.36471831]), &lt;BarContainer object of 50 artists&gt;) . plt.hist([y1,y2],bins=200) . (array([[ 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 2., 1., 0., 1., 1., 3., 4., 4., 2., 2., 6., 4., 1., 4., 7., 8., 9., 11., 5., 9., 9., 14., 12., 16., 11., 9., 18., 25., 30., 22., 18., 28., 29., 39., 40., 41., 37., 42., 48., 56., 58., 49., 80., 62., 62., 91., 78., 75., 82., 89., 81., 106., 85., 89., 126., 125., 106., 142., 141., 121., 121., 135., 154., 166., 146., 125., 169., 160., 170., 172., 162., 161., 161., 193., 146., 186., 170., 166., 197., 152., 149., 167., 173., 158., 155., 156., 153., 152., 137., 151., 147., 126., 141., 125., 139., 117., 116., 135., 118., 93., 115., 99., 78., 91., 77., 63., 81., 52., 83., 53., 61., 49., 46., 46., 47., 45., 26., 48., 31., 27., 27., 20., 17., 22., 15., 15., 14., 14., 15., 10., 8., 13., 7., 5., 8., 6., 6., 6., 2., 4., 9., 3., 3., 6., 2., 1., 4., 2., 2., 2., 2., 0., 1., 1., 2., 2., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 1., 1., 1., 0., 3., 1., 2., 1., 1., 1., 2., 1., 2., 2., 1., 6., 1., 6., 3., 7., 7., 5., 6., 10., 5., 7., 16., 9., 11., 13., 28., 21., 16., 20., 27., 25., 32., 33., 28., 31., 31., 39., 42., 34., 43., 44., 64., 56., 80., 64., 74., 77., 69., 82., 92., 101., 99., 81., 90., 115., 110., 106., 108., 127., 127., 138., 145., 138., 121., 159., 135., 145., 156., 186., 158., 164., 172., 182., 147., 194., 178., 176., 195., 162., 182., 164., 164., 163., 145., 150., 143., 155., 144., 142., 161., 141., 146., 129., 115., 132., 120., 118., 128., 103., 88., 111., 104., 97., 82., 77., 83., 83., 80., 77., 67., 58., 48., 47., 54., 50., 43., 36., 43., 33., 33., 42., 29., 24., 28., 19., 22., 16., 18., 14., 14., 11., 10., 9., 7., 12., 10., 8., 8., 9., 4., 7., 4., 6., 3., 8., 1., 1., 1., 0., 1., 0., 2., 1., 0., 2., 0., 0., 2., 2., 0., 0., 0., 0., 1., 0., 0., 0., 1.]]), array([-4.12186916, -4.07943623, -4.03700329, -3.99457035, -3.95213741, -3.90970448, -3.86727154, -3.8248386 , -3.78240567, -3.73997273, -3.69753979, -3.65510685, -3.61267392, -3.57024098, -3.52780804, -3.4853751 , -3.44294217, -3.40050923, -3.35807629, -3.31564335, -3.27321042, -3.23077748, -3.18834454, -3.1459116 , -3.10347867, -3.06104573, -3.01861279, -2.97617986, -2.93374692, -2.89131398, -2.84888104, -2.80644811, -2.76401517, -2.72158223, -2.67914929, -2.63671636, -2.59428342, -2.55185048, -2.50941754, -2.46698461, -2.42455167, -2.38211873, -2.33968579, -2.29725286, -2.25481992, -2.21238698, -2.16995405, -2.12752111, -2.08508817, -2.04265523, -2.0002223 , -1.95778936, -1.91535642, -1.87292348, -1.83049055, -1.78805761, -1.74562467, -1.70319173, -1.6607588 , -1.61832586, -1.57589292, -1.53345998, -1.49102705, -1.44859411, -1.40616117, -1.36372824, -1.3212953 , -1.27886236, -1.23642942, -1.19399649, -1.15156355, -1.10913061, -1.06669767, -1.02426474, -0.9818318 , -0.93939886, -0.89696592, -0.85453299, -0.81210005, -0.76966711, -0.72723417, -0.68480124, -0.6423683 , -0.59993536, -0.55750243, -0.51506949, -0.47263655, -0.43020361, -0.38777068, -0.34533774, -0.3029048 , -0.26047186, -0.21803893, -0.17560599, -0.13317305, -0.09074011, -0.04830718, -0.00587424, 0.0365587 , 0.07899164, 0.12142457, 0.16385751, 0.20629045, 0.24872338, 0.29115632, 0.33358926, 0.3760222 , 0.41845513, 0.46088807, 0.50332101, 0.54575395, 0.58818688, 0.63061982, 0.67305276, 0.7154857 , 0.75791863, 0.80035157, 0.84278451, 0.88521744, 0.92765038, 0.97008332, 1.01251626, 1.05494919, 1.09738213, 1.13981507, 1.18224801, 1.22468094, 1.26711388, 1.30954682, 1.35197976, 1.39441269, 1.43684563, 1.47927857, 1.52171151, 1.56414444, 1.60657738, 1.64901032, 1.69144325, 1.73387619, 1.77630913, 1.81874207, 1.861175 , 1.90360794, 1.94604088, 1.98847382, 2.03090675, 2.07333969, 2.11577263, 2.15820557, 2.2006385 , 2.24307144, 2.28550438, 2.32793732, 2.37037025, 2.41280319, 2.45523613, 2.49766906, 2.540102 , 2.58253494, 2.62496788, 2.66740081, 2.70983375, 2.75226669, 2.79469963, 2.83713256, 2.8795655 , 2.92199844, 2.96443138, 3.00686431, 3.04929725, 3.09173019, 3.13416313, 3.17659606, 3.219029 , 3.26146194, 3.30389487, 3.34632781, 3.38876075, 3.43119369, 3.47362662, 3.51605956, 3.5584925 , 3.60092544, 3.64335837, 3.68579131, 3.72822425, 3.77065719, 3.81309012, 3.85552306, 3.897956 , 3.94038894, 3.98282187, 4.02525481, 4.06768775, 4.11012068, 4.15255362, 4.19498656, 4.2374195 , 4.27985243, 4.32228537, 4.36471831]), &lt;a list of 2 BarContainer objects&gt;) . seaborn . !pip install seaborn . import seaborn as sns . A=pd.DataFrame({&#39;score&#39;:y1,&#39;class&#39;:[&#39;A&#39;]*len(y1)}) B=pd.DataFrame({&#39;score&#39;:y2,&#39;class&#39;:[&#39;B&#39;]*len(y2)}) df=pd.concat([A,B],ignore_index=True) . sns.histplot(df,x=&#39;score&#39;,hue=&#39;class&#39;) . &lt;AxesSubplot:xlabel=&#39;score&#39;, ylabel=&#39;Count&#39;&gt; . plotnine . !pip install plotnine . from plotnine import * . ggplot(df)+geom_histogram(aes(x=&#39;score&#39;,fill=&#39;class&#39;),position=&#39;identity&#39;,alpha=0.5) . /Users/honghyeonki/opt/anaconda3/envs/ds2021/lib/python3.8/site-packages/plotnine/stats/stat_bin.py:95: PlotnineWarning: &#39;stat_bin()&#39; using &#39;bins = 84&#39;. Pick better value with &#39;binwidth&#39;. . &lt;ggplot: (8767124928988)&gt; . plotly . - 인터랙티브 그래프를 위해서 plotly 홈페이지를 방문하여 적당한 코드를 가져온다. . import plotly.figure_factory as ff import numpy as np . hist_data=[y1,y2] group_labels=[&#39;A&#39;,&#39;B&#39;] fig = ff.create_distplot(hist_data, group_labels, bin_size=.2, show_rug=False) HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False)) . . . &#49689;&#51228;1 . (1) 자기학번으로 np.random.seed(202043052)를 만들고 . (2) y1, y2 // 10만개의 정규분포를 생성해서 저장 . y1: 평균 0, 표준편차=1 | y2: 평균 1, 표준편차=1 | . (3) plotly 를 활용하여 히스토그램을 겹쳐서 그려보는것. . np.random.seed(201855393) y1=np.random.normal(loc=0,scale=1,size=100000) y2=np.random.normal(loc=1,scale=1,size=100000) . A=pd.DataFrame({&#39;score&#39;:y1,&#39;class&#39;:[&#39;A&#39;]*len(y1)}) B=pd.DataFrame({&#39;score&#39;:y2,&#39;class&#39;:[&#39;B&#39;]*len(y2)}) df=pd.concat([A,B],ignore_index=True) . hist_data=[y1,y2] group_labels=[&#39;A&#39;,&#39;B&#39;] fig = ff.create_distplot(hist_data, group_labels, bin_size=.2, show_rug=False) HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;,include_mathjax=False)) . . .",
            "url": "https://sempre39.github.io/econ_blog/2022/04/29/_09_13_(2%EC%A3%BC%EC%B0%A8)_9%EC%9B%9413%EC%9D%BC(1).html",
            "relUrl": "/2022/04/29/_09_13_(2%EC%A3%BC%EC%B0%A8)_9%EC%9B%9413%EC%9D%BC(1).html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sempre39.github.io/econ_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sempre39.github.io/econ_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "",
          "url": "https://sempre39.github.io/econ_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sempre39.github.io/econ_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}